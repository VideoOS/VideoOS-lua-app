--
-- Created by IntelliJ IDEA.
-- User: videojj_pls
-- Date: 2018/10/29
-- Time: 2:36 PM
-- To change this template use File | Settings | File Templates.
--
require "os_config"
require "os_string"
require "os_constant"
require "os_util"
require "os_track"
voteWindow = object:new()
local adTypeName = "voteWindow"
local scale = getScale()
local OS_ICON_WEDGE_CLOSE = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAABxpRE9UAAAAAgAAAAAAAAAQAAAAKAAAABAAAAAQAAAA5Ecb3foAAACwSURBVFgJzJRBCoAwDARFFB/l3Q949eZH/HndgHuopNJme1AIxdLsjKQ4DH99UkpjL7fmLDSsqAM1qRIGR+2orSoLBw1+PSVJIINw5n1LvOBsCkk4cOb5EgU4m5okPuDMyyWeBoPwgLdWSVTALftEzdmdwMaEkiTQ/5659yEGXzI4XxQJGa5IdINHJLrDAxL2k/Fmzb3yzAkrrQiuuZgEeWscTilBQocLEv3gAYkm+A0AAP//Evc4PwAAAKlJREFUrZLRCoAgDEVFDP+s56DX3vqR/tyu0GCk6OYWiGHbPYdcCMKnlBKxTqxnsi58T8JYWRkCpXCS85NYgPtJGOB2CSH8Rl393QTs7frrUMAzapOrhAZOI+wmsQJ3k7DAzRIecA+JHSK9Ka5nddozQWY7ameDeaAmNjk47Emo4BQ6kOjDWSOXWIKzrP+fGMNZY5UwwVkWScjgrHGjd+v+XUd759Zgj/4XpzBj9h5K1HYAAAAASUVORK5CYII="
local OS_ICON_PRELOAD = "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"
local OS_NO_LOGIN_INFO = "您还未登录,请先登录"
local OS_P_BG = ""

local OS_L_BG = ""

local OS_CELL_L_BG = ""

local OS_L_BG_LINE = "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"

local OS_CELL_P_BG = ""

local OS_P_BG_LINE = "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"

local backImageRatioL = 200.0 / 375.0
local backImageRatioP = 372.0 / 432.0

local function getHotspotExposureTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.exposureTrackLink
end

local function getHotspotClickTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.clickTrackLink
end

local function closeView()
    Native:widgetEvent(eventTypeClose, voteWindow.id, adTypeName, actionTypeNone, "")
    Native:destroyView()
end

local function mathPercent(num)
    if (type(num) ~= 'number' or type(num) == 'inf') then
        return 0, "0.0%"
    end
    if (num == 0 or num == 0.0 or tostring(num) == "inf") then
        return 0, "0.0%"
    end
    local floorNum = math.floor(num * 1000 + 0.5) * 0.1
    local percentNum = math.floor(floorNum)
    if (percentNum < floorNum) then
        return percentNum, floorNum .. "%"
    else
        return percentNum, floorNum .. ".0%"
    end
end

local function calculateVoteCount()

    local len = 0
    if voteWindow.voteCount ~= nil then
        for k, v in pairs(voteWindow.voteCount) do
            len = len + v
        end
    end

    voteWindow.totalVote = len
    if voteWindow.totalVote == 0 then
        voteWindow.totalVote = 1
    end
end

local function translationAnim(x, y)
    local anim = Animation():translation(x, y):duration(0.3)
    return anim
end

local function startViewTranslationAnim(view, x, y, table)
    if (view == nil) then
        return nil
    end
    if table ~= nil then
        return translationAnim(x, y):with(view):callback(table):start()
    else
        return translationAnim(x, y):with(view):start()
    end
end

local function getUserVoteInfo(callback)

    local businessInfo = {
        userId = Native:getIdentity(),
        creativeId = voteWindow.data.creativeId
    }

    local paramData = {
        businessParam = businessInfo,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    --     print("==[LuaView] "..userInfoTable.uid)
    -- print("[LuaView] "..OS_HTTP_GET_MOBILE_QUERY)
    -- print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    voteWindow.request:post(OS_HTTP_GET_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        voteWindow.loadingCount = voteWindow.loadingCount - 1
        if voteWindow.loadingCount <= 0 then
            voteWindow.voteLoadingView:hide()
        end

        if (response == nil) then
            voteWindow.voteErrorView:show()
            return
        end
        -- print("luaview getUserVoteInfo 11"..Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            voteWindow.voteErrorView:show()
            return
        end
        local dataTable = response.businessInfo
        if (dataTable == nil) then
            local showLinkUrl = getHotspotExposureTrackLink(voteWindow.data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (voteWindow.launchPlanId ~= nil) then
                osTrack(voteWindow.launchPlanId, 2, 1)
            end
            if callback ~= nil then
                callback()
            end
            return
        end
        if dataTable.isVote == true then
            voteWindow.section = dataTable.vote
            showVoteResult()
        else
            local showLinkUrl = getHotspotExposureTrackLink(voteWindow.data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (voteWindow.launchPlanId ~= nil) then
                osTrack(voteWindow.launchPlanId, 2, 1)
            end
        end
    end, voteWindow.luaview)
end

local function postUserVoteInfo(voteIndex)

    local businessInfoTable = {
        isVote = true,
        vote = voteIndex
    }
    local businessParamTable = {
        userId = Native:getIdentity(),
        creativeId = voteWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    print("[LuaView] " .. OS_HTTP_POST_MOBILE_QUERY)
    print("[LuaView] " .. Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    voteWindow.request:post(OS_HTTP_POST_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview postUserVoteInfo")
        if (response == nil) then
            return
        end
        print("luaview postUserVoteInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.launchInfoList
        if (dataTable == nil) then
            return
        end
    end, voteWindow.luaview)
end

local function getVoteCountInfo()

    local businessInfoTable = {}
    for k, v in pairs(voteWindow.data.data.voteList) do
        businessInfoTable[k] = {
            action = "count",
            condition = {
                {
                    key = "vote",
                    value = k,
                    operator = "equal"
                }
            }
        }
    end

    local businessParamTable = {
        creativeId = voteWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    print("[LuaView] " .. OS_HTTP_GET_COMMON_QUERY)
    --print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    voteWindow.request:post(OS_HTTP_GET_COMMON_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview getVoteCountInfo")

        voteWindow.loadingCount = voteWindow.loadingCount - 1
        if voteWindow.loadingCount <= 0 then
            voteWindow.voteLoadingView:hide()
        end

        if (response == nil) then
            voteWindow.voteErrorView:show()
            return
        end
        print("luaview getVoteCountInfo 11")
        print("luaview getVoteCountInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            voteWindow.voteErrorView:show()
            return
        end
        local dataTable = response.commonResult
        if (dataTable == nil) then
            return
        end
        voteWindow.voteCount = dataTable
        --如果需要显示投票结果，显示投票结果
        if voteWindow.needShowVoteResult ~= nil and voteWindow.needShowVoteResult == true then
            calculateVoteCount()
            voteWindow.voteWindowScrollview:reload()
        end
    end)
end

--未上传时传递index，对应count+1，已上传不需要+1
function showVoteResult(index)
    local clickLinkUrl = getHotspotClickTrackLink(voteWindow.data, 1)
    if (clickLinkUrl ~= nil) then
        Native:get(clickLinkUrl)
    end
    if (voteWindow.launchPlanId ~= nil) then
        osTrack(voteWindow.launchPlanId, 3, 1)
    end
    if voteWindow.voteCount == nil then
        voteWindow.isVoted = true
        voteWindow.needShowVoteResult = true
        return
    end
    if index ~= nil then
        voteWindow.voteCount[index] = voteWindow.voteCount[index] + 1
        voteWindow.section = index
        postUserVoteInfo(index)
    end

    calculateVoteCount()
    voteWindow.isVoted = true
    voteWindow.voteWindowScrollview:reload()
end

local function voteClickEvent(section, row)
    -- local userInfoTable = Native:getUserInfo()
    -- if (userInfoTable == nil or userInfoTable.uid == nil or userInfoTable.uid == "") then
    --     Toast(OS_NO_LOGIN_INFO)
    --     Native:requireLogin(function(userInfo)
    --         voteWindow.loadingCount = voteWindow.loadingCount + 1
    --         voteWindow.voteLoadingView:show()
    --         getUserVoteInfo(function()
    --             postUserVoteInfo(row)
    --             showVoteResult(row)
    --         end)
    --     end)
    --     return
    -- end

    showVoteResult(row)
end

local function getBgImageFrame(imageWidth, imageHeight)
    local backImageRatio = backImageRatioL
    local isPortrait = Native:isPortraitScreen()
    if isPortrait then
        backImageRatio = backImageRatioP
    end

    if imageHeight > 0 then
        local x, y, width, height = 0, 0, imageWidth, imageHeight
        local videoRatio = imageWidth / imageHeight
        if videoRatio >= backImageRatio then
            height = width / backImageRatio
            y = (imageHeight - height) * 0.5
        else
            width = height * backImageRatio
            x = (imageWidth - width) * 0.5
        end
        return x, y, width, height
    end
    return 0, 0, 0, 0
end

local function setLuaViewSize(luaview, isPortrait) --设置当前容器大小
    if (luaview == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        luaview:frame(0, 0, math.min(screenWidth, screenHeight), math.max(screenWidth, screenHeight))
        luaview:align(Align.BOTTOM)
    else
        luaview:frame(0, 0, math.max(screenWidth, screenHeight), math.min(screenWidth, screenHeight))
        luaview:align(Align.RIGHT)
    end
end

local function setVoteViewSize(data, voteWindowView, voteWindowContentView, voteBgImage, voteBgLineImage, isPortrait) --设置当前容器大小
    if (data == nil or voteWindowView == nil or voteWindowContentView == nil or voteBgImage == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        voteWindowView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        -- voteWindowView:align(Align.BOTTOM)
        voteWindowContentView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        voteWindowContentView:align(Align.BOTTOM)

        local x, y, w, h = getBgImageFrame(voteWindow.portraitWidth, voteWindow.portraitHeight)
        voteBgImage:frame(x, y, w, h)
        voteBgImage:image(Data(OS_P_BG))
        voteBgLineImage:image(Data(OS_P_BG_LINE))
        voteBgLineImage:frame(45 * scale, 48 * scale, 250 * scale, 26 * scale)
        if System.ios() then
            voteWindowView:frame(0, math.max(screenWidth, screenHeight) - voteWindow.portraitHeight, voteWindow.portraitWidth, voteWindow.portraitHeight)
        else
            voteWindowView:align(Align.BOTTOM)
        end
    else
        voteWindowView:frame(0, 0, 215 * scale, math.min(screenWidth, screenHeight))
        voteWindowContentView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
        voteWindowContentView:align(Align.RIGHT)
        local x, y, w, h = getBgImageFrame(200 * scale, math.min(screenWidth, screenHeight))
        voteBgImage:frame(x, y, w, h)
        voteBgImage:image(Data(OS_L_BG))
        voteBgLineImage:image(Data(OS_L_BG_LINE))
        voteBgLineImage:frame(25 * scale, 54 * scale, 171 * scale, 23 * scale)
        if System.ios() then
            voteWindowView:frame(math.max(screenWidth, screenHeight) - 215 * scale, 0, 215 * scale, math.min(screenWidth, screenHeight))
        else
            voteWindowView:align(Align.RIGHT)
        end
    end
end

local function setVoteLoadingViewSize(data, voteLoadingView, voteLoading, isPortrait) --设置当前容器大小
    if (data == nil or voteLoadingView == nil or voteLoading == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        voteLoadingView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
    else
        voteLoadingView:frame(0, 0, 215 * scale, math.min(screenWidth, screenHeight))
    end
    voteLoadingView:align(Align.RIGHT)
    voteLoading:frame(0, 0, 40, 40)
    voteLoading:align(Align.CENTER)
end

local function setVoteErrorViewSize(data, voteErrorView, voteErrorMessage, isPortrait) --设置当前容器大小
    -- if (data == nil or voteErrorView == nil or voteErrorMessage == nil) then
    --     return
    -- end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        voteErrorView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        voteErrorMessage:frame(0, voteWindow.portraitHeight * 0.7, math.min(screenWidth, screenHeight), 40)
    else
        voteErrorView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
        voteErrorMessage:frame(0, math.min(screenWidth, screenHeight) * 0.7, 215 * scale, 40)
    end
    voteErrorView:align(Align.RIGHT)
end

local function setVoteIconViewSize(data, voteIconView, isPortrait)
    if (data == nil or voteIconView == nil) then
        return
    end
    if (isPortrait) then
        voteIconView:xy(16 * scale, 19 * scale)
    else
        voteIconView:xy(0, 27 * scale)
    end
end

local function setVoteTopViewSize(data, voteWindowTopLabel, voteWindowTopCloseView, isPortrait) --设置当前容器大小
    if (data == nil or voteWindowTopLabel == nil or voteWindowTopCloseView == nil) then
        return
    end
    if (isPortrait) then
        voteWindowTopCloseView:show()
        voteWindowTopLabel:frame(66 * scale, 22 * scale, 300 * scale, 25 * scale)
        voteWindowTopLabel:textSize(18)
    else
        voteWindowTopCloseView:hide()
        voteWindowTopLabel:frame(25 * scale, 33 * scale, 170 * scale, 20 * scale)
        voteWindowTopLabel:textSize(14)
    end
end

local function setVoteScrollviewSize(data, voteWindowScrollview, isPortrait) --设置当前容器大小
    if (data == nil or voteWindowScrollview == nil) then
        return
    end
    if (isPortrait) then
        local screenWidth, screenHeight = System.screenSize()
        voteWindowScrollview:frame(0, 80 * scale, voteWindow.portraitWidth, voteWindow.portraitHeight - 80 * scale)
    else
        voteWindowScrollview:frame(0, 90 * scale, 200 * scale, 285 * scale)
    end
    voteWindowScrollview:reload()
end

--屏幕旋转--
local function rotationScreen(isPortrait)
    setLuaViewSize(voteWindow.luaview, isPortrait)
    setVoteViewSize(voteWindow.data, voteWindow.voteWindowView, voteWindow.voteWindowContentView, voteWindow.voteBgImage, voteWindow.voteBgLineImage, isPortrait)
    setVoteIconViewSize(voteWindow.data, voteWindow.voteWindowIcon, isPortrait)
    setVoteTopViewSize(voteWindow.data, voteWindow.voteWindowTopLabel, voteWindow.voteWindowTopCloseView, isPortrait)
    setVoteScrollviewSize(voteWindow.data, voteWindow.voteWindowScrollview, isPortrait)
    setVoteLoadingViewSize(voteWindow.data, voteWindow.voteLoadingView, voteWindow.voteLoading, isPortrait)
    setVoteErrorViewSize(voteWindow.data, voteWindow.voteErrorView, voteWindow.voteErrorMessage, isPortrait)
end

local function registerMedia()
    local media = Media()
    -- body
    -- 注册window callback通知
    local callbackTable = {
        --0: 竖屏小屏幕，1 竖屏全凭，2 横屏全屏
        onPlayerSize = function(type)
            if (type == 0) then
                rotationScreen(true)
            elseif (type == 1) then
                rotationScreen(true)
            elseif (type == 2) then
                rotationScreen(false)
            end
            voteWindow.voteWindowScrollview:reload()
        end
    }
    media:mediaCallback(callbackTable)
    return media
end

local function getSectionCount(data)
    if (data == nil) then
        return 0
    end
    local dataTable = data.data
    if (dataTable == nil) then
        return 0
    end
    local voteRule = dataTable.voteRule
    if (voteRule ~= nil) then
        return 2
    else
        return 1
    end
end

local function getRowCount(data, section)
    if (data == nil) then
        return 0
    end
    local dataTable = data.data
    if (dataTable == nil) then
        return 0
    end
    local voteList = dataTable.voteList
    if (voteList == nil) then
        return 0
    end
    if (section == 1) then
        return table_leng(voteList)
    else
        return 1
    end
end

local function getStateCellSize(data)
    if (data == nil) then
        return 0, 0
    end
    local voteRule = data.voteRule
    if (voteRule == nil) then
        return 0, 0
    end
    local isPortrait = Native:isPortraitScreen()
    if (isPortrait) then
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, 334 * scale, 14)
        local screenWidth, screenHeight = System.screenSize()
        return math.min(screenWidth, screenHeight), screenHeight + 30 * scale
    else
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, 160 * scale, 12)
        return 200 * scale, textHeight + 20 * scale
    end
end

local function createInitCell(cell, section, row)
    cell.rootView = View()
    cell.bgImageView = Image(Native)
    cell.bgImageView:scaleType(ScaleType.CENTER_CROP)

    cell.iconView = Image(Native)
    cell.iconView:placeHolderImage(Data(OS_ICON_PRELOAD))
    cell.iconView:scaleType(ScaleType.CENTER_CROP)

    cell.nameView = Label()
    cell.nameView:textColor(0x666161)
    cell.nameView:textAlign(TextAlign.LEFT)

    cell.voteTagMaxView = View() -- 投票进度
    cell.voteTagMaxView:backgroundColor(0x9FB1FF)
    cell.voteTagMaxView:hide()

    cell.voteTagView = View() -- 投票进度
    cell.voteTagView:backgroundColor(0x002FFE)
    cell.voteTagView:hide()

    cell.percentView = Label()
    cell.percentView:textColor(0x002FFE)
    cell.percentView:text("100.0%")
    cell.percentView:textAlign(TextAlign.LEFT)
    cell.percentView:hide()

    cell.voteView = Label()
    cell.voteView:textColor(0x286BF9)
    cell.voteView:text("投票")
    cell.voteView:textAlign(TextAlign.LEFT)
    cell.voteView:hide()
end

local function createInitStateCell(cell, section, row)
    cell.stateView = Label()
    if (System.android()) then
        cell.stateView:textColor(0xB2FFFFFF)
    else
        cell.stateView:textColor(0xFFFFFF, 0.7)
    end
    if (System.android()) then
        cell.stateView:maxLines(100)
    else
        cell.stateView:lines(100)
    end
    cell.stateView:textAlign(TextAlign.LEFT)
end

local function createCellLandscapeSize(data, cell, section, row)


    cell.rootView:frame(0, 0, 200 * scale, 64 * scale)

    cell.bgImageView:frame(15.5 * scale, 13.5 * scale, 187 * scale, 50 * scale)

    cell.iconView:frame(11.7 * scale, 11.5 * scale, 41.0 * scale, 41 * scale)

    cell.nameView:frame(57.7 * scale, 23.5 * scale, 120 * scale, 17 * scale)

    cell.nameView:textSize(12)

    cell.bgImageView:image(Data(OS_CELL_L_BG))

    if (voteWindow.isVoted) then

        if (cell.voteTagMaxView:isHide()) then
            cell.voteTagMaxView:show()
        end
        if (cell.voteTagView:isHide()) then
            cell.voteTagView:show()
        end
        if (cell.percentView:isHide()) then
            cell.percentView:show()
        end
        if (cell.voteView:isShow()) then
            cell.voteView:hide()
        end
        local percent, percentText = mathPercent(voteWindow.voteCount[row] / voteWindow.totalVote)
        local percentWidth = percent * (66 * scale / 100) --90 * scale为最大宽度
        if (percentWidth == 0) then
            percentWidth = 6 * scale
        end

        cell.nameView:frame(55 * scale, 17.5 * scale, 120 * scale, 17 * scale)
        cell.voteTagMaxView:frame(55 * scale, 37.5 * scale, 66 * scale, 6 * scale)
        cell.voteTagView:frame(55 * scale, 37.5 * scale, percentWidth, 6 * scale)
        cell.percentView:frame(127 * scale, 35.5 * scale, 51.5 * scale, 12 * scale)

        cell.voteTagMaxView:cornerRadius(3 * scale)
        cell.voteTagView:cornerRadius(3 * scale)
        cell.percentView:textSize(12)
        cell.percentView:text(percentText)
    else
        if (cell.voteTagView:isShow()) then
            cell.voteTagView:hide()
        end
        if (cell.voteTagMaxView:isShow()) then
            cell.voteTagMaxView:hide()
        end
        if (cell.percentView:isShow()) then
            cell.percentView:hide()
        end
        if (cell.voteView:isHide()) then
            cell.voteView:show()
        end

        cell.voteView:frame(143.7 * scale, 23.5 * scale, 48 * scale, 17 * scale)

        cell.voteView:textSize(12)
    end


    if (data == nil) then
        return
    end
    local title = data.title
    if (title ~= nil) then
        cell.nameView:text(title)
    end
    local imageUrl = data.imageUrl
    if (imageUrl ~= nil) then
        cell.iconView:image(imageUrl)
    end
    cell.voteView:onClick(function()
        --TODO 投票逻辑添加
        voteClickEvent(section, row)
    end)
end

local function createStateCellLandscapeSize(data, cell, section, row)

    if (data == nil) then
        return
    end

    local voteRule = data.voteRule
    if (System.android()) then
        cell.stateView:margin(20 * scale, 15 * scale, 20 * scale, 10 * scale)
    else
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, 200 * scale - 21 * scale * 2, 12)
        cell.stateView:frame(20 * scale, 15 * scale, textWidth, textHeight + 5 * scale)
    end

    cell.stateView:textSize(12)

    if (voteRule ~= nil) then
        cell.stateView:text(voteRule)
    end
end

local function createCellPortraitSize(data, cell, section, row)
    local screenWidth, screenHeight = System.screenSize()
    local minWidth = math.min(screenWidth, screenHeight)


    cell.rootView:frame(0, 0, minWidth, 83 * scale)
    cell.bgImageView:frame(minWidth * 0.176, 14.2 * scale, minWidth * 0.749, 76 * scale)
    cell.iconView:frame(minWidth * 0.157, 10.5 * scale, 62.0 * scale, 62 * scale)
    cell.nameView:frame(minWidth * 0.341, 29 * scale, 200 * scale, 25 * scale)

    cell.nameView:textSize(18)

    cell.bgImageView:image(Data(OS_CELL_P_BG))

    if (voteWindow.isVoted) then
        if (cell.voteTagMaxView:isHide()) then
            cell.voteTagMaxView:show()
        end
        if (cell.voteTagView:isHide()) then
            cell.voteTagView:show()
        end
        if (cell.percentView:isHide()) then
            cell.percentView:show()
        end
        if (cell.voteView:isShow()) then
            cell.voteView:hide()
        end
        local percent, percentText = mathPercent(voteWindow.voteCount[row] / voteWindow.totalVote)
        local percentWidth = percent * (minWidth * 0.33 / 100) --205 * scale为最大宽度
        if (percentWidth == 0) then
            percentWidth = 10 * scale
        end

        cell.nameView:frame(minWidth * 0.341, 22 * scale, 200 * scale, 25 * scale)
        cell.voteTagMaxView:frame(minWidth * 0.341, 55 * scale, minWidth * 0.33, 6 * scale)
        cell.voteTagView:frame(minWidth * 0.341, 55 * scale, percentWidth, 6 * scale)

        cell.percentView:frame(minWidth * 0.694, 50 * scale, 64.5 * scale, 14 * scale)

        cell.voteTagMaxView:cornerRadius(3 * scale)
        cell.voteTagView:cornerRadius(3 * scale)
        cell.percentView:textSize(14)
        cell.percentView:text(percentText)
    else
        if (cell.voteTagView:isShow()) then
            cell.voteTagView:hide()
        end
        if (cell.voteTagMaxView:isShow()) then
            cell.voteTagMaxView:hide()
        end
        if (cell.percentView:isShow()) then
            cell.percentView:hide()
        end
        if (cell.voteView:isHide()) then
            cell.voteView:show()
        end

        cell.voteView:frame(minWidth * 0.685, 29 * scale, 72 * scale, 25 * scale)

        cell.voteView:textSize(18)
    end



    if (data == nil) then
        return
    end
    local title = data.title
    if (title ~= nil) then
        cell.nameView:text(title)
    end
    local imageUrl = data.imageUrl
    if (imageUrl ~= nil) then
        cell.iconView:image(imageUrl)
    end
    cell.voteView:onClick(function()
        --TODO 投票逻辑添加
        voteClickEvent(section, row)
    end)
end

local function createStateCellPortraitSize(data, cell, section, row)

    if (data == nil) then
        return
    end
    local voteRule = data.voteRule

    if (System.android()) then
        cell.stateView:margin(21 * scale, 15 * scale, 21 * scale, 15 * scale)
    else
        local screenWidth, screenHeight = System.screenSize()
        local cellWidth = math.min(screenWidth, screenHeight)
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, cellWidth - 21 * scale * 2 - 2 * scale, 14)
        cell.stateView:frame(21 * scale, 15 * scale, cellWidth - 21 * scale * 2, textHeight + 5 * scale)
    end
    cell.stateView:textSize(14)


    if (voteRule ~= nil) then
        cell.stateView:text(voteRule)
    end
end

--全局父控件
local function createLuaView(isPortrait)
    local luaView
    -- if System.android() then
    --     luaView = View()
    -- else
    --     luaView = ThroughView()
    -- end
    luaView = View()
    setLuaViewSize(luaView, isPortrait)
    return luaView
end

--投票云窗大小控件
local function createVoteView(data, isPortrait)
    local voteWindowView = View()
    local voteWindowContentView = View()
    local voteBgImage = Image(Native)
    voteBgImage:scaleType(ScaleType.FIT_XY)

    local voteBgLineImage = Image(Native)
    voteBgLineImage:scaleType(ScaleType.FIT_XY)
    setVoteViewSize(data, voteWindowView, voteWindowContentView, voteBgImage, voteBgLineImage, isPortrait)

    voteWindowContentView:addView(voteBgImage)
    voteWindowContentView:addView(voteBgLineImage)
    voteWindowView:addView(voteWindowContentView)
    return voteWindowView, voteWindowContentView, voteBgImage, voteBgLineImage
end

--投票loading控件
local function createVoteLoadingView(data, isPortrait)
    local voteLoadingView = View()
    voteLoadingView:backgroundColor(0x000000, 0.4)
    local voteLoading = LoadingIndicator()
    voteLoading:start()
    setVoteLoadingViewSize(data, voteLoadingView, voteLoading, isPortrait)
    voteLoadingView:addView(voteLoading)
    voteLoadingView:hide()
    voteLoadingView:onClick(function()
    end)
    return voteLoadingView, voteLoading
end

--投票错误控件
local function createVoteErrorView(data, isPortrait)
    local voteErrorView = View()
    voteErrorView:backgroundColor(0x000000, 0.4)

    local voteErrorMessage = Label()
    voteErrorMessage:textColor(0xFFFFFF)
    voteErrorMessage:text("服务器出错了，请稍后再试")
    voteErrorMessage:textAlign(TextAlign.CENTER)
    local voteLoading = LoadingIndicator()

    setVoteErrorViewSize(data, voteErrorView, voteErrorMessage, isPortrait)
    voteErrorView:addView(voteErrorMessage)
    voteErrorView:hide()
    voteErrorView:onClick(function()
        voteErrorView:hide()
    end)
    return voteErrorView, voteErrorMessage
end

local function createVoteIconView(data, isPortrait)
    local voteWindowIcon = Image(Native)
    voteWindowIcon:scaleType(ScaleType.CENTER_CROP)
    voteWindowIcon:size(30 * scale, 30 * scale)
    voteWindowIcon:placeHolderImage(Data(OS_ICON_PRELOAD))
    voteWindowIcon:cornerRadius(15 * scale)
    setVoteIconViewSize(data, voteWindowIcon, isPortrait)
    return voteWindowIcon
end

local function createVoteTopView(data, isPortrait)

    local voteWindowTopLabel = Label()
    local title = "快来Pick你喜欢的小姐姐吧"
    voteWindowTopLabel:textColor(0xFFFFFF)
    voteWindowTopLabel:text(title)

    local voteWindowTopCloseView = View()
    voteWindowTopCloseView:frame(0, 0, 37 * scale, 36 * scale)
    voteWindowTopCloseView:align(Align.RIGHT)
    voteWindowTopCloseView:hide()

    local voteWindowTopCloseImage = Image(Native)
    voteWindowTopCloseImage:frame(0, 0, 15 * scale, 15 * scale)
    voteWindowTopCloseImage:scaleType(ScaleType.CENTER_CROP)
    voteWindowTopCloseImage:image(Data(OS_ICON_WEDGE_CLOSE))
    voteWindowTopCloseImage:align(Align.BOTTOM)

    voteWindowTopCloseView:addView(voteWindowTopCloseImage)

    setVoteTopViewSize(data, voteWindowTopLabel, voteWindowTopCloseView, isPortrait)
    return voteWindowTopLabel, voteWindowTopCloseView
end

local function createVoteScrollview(data, isPortrait)
    local dataTable = voteWindow.data.data
    local voteTable = dataTable.voteList
    local voteWindowScrollview = CollectionView {
        Section = {
            SectionCount = function()
                -- 返回页面区块的个数（不同区块的种类数）
                return getSectionCount(voteWindow.data)
            end,
            RowCount = function(section)
                -- 返回每个区块对应有的坑位数
                return getRowCount(voteWindow.data, section)
            end
        },
        Cell = {
            Id = function(section, row)
                -- 返回每个区块对应额坑位ID
                if (section == 1) then
                    return "VoteCell"
                elseif (section == 2) then
                    if (System.android()) then
                        return "VoteState"
                    else
                        return "VoteStateIOS"
                    end
                end
            end,
            VoteCell = {
                Size = function(section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        local screenWidth, screenHeight = System.screenSize()
                        return math.min(screenWidth, screenHeight), 83 * scale
                    else
                        return 200 * scale, 64 * scale
                    end
                end,
                Init = function(cell, section, row)
                    createInitCell(cell, section, row)
                end,
                Layout = function(cell, section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        createCellPortraitSize(voteTable[row], cell, section, row)
                    else
                        createCellLandscapeSize(voteTable[row], cell, section, row)
                    end
                end
            },
            VoteState = {
                Sizes = function(section, row)
                    return 0, 0
                end,
                Init = function(cell, section, row)
                    createInitStateCell(cell, section, row)
                end,
                Layout = function(cell, section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        createStateCellPortraitSize(dataTable, cell, section, row)
                    else
                        createStateCellLandscapeSize(dataTable, cell, section, row)
                    end
                end
            },
            VoteStateIOS = {
                Size = function(section, row)
                    local voteRule = dataTable.voteRule
                    local isPortrait = Native:isPortraitScreen()
                    if voteRule == nil then
                        return 0, 0
                    end
                    if (isPortrait) then
                        local screenWidth, screenHeight = System.screenSize()
                        local cellWidth = math.min(screenWidth, screenHeight)
                        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, cellWidth - 42 * scale, 14)
                        return cellWidth, textHeight + 5 * scale + 30 * scale
                    else
                        local cellWidth = 200 * scale
                        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, cellWidth - 40 * scale, 12)
                        return cellWidth, textHeight + 5 * scale + 20 * scale
                    end
                end,
                Init = function(cell, section, row)
                    createInitStateCell(cell, section, row)
                end,
                Layout = function(cell, section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        createStateCellPortraitSize(dataTable, cell, section, row)
                    else
                        createStateCellLandscapeSize(dataTable, cell, section, row)
                    end
                end
            }
        },
        Callback = {
            -- 整个CollectionView的事件回调
            Scrolling = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                -- 滚动中回调
            end,
            ScrollBegin = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                -- 滚动开始回调
            end,
            ScrollEnd = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                -- 滚动结束回调
            end
        }
    }
    setVoteScrollviewSize(data, voteWindowScrollview, isPortrait)
    return voteWindowScrollview
end


local function onCreate(data)
    registerMedia()

    local isPortrait = Native:isPortraitScreen()
    voteWindow.luaview = createLuaView(isPortrait)
    voteWindow.voteWindowView, voteWindow.voteWindowContentView, voteWindow.voteBgImage, voteWindow.voteBgLineImage = createVoteView(data, isPortrait)
    voteWindow.voteWindowIcon = createVoteIconView(data, isPortrait)
    voteWindow.voteWindowTopLabel, voteWindow.voteWindowTopCloseView = createVoteTopView(data, isPortrait)
    voteWindow.voteWindowScrollview = createVoteScrollview(data, isPortrait)
    voteWindow.voteLoadingView, voteWindow.voteLoading = createVoteLoadingView(data, isPortrait)
    voteWindow.voteErrorView, voteWindow.voteErrorMessage = createVoteErrorView(data, isPortrait)

    voteWindow.luaview:addView(voteWindow.voteWindowView)
    voteWindow.voteWindowView:addView(voteWindow.voteWindowIcon)

    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowTopLabel)
    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowTopCloseView)
    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowScrollview)
    voteWindow.voteWindowView:addView(voteWindow.voteLoadingView)
    voteWindow.voteWindowView:addView(voteWindow.voteErrorView)
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if System.ios() then
            voteWindow.voteWindowView:y(math.max(screenWidth, screenHeight))
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowView, 0, -voteWindow.portraitHeight)
        else
            voteWindow.voteWindowView:translation(0, voteWindow.portraitHeight)
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowView, 0, 0)
        end
    else
        if System.ios() then
            voteWindow.voteWindowView:x(math.max(screenWidth, screenHeight))
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowView, -215 * scale, 0)
        else
            voteWindow.voteWindowView:translation(215 * scale, 0)
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowView, 0, 0)
        end
    end

    voteWindow.voteWindowView:onClick(function()
    end)
    voteWindow.luaview:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(voteWindow.voteWindowView, 0, voteWindow.portraitHeight, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        else
            startViewTranslationAnim(voteWindow.voteWindowView, 215 * scale, 0, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)
    voteWindow.voteWindowTopCloseView:onClick(function()
        startViewTranslationAnim(voteWindow.voteWindowView, 0, voteWindow.portraitHeight, {
            onCancel = function()
                closeView()
            end,
            onEnd = function()
                closeView()
            end,
            onPause = function()
                closeView()
            end
        })
    end)
    local dataTable = voteWindow.data.data
    if (dataTable == nil) then
        return
    end
    local voteTitle = dataTable.voteTitle
    if (voteTitle ~= nil) then
        voteWindow.voteWindowTopLabel:text(voteTitle)
    end
    local voteIcon = dataTable.voteImageUrl
    if (voteIcon ~= nil) then
        voteWindow.voteWindowIcon:image(voteIcon)
    end
    Native:widgetEvent(eventTypeShow, voteWindow.id, adTypeName, actionTypeNone, "")
end

local function setConfig(data)
    if (data == nil) then
        return
    end
    voteWindow.data = data
    voteWindow.isVoted = false
    local screenWidth, screenHeight = System.screenSize()
    local videoWidth, videoHight, marginTop = Native:getVideoSize(0)
    voteWindow.portraitWidth = math.min(screenWidth, screenHeight) --宽
    voteWindow.portraitHeight = math.max(screenWidth, screenHeight) - videoHight - marginTop --高
    local dataTable = voteWindow.data.data
    if (dataTable == nil) then
        return
    end
    local voteListTable = dataTable.voteList
    if (voteListTable == nil) then
        voteWindow.totalVote = 1
        return
    end
end

function show(args)
    if (args == nil or args.data == nil or voteWindow.luaview ~= nil) then
        return
    end
    print("LuaView os vote window" .. Native:tableToJson(args))
    voteWindow.loadingCount = 0
    voteWindow.id = "os_vote_window" .. tostring(args.data.id)
    voteWindow.launchPlanId = args.data.launchPlanId
    voteWindow.request = HttpRequest()
    if (voteWindow.launchPlanId ~= nil) then
        osTrack(voteWindow.launchPlanId, 1, 1)
    end
    setConfig(args.data)
    onCreate(args.data)

    if args.data.data.voteCount == nil then
        voteWindow.totalVote = 1
        voteWindow.loadingCount = voteWindow.loadingCount + 1
        voteWindow.voteLoadingView:show()
        getVoteCountInfo()
    else
        local voteCount = args.data.data.voteCount
        voteWindow.voteCount = voteCount
        calculateVoteCount()
    end

    --用户已经登录，判定是否在vote热点页面取到用户投票数据
    if args.data.data ~= nil and args.data.data.userVote then
        local userVote = args.data.data.userVote
        if userVote.isVote == true then
            --用户已经投票，判定是否在vote热点页面取到票数
            voteWindow.section = userVote.vote
            if voteWindow.voteCount ~= nil then
                voteWindow.isVoted = true
                voteWindow.voteWindowScrollview:reload()
            else
                voteWindow.needShowVoteResult = true
            end
        else
            local showLinkUrl = getHotspotExposureTrackLink(args.data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (voteWindow.launchPlanId ~= nil) then
                osTrack(voteWindow.launchPlanId, 2, 1)
            end
        end
    else
        voteWindow.loadingCount = voteWindow.loadingCount + 1
        voteWindow.voteLoadingView:show()
        getUserVoteInfo()
    end
end

