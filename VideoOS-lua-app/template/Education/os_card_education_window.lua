--
-- Created by IntelliJ IDEA.
-- User: videojj_pls
-- Date: 2018/11/6
-- Time: 10:22 AM
-- To change this template use File | Settings | File Templates.
--
require "os_config"
require "os_string"
require "os_constant"
require "os_util"
require "os_track"
cardWindow = object:new()
local adTypeName = "cardWindow"
local scale = getScale()
local OS_ICON_WEDGE_CLOSE = "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAtCAYAAAA6GuKaAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAhOAAAITgBRZYxYAAAABxpRE9UAAAAAgAAAAAAAAAXAAAAKAAAABcAAAAWAAABJuDZqwUAAADySURBVGgFxNYxDsIwDAXQDiwwcR1uwB1ghpUj5Oh8S3yE2rTYju1GsiIlqf3Swe009ccFyw/Esb+dsnpA1hvi6sku4PaJJ+YKOMGsa4L/gpkgGz4Hs64K3gMzQRZ8Dcy6m/AtMBNEw/+BWbcL14CZIAquBbPuAi5dgpuaeRQu4Lux5gvnT4jvkO4gkGYIL9z6hsUk4DNiMSrgoWDeIBOeAs6Ep4Iz4CXgSHgpOAK+C3gU7unD3bZGiHX2dJWGItpY7cNW6Px8FjwNzAtEw9PB0fAycBS8HDwK3w0scOnD1rbW8Iz37xCPjg3Ph6OhJGMY/gYAAP//68uhBAAAANxJREFU7dZNDoIwEAVgEl2gK4/lCdh4ALceoUf3DfEloIjTdt6sbDIpJHTeF34ahqFuHHH5DVU66471J5R8RIELpFZyeDRYDleBZfAW8OP16InyzGGvSiv4ArR9ZAbxgHlNN7wHDOs8UuER4FR4JDgFrgBL4UqwBJ4BDofX/kvYPmzbWuto3VXGZeAVJ8VZvWDm1sInLDxwMWcPPArMTC98E8wme/BoMDN/wXfBbLIFV4GZ+Q3uArPJEq4GM/MdXgVmE4NngZlJeBOYTc48SJxHZH3sEon5/6jVHXgCCd+jGkmWfYoAAAAASUVORK5CYII="
local OS_ICON_CARD_IMAGE_BG = ""
local OS_ICON_CARD_NO_COLLECT = ""

local OS_CARD_LANDSCAPE_BG = "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5n+f8ijzP8/5FGociJKKj8z/AD/kUeZ/n/Io1DkRJRTd60b1o1DkQ6im71o3rRqHIh1FN3rRvWjUORDqKbvWjetHOw5EOopu9aN60c7F7NDqKbvWjetDkw9mh1FN3rRvWhyYezQ6im71o3rRzsPZodRTd60b1o52Hs0Oopu9aN61IezQ6im71o3rQHs0Oopu9aN60C9mOopu9aN60B7MdRTd606gPZn/1Py3oop3y+9f9fB+LjaKKd8vvQA2iinfL70ANooooAKKKKACiiigAop2xqbRcAop2xqXj+9SugGUUUUwCiinbGouA2iinbGouA2iinbGouA2iinbGouA2lzzmkp2xqLgNpc85pKKACiiigAop2xqbRcAoopRjvQAlFFKMd6AEoopRjvQAlFFKMd6AEoopRjvQAlLnnNJSjHelZAJS55zSUUWQBTt7U2iiyA//9X8t6Kbu+bbTq/6+D8fCim7vm206gAopu75ttOoAKKb/OnUAFFN/nSlgvWgBaKb/OlLBetAC0U3+dKWC9aAFopm4/d704sF60ALRTNx+73pxYL1oAWim/zpSwXrQKyFopv86dQLkQUU3+dOoDkQUUzcfu96fQHIgopm4/d70+gORBRTNx+73p9AciCijnFFAciFyR0pd7U2ilYORBRRRTDkQUUUUByIKXPOaTnFFAciClzzmk5xRQHIgpc85puecUtAciClzzmm55xS0C9mgp245zTM84paA9mgp245zTM84paA9mj/2Q=="

local OS_CARD_PORTRAIT_BG = ""

local OS_CARD_PORTRAIT_SHADOW = ""
local OS_CARD_LANDSCAPE_SHADOW = "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"

local OS_CARD_GRADIENT_COLOR_1 = 0x009EFF
local OS_CARD_GRADIENT_COLOR_2 = 0x009EFF
local OS_CARD_GRADIENT_COLOR_3 = 0x2E2D37

local adTypeName = "CardWindow"
local blurUrl = nil
cardWindow.userCardInfo = {}
cardWindow.requestIds = {}
local alphaTime = 1.0

local function translationAnim(x, y)
    local anim = Animation():translation(x, y):duration(0.3)
    return anim
end

local function startViewTranslationAnim(view, x, y, table)
    if (view == nil) then
        return
    end
    if table ~= nil then
        translationAnim(x, y):with(view):callback(table):start()
    else
        translationAnim(x, y):with(view):start()
    end
end

local function startShowAnimation(view, duration)
    if (view == nil) then
        return
    end
    print("Luaview startShowAnimation")
    view:alpha(0)
    local anim = Animation():alpha(1.0):duration(duration):with(view):start()
    return anim
end

local function getHotspotExposureTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.exposureTrackLink
end

local function getHotspotClickTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.clickTrackLink
end

local function closeView()
    for key, value in pairs(cardWindow.requestIds) do
        if (value ~= nil) then
            Native:abort(value)
        end
    end
    Native:widgetEvent(eventTypeClose, cardWindow.id, adTypeName, actionTypeNone, "")
    Native:destroyView()
end

local function setBlurImage(blurView, imageUrl)
    if (blurView == nil or imageUrl == nil) then
        return
    end
    -- blurUrl = imageUrl
    -- blurView:imageBlur(imageUrl, 8)
    local isPortrait = Native:isPortraitScreen()
    if isPortrait then
    	blurView:image(Data(OS_CARD_PORTRAIT_BG))
    else
    	blurView:image(Data(OS_CARD_LANDSCAPE_BG))
    end
end

local function checkCollectStatus()

    if cardWindow.collectStatus == 3 then
        return 3
    end

    local collectCount = 0
    if cardWindow.isHotOrder1 == true then
        collectCount = collectCount + 1;
    end
    if cardWindow.isHotOrder2 == true then
        collectCount = collectCount + 1;
    end
    if cardWindow.isHotOrder3 == true then
        collectCount = collectCount + 1;
    end
    cardWindow.collectCount = collectCount
    if collectCount == cardWindow.sumHotspot then
        return 2
    end
    return 1
end

local function postUserCardInfo()

    local businessInfoTable = {
        collectStatus = checkCollectStatus(),
        isHotOrder1 = cardWindow.isHotOrder1,
        isHotOrder2 = cardWindow.isHotOrder2,
        isHotOrder3 = cardWindow.isHotOrder3,
    }

    local businessParamTable = {
        userId = Native:getIdentity(),
        creativeId = cardWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    -- print("[LuaView] " .. OS_HTTP_POST_MOBILE_QUERY)
    -- print("[LuaView] " .. Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    local requestId = cardWindow.request:post(OS_HTTP_POST_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview postUserCardInfo")
        if (response == nil) then
            return
        end
        -- print("luaview postUserCardInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.launchInfoList
        if (dataTable == nil) then
            return
        end
    end, cardWindow.luaView)
    table.insert(cardWindow.requestIds, requestId)
end

local function getUserCardInfo()

    local businessInfo = {
        userId = Native:getIdentity(),
        creativeId = cardWindow.data.creativeId
    }

    local paramData = {
        businessParam = businessInfo,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    -- print("[LuaView] "..paramDataString)
    -- print("[LuaView] "..OS_HTTP_GET_MOBILE_QUERY)
    -- print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    local requestId = cardWindow.request:post(OS_HTTP_GET_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        -- print("luaview getUserVoteInfo")
        if (response == nil) then
            return
        end
        -- print("luaview getUserVoteInfo 11"..Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.businessInfo
        if (dataTable == nil) then
            postUserCardInfo()
            return
        end
        cardWindow.data.data.userCardInfo = dataTable
    end, cardWindow.luaView)
    table.insert(cardWindow.requestIds, requestId)
end

local function setLuaViewSize(luaview, isPortrait) --设置当前容器大小
    if (luaview == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        luaview:frame(0, 0, math.min(screenWidth, screenHeight), math.max(screenWidth, screenHeight))
    else
        luaview:frame(0, 0, math.max(screenWidth, screenHeight), math.min(screenWidth, screenHeight))
        if (System.android()) then
            luaview:align(Align.RIGHT)
        end
    end
end

local function setCardViewSize(data, cardWindowView, isPortrait) --设置当前容器大小
    if (data == nil or cardWindowView == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if (System.android()) then
            cardWindowView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight)
            cardWindowView:align(Align.BOTTOM)
        else
            cardWindowView:frame(0, math.max(screenWidth, screenHeight) - cardWindow.portraitHeight, cardWindow.portraitWidth, cardWindow.portraitHeight)
        end
    else
        if (System.android()) then
            cardWindowView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
            cardWindowView:align(Align.RIGHT)
        else
            cardWindowView:frame(math.max(screenWidth, screenHeight) - 200 * scale, 0, 200 * scale, math.min(screenWidth, screenHeight))
        end
    end
end

local function setCardTopContentViewSize(data, cardWindowTopContentView, isPortrait) --设置当前容器大小
    if (data == nil or cardWindowTopContentView == nil) then
        return
    end
    if (isPortrait) then
        cardWindowTopContentView:backgroundColor(0xEAEAEA, 1)
        cardWindowTopContentView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.877)
    else
        cardWindowTopContentView:backgroundColor(0x000000, 0)
        cardWindowTopContentView:frame(0, 0, 200 * scale, 336.8 * scale)
        cardWindowTopContentView:align(Align.RIGHT)
    end
end

local function setCardBlurViewViewSize(data, cardBlurView, isPortrait) --设置当前容器大小
    if (data == nil or cardBlurView == nil) then
        return
    end
    if (isPortrait) then
        cardBlurView:image(Data(OS_CARD_PORTRAIT_BG))
        cardBlurView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 1.0)
    else
    	cardBlurView:image(Data(OS_CARD_LANDSCAPE_BG))
        cardBlurView:frame(0, 0, 200 * scale, 336.8 * scale)
    end
end

local function setCardImageLayoutSize(data, index, cardImageLayout, cardImage, cardBgView, isPortrait)
    if (data == nil or cardImageLayout == nil or cardImage == nil or cardBgView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.sumHotspot == 2) then
            w = cardWindow.portraitWidth * 0.276
            --            h = cardWindow.portraitHeight * 0.317
            h = w / 0.743
            y = cardWindow.portraitHeight * 0.086
            if (index == 1) then
                x = cardWindow.portraitWidth * 0.205
            else
                x = cardWindow.portraitWidth * 0.520
            end
        else
            w = cardWindow.portraitWidth * 0.276
            --            h = cardWindow.portraitHeight * 0.317
            h = w / 0.743
            y = cardWindow.portraitHeight * 0.086
            if (index == 1) then
                x = cardWindow.portraitWidth * 0.057
            elseif index == 2 then
                x = cardWindow.portraitWidth * 0.363
            else
                x = cardWindow.portraitWidth * 0.667
            end
        end
    else
        if (cardWindow.sumHotspot == 2) then
            w = 78.2 * scale
            h = 105.2 * scale
            y = 42 * scale
            if (index == 1) then
                x = 17.6 * scale
            elseif (index == 2) then
                x = 105.6 * scale
            end
        else
            w = 85.2 * scale
            h = 114.4 * scale
            y = 29 * scale
            if (index == 1) then
                x = 14.9 * scale
                y = 39 * scale
            elseif index == 2 then
                x = 57.5 * scale
                y = 29 * scale
            else
                x = 100.1 * scale
                y = 39 * scale
            end
        end
    end

    cardImageLayout:frame(x, y, w, h)
    cardImage:frame(scale, scale, w - 2 * scale, h - 2 * scale)
    cardBgView:frame(0, 0, w, h)
    --    cardImage:cornerRadius(5 * scale)
end

local function setCardBottomViewSize(data, cardBottomView, cardFlexView, cardFlexLabel, isPortrait) --设置当前容器大小
    if (data == nil or cardBottomView == nil or cardFlexView == nil or cardFlexLabel == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    local corner = 0
    if (isPortrait) then
        cardBottomView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
        cardBottomView:align(Align.BOTTOM)
        cardFlexView:frame(0, 0, cardWindow.hotspotRatio * cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
        corner = cardWindow.portraitHeight * 0.123 / 2
        cardFlexLabel:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
    else
        cardBottomView:frame(0, 0, 200 * scale, 38.3 * scale)
        cardBottomView:align(Align.BOTTOM)
        cardFlexView:frame(0, 0, cardWindow.hotspotRatio * 200 * scale, 38.3 * scale)
        cardFlexLabel:frame(0, 0, 200 * scale, 38.3 * scale)
        corner = 19.15 * scale
    end

    cardFlexView:corner(0, 0, corner, corner, corner, corner, 0, 0)
end

local function setCardTitleViewSize(data, cardTitleView, isPortrait)
    if (data == nil or cardTitleView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.collectStatus == 3) then
            x = cardWindow.portraitWidth * 0.227
            y = cardWindow.portraitHeight * 0.643
            w = cardWindow.portraitWidth * 0.567
            h = cardWindow.portraitHeight * 0.136
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(15)
        else
            x = cardWindow.portraitWidth * 0.227
            w = cardWindow.portraitWidth * 0.567
            if (System.android()) then
                y = cardWindow.portraitHeight * 0.423
                h = cardWindow.portraitHeight * 0.136
            else
                y = cardWindow.portraitHeight * 0.408
                h = cardWindow.portraitHeight * 0.090
            end
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(15)
        end
    else
        if (cardWindow.collectStatus == 3) then
            x = 13.9 * scale
            y = 200.5 * scale
            w = 171 * scale
            h = 40 * scale
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(13)
        else
            x = 13.9 * scale
            y = 173.5 * scale
            w = 171 * scale
            h = 40 * scale
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(13)
        end
    end
    --    if (System.android()) then
    --        cardTitleView:margin(x, y, x, 0)
    --    else
    --        cardTitleView:frame(x, y, w, h)
    --    end
    cardTitleView:frame(x, y, w, h)
end

local function setCardContentImageView(data, cardContentImageView, cardContentImageShadowView, isPortrait)
    if (data == nil or cardContentImageView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.collectStatus == 3) then
            x = cardWindow.portraitWidth * 0.120
            y = cardWindow.portraitHeight * 0.207
            w = cardWindow.portraitWidth * 0.763
            h = w * 80.0 / 165.0 --cardWindow.portraitHeight * 0.316
        else
            x = cardWindow.portraitWidth * 0.187
            y = cardWindow.portraitHeight * 0.558
            w = cardWindow.portraitWidth * 0.628
            h = w * 80.0 / 165.0 --cardWindow.portraitHeight * 0.260
        end
        cardContentImageShadowView:image(Data(OS_CARD_PORTRAIT_SHADOW))
        cardContentImageShadowView:frame((cardWindow.portraitWidth - 348 * scale) * 0.5, y + h - 8 * scale, 348 * scale, 16 * scale)
    else
        if (cardWindow.collectStatus == 3) then
            x = 17.7 * scale
            y = 96.5 * scale
            w = 165 * scale
            h = 80 * scale
        else
            x = 17.7 * scale
            y = 225.5 * scale
            w = 165 * scale
            h = 80 * scale
        end
        cardContentImageShadowView:image(Data(OS_CARD_LANDSCAPE_SHADOW))
        cardContentImageShadowView:frame(0 * scale, y + h - 6 * scale, 200 * scale, 12 * scale)
    end
    cardContentImageView:frame(x, y, w, h)
end

local function setCardCloseImageView(data, cardCloseLayout, cardCloseImageView, isPortrait)
    if (data == nil or cardCloseLayout == nil or cardCloseImageView == nil) then
        return
    end
    --    local x, y, w, h = 0, 0, 0, 0
    local size = cardWindow.portraitHeight * 0.083
    if (isPortrait) then
        --        x = 350 * scale
        --        y = 8 * scale
        --        w = 15 * scale
        --        h = 15 * scale
        cardCloseLayout:frame(0, 0, size, size)
        cardCloseImageView:frame(0, 0, 15 * scale, 15 * scale)
        cardCloseImageView:show()
        cardCloseLayout:align(Align.RIGHT)
        cardCloseImageView:align(Align.CENTER)
    else
        cardCloseImageView:hide()
    end
end

--屏幕旋转--
local function rotationScreen(isPortrait)
    setLuaViewSize(cardWindow.luaView, isPortrait)
    setCardViewSize(cardWindow.data, cardWindow.cardWindowView, isPortrait)
    setCardTopContentViewSize(cardWindow.data, cardWindow.cardWindowTopContentView, isPortrait)
    setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
    setCardBottomViewSize(cardWindow.data, cardWindow.cardBottomView, cardWindow.cardFlexView, cardWindow.cardFlexLabel, isPortrait)
    setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
    if (cardWindow.collectStatus ~= 3) then
        if (cardWindow.cardImageLayout3 ~= nil) then
            cardWindow.cardImageLayout1:rotation(0)
            cardWindow.cardImageLayout3:rotation(0)
        end
        setCardImageLayoutSize(cardWindow.data, 1, cardWindow.cardImageLayout1, cardWindow.cardImageView1, cardWindow.cardBgView1, isPortrait)
        setCardImageLayoutSize(cardWindow.data, 2, cardWindow.cardImageLayout2, cardWindow.cardImageView2, cardWindow.cardBgView2, isPortrait)
        setCardImageLayoutSize(cardWindow.data, 3, cardWindow.cardImageLayout3, cardWindow.cardImageView3, cardWindow.cardBgView3, isPortrait)
        if (isPortrait == false and cardWindow.cardImageLayout3 ~= nil and cardWindow.sumHotspot >= 3) then
            cardWindow.cardImageLayout1:rotation(-10)
            cardWindow.cardImageLayout3:rotation(10)
        end
    end
    setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
    setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
end

local function registerMedia()
    local media = Media()
    -- body
    -- 注册window callback通知
    local callbackTable = {
        --0: 竖屏小屏幕，1 竖屏全凭，2 横屏全屏
        onPlayerSize = function(type)
            if (type == 0) then
                rotationScreen(true)
            elseif (type == 1) then
                rotationScreen(true)
            elseif (type == 2) then
                rotationScreen(false)
            end
        end
    }
    media:mediaCallback(callbackTable)
    return media
end

local function registerWindow()
    local nativeWindow = nil
    if System.ios() then
        nativeWindow = NativeWindow()
    else
        nativeWindow = nativeWindow
    end
    local callbackTable = {
        onShow = function()
            if (System.android()) then
                setBlurImage(cardWindow.cardBlurImageView, blurUrl)
            end
        end
    }
    if (nativeWindow == nil and System.android()) then
        nativeWindow = window
    end
    if (nativeWindow == nil) then
        return
    end
    nativeWindow:callback(callbackTable)
    return nativeWindow
end

--全局父控件
local function createLuaView(isPortrait)
    local luaView
    -- if System.android() then
    --     luaView = View()
    -- else
    --     luaView = ThroughView()
    -- end
    luaView = View()
    setLuaViewSize(luaView, isPortrait)
    return luaView
end

local function createCardView(data, isPortrait)
    local cardWindowView = View()

    setCardViewSize(data, cardWindowView, isPortrait)

    return cardWindowView
end

local function createCardTopContentView(data, isPortrait)
    local cardWindowTopContentView = View()
    setCardTopContentViewSize(data, cardWindowTopContentView, isPortrait)
    return cardWindowTopContentView
end

local function createCardBlurView(data, isPortrait)
    local cardBlurImageView = Image(Native)
    cardBlurImageView:scaleType(ScaleType.FIT_XY)
    setCardBlurViewViewSize(data, cardBlurImageView, isPortrait)
    return cardBlurImageView
end

--创建单个--
local function createCardImageItem()
    local cardImageLayout = View()
    local cardImageView = Image(Native)
    cardImageView:scaleType(ScaleType.FIT_XY)
    local cardBgView = Image(Native)
    cardBgView:image(Data(OS_ICON_CARD_IMAGE_BG))
    cardBgView:scaleType(ScaleType.FIT_XY)
    cardImageLayout:addView(cardImageView)
    cardImageLayout:addView(cardBgView)
    return cardImageLayout, cardImageView, cardBgView
end

local function createCardGroupView(data, isPortrait)
    local cardImageLayout1, cardImageView1, cardBgView1 = createCardImageItem()
    local cardImageLayout2, cardImageView2, cardBgView2 = createCardImageItem()
    local cardImageLayout3, cardImageView3, cardBgView3
    if (cardWindow.sumHotspot == 3) then
        cardImageLayout3, cardImageView3, cardBgView3 = createCardImageItem()
    end
    setCardImageLayoutSize(data, 1, cardImageLayout1, cardImageView1, cardBgView1, isPortrait)
    setCardImageLayoutSize(data, 2, cardImageLayout2, cardImageView2, cardBgView2, isPortrait)
    setCardImageLayoutSize(data, 3, cardImageLayout3, cardImageView3, cardBgView3, isPortrait)
    return cardImageLayout1, cardImageView1, cardBgView1, cardImageLayout2, cardImageView2, cardBgView2, cardImageLayout3, cardImageView3, cardBgView3
end

local function createCardBottomView(data, isPortrait)
    local cardBottomView = GradientView()
    cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_3, OS_CARD_GRADIENT_COLOR_3)

    local cardFlexView = GradientView()
    if System.ios() then
	    cardFlexView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, 0.0, 0.5, 1.0, 0.5)
	else
		cardFlexView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, Orientation.LEFT_RIGHT)
	end

    local text = "运气真好，还差" .. tostring(cardWindow.sumHotspot - cardWindow.collectCount) .. "张就成功啦"
    local cardFlexLabel = Label(Native)
    cardFlexLabel:text(text)
    cardFlexLabel:textColor(0xFFFFFF)
    cardFlexLabel:textAlign(TextAlign.CENTER)

    setCardBottomViewSize(data, cardBottomView, cardFlexView, cardFlexLabel, isPortrait)

    return cardBottomView, cardFlexView, cardFlexLabel
end

local function createCardCloseImageView(data, isPortrait)
    local cardCloseLayout = View()
    cardCloseLayout:align(Align.RIGHT)
    local cardCloseImageView = Image(Native)
    cardCloseImageView:align(Align.CENTER)
    cardCloseImageView:scaleType(ScaleType.FIT_XY)
    cardCloseImageView:image(Data(OS_ICON_WEDGE_CLOSE))
    cardCloseImageView:hide()
    setCardCloseImageView(data, cardCloseLayout, cardCloseImageView, isPortrait)
    cardCloseLayout:addView(cardCloseImageView)
    return cardCloseLayout, cardCloseImageView
end

local function createTitleView(data, isPortrait)
    local cardTitleLabel = Label(Native)
    cardTitleLabel:textAlign(TextAlign.CENTER)
    cardTitleLabel:lines(2)
    cardTitleLabel:text("")
    setCardTitleViewSize(data, cardTitleLabel, isPortrait)
    return cardTitleLabel
end

local function createCardContentImageView(data, isPortrait)
    local cardContentImageView = Image(Native)
    cardContentImageView:scaleType(ScaleType.CENTER_CROP)

    local cardContentImageShadowView = Image(Native)
    cardContentImageShadowView:scaleType(ScaleType.CENTER_CROP)
    setCardContentImageView(data, cardContentImageView, cardContentImageShadowView, isPortrait)
    return cardContentImageView, cardContentImageShadowView
end

--未收集成功 默认无需处理
local function notCollectState(data)
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local collectTable = dataTable.collect
    if (collectTable == nil) then
        return
    end
    -- print("LuaView notCollectState "..Native:tableToJson(dataTable))
    local contentImageUrl = collectTable.imageUrl
    if (contentImageUrl ~= nil) then
        cardWindow.cardContentImageView:image(contentImageUrl)
    end
    local content = collectTable.content
    if content ~= nil then
        cardWindow.cardTitleLabel:text(content)
    else
        cardWindow.cardTitleLabel:text("")
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil) then
        return
    end
    -- print("LuaView hotspotArrayTable "..Native:tableToJson(hotspotArrayTable))
    if (cardWindow.isHotOrder1) then
        local HotOrderTable = hotspotArrayTable[1]
        if (HotOrderTable == nil or cardWindow.cardImageView1 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 1) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView1, alphaTime)
            end
            cardWindow.cardImageView1:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView1 ~= nil) then
            cardWindow.cardImageView1:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView1:hide()
        end
    end

    if (cardWindow.isHotOrder2) then
        local HotOrderTable = hotspotArrayTable[2]
        if (HotOrderTable == nil or cardWindow.cardImageView2 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 2) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView2, alphaTime)
            end
            cardWindow.cardImageView2:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView2 ~= nil) then
            cardWindow.cardImageView2:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView2:hide()
        end
    end

    if (cardWindow.isHotOrder3) then
        local HotOrderTable = hotspotArrayTable[3]
        if (HotOrderTable == nil or cardWindow.cardImageView3 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 3) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView3, alphaTime)
            end
            cardWindow.cardImageView3:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView3 ~= nil) then
            cardWindow.cardImageView3:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView3:hide()
        end
    end
end

--收集成功 未领取
local function collectState(data)
	if System.ios() then
	    cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, 0.0, 0.5, 1.0, 0.5)
	else
		cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, Orientation.LEFT_RIGHT)
	end
    cardWindow.cardFlexView:hide()
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local collectTable = dataTable.collect
    if (collectTable == nil) then
        return
    end
    local btnTitle = collectTable.btnTitle
    if (btnTitle ~= nil) then
        cardWindow.cardFlexLabel:text(btnTitle)
    end
    local content = collectTable.content
    if content ~= nil then
        cardWindow.cardTitleLabel:text(content)
    else
        cardWindow.cardTitleLabel:text("")
    end

    local imageUrl = collectTable.imageUrl
    if (imageUrl ~= nil) then
        cardWindow.cardContentImageView:image(imageUrl)
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil) then
        return
    end
    if (cardWindow.isHotOrder1) then
        local HotOrderTable = hotspotArrayTable[1]
        if (HotOrderTable == nil or cardWindow.cardImageView1 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView1:image(imageUrl)
            if (cardWindow.hotspotOrder == 1) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView1, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView1 ~= nil) then
            cardWindow.cardImageView1:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView1:hide()
        end
    end

    if (cardWindow.isHotOrder2) then
        local HotOrderTable = hotspotArrayTable[2]
        if (HotOrderTable == nil or cardWindow.cardImageView2 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView2:image(imageUrl)
            if (cardWindow.hotspotOrder == 2) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView2, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView2 ~= nil) then
            cardWindow.cardImageView2:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView2:hide()
        end
    end

    if (cardWindow.isHotOrder3) then
        local HotOrderTable = hotspotArrayTable[3]
        if (HotOrderTable == nil or cardWindow.cardImageView3 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView3:image(imageUrl)
            if (cardWindow.hotspotOrder == 3) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView3, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView3 ~= nil) then
            cardWindow.cardImageView3:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView3:hide()
        end
    end

    --点击lua文件
    cardWindow.cardBottomView:onClick(function()
        --TODO领奖操作逻辑处理
        cardWindow.collectStatus = 3
        postUserCardInfo()
        local clickLinkUrl = getHotspotClickTrackLink(data, 1)
        if (clickLinkUrl ~= nil) then
            Native:get(clickLinkUrl)
        end
        if (cardWindow.launchPlanId ~= nil) then
            osTrack(cardWindow.launchPlanId, 3, 1)
        end
        if collectTable.linkType == 2 then
            Native:widgetEvent(eventTypeClick, cardWindow.id, adTypeName, actionTypeOpenUrl, collectTable.linkUrl)
            performWithDelay(function()
                closeView()
            end, 500)
            return
        end

        cardWindow.cardFlexLabel:text("确定")
        cardWindow.cardWindowTopContentView:removeAllViews()
        local isPortrait = Native:isPortraitScreen()
        setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
        setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
        setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
        setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseImageView)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)

        local successTable = dataTable.success
        if (successTable == nil) then
            return
        end

        cardWindow.cardBottomView:onClick(function()
            Native:widgetEvent(eventTypeClick, cardWindow.id, adTypeName, actionTypeGetItem, successTable.itemId)
            closeView()
        end)

        local title = successTable.title
        if (title ~= nil) then
            cardWindow.cardTitleLabel:text(title)
        end

        local imageUrl = successTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardContentImageView:image(imageUrl)
        end
    end)
end

local function successState(data)
	if System.ios() then
	    cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, 0.0, 0.5, 1.0, 0.5)
	else
		cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, Orientation.LEFT_RIGHT)
	end
    cardWindow.cardFlexView:hide()
    cardWindow.cardFlexLabel:text("确定") --写死？？？

    cardWindow.cardWindowTopContentView:removeAllViews()
    local isPortrait = Native:isPortraitScreen()
    setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
    setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
    setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
    setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseImageView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)
    cardWindow.cardTitleLabel:text("您已经领取过这套卡牌奖励哦") --写死？？？
    cardWindow.cardBottomView:onClick(function()
        closeView()
    end)
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local successTable = dataTable.success
    if (successTable == nil) then
        return
    end

    local successImageUrl = successTable.imageUrl
    if (successImageUrl ~= nil) then
        cardWindow.cardContentImageView:image(successImageUrl)
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil or cardWindow.hotspotOrder == nil) then
        return
    end
    local hotspotItemTable = hotspotArrayTable[cardWindow.hotspotOrder]
    if (hotspotItemTable == nil) then
        return
    end
    local imageUrl = hotspotItemTable.imageUrl
    if (imageUrl ~= nil) then
        setBlurImage(cardWindow.cardBlurImageView, imageUrl)
    end
end

local function onCreate(data)
    if (cardWindow.launchPlanId ~= nil) then
        osTrack(cardWindow.launchPlanId, 1, 1)
    end

    local isPortrait = Native:isPortraitScreen()
    cardWindow.media = registerMedia()
    cardWindow.window = registerWindow()
    cardWindow.luaView = createLuaView(isPortrait)

    cardWindow.cardWindowView = createCardView(data, isPortrait)
    cardWindow.cardWindowTopContentView = createCardTopContentView(data, isPortrait)
    cardWindow.cardBlurImageView = createCardBlurView(data, isPortrait)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)

    cardWindow.cardCloseLayout, cardWindow.cardCloseImageView = createCardCloseImageView(data, isPortrait)
    cardWindow.cardBottomView, cardWindow.cardFlexView, cardWindow.cardFlexLabel = createCardBottomView(data, isPortrait)

    -- 首先判断状态
    if (cardWindow.collectStatus ~= 3) then
        cardWindow.cardImageLayout1, cardWindow.cardImageView1, cardWindow.cardBgView1, cardWindow.cardImageLayout2, cardWindow.cardImageView2, cardWindow.cardBgView2, cardWindow.cardImageLayout3, cardWindow.cardImageView3, cardWindow.cardBgView3 = createCardGroupView(data, isPortrait)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout1)
        if (cardWindow.sumHotspot == 3) then
            cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout3)
        end
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout2)
        if (isPortrait == false and cardWindow.sumHotspot >= 3) then
            cardWindow.cardImageLayout1:rotation(-10)
            cardWindow.cardImageLayout3:rotation(10)
        end
    end


    cardWindow.cardTitleLabel = createTitleView(data, isPortrait)
    cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView = createCardContentImageView(data, isPortrait)

    cardWindow.cardBottomView:addView(cardWindow.cardFlexView)
    cardWindow.cardBottomView:addView(cardWindow.cardFlexLabel)

    cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseLayout)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageShadowView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)

    cardWindow.cardWindowView:addView(cardWindow.cardWindowTopContentView)

    cardWindow.cardWindowView:addView(cardWindow.cardBottomView)

    cardWindow.luaView:addView(cardWindow.cardWindowView)

    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if System.ios() then
            cardWindow.cardWindowView:y(math.max(screenWidth, screenHeight))
            startViewTranslationAnim(cardWindow.cardWindowView, 0, -cardWindow.portraitHeight)
        else
            cardWindow.cardWindowView:translation(0, 438 * scale)
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 0)
        end

    else
        if System.ios() then
            cardWindow.cardWindowView:x(math.max(screenWidth, screenHeight))
            startViewTranslationAnim(cardWindow.cardWindowView, -200 * scale, 0)
        else
            cardWindow.cardWindowView:translation(200 * scale, 0)
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 0)
        end
    end

    cardWindow.cardWindowView:onClick(function()
    end)

    cardWindow.cardCloseLayout:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 438 * scale, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)

    cardWindow.luaView:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 438 * scale, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        else
            startViewTranslationAnim(cardWindow.cardWindowView, 200 * scale, 0, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)
    --- -逻辑处理----
    ------ 状态判断--------
    if (cardWindow.collectStatus == 1) then
        notCollectState(data)
    elseif (cardWindow.collectStatus == 2) then
        collectState(data)
    else
        successState(data)
    end
    Native:widgetEvent(eventTypeShow, cardWindow.id, adTypeName, actionTypeNone, "")
end

local function setConfig(data)
    if (data == nil) then
        return
    end
    cardWindow.data = data
    local sumHotspot = data.sumHotspot
    if (sumHotspot == nil) then
        sumHotspot = 2
    end
    local hotspotOrder = data.hotspotOrder
    if (hotspotOrder == nil) then
        hotspotOrder = 0
    end
    local screenWidth, screenHeight = System.screenSize()
    local videoWidth, videoHight, marginTop = Native:getVideoSize(0)
    cardWindow.portraitWidth = math.min(screenWidth, screenHeight) --宽
    cardWindow.portraitHeight = math.max(screenWidth, screenHeight) - videoHight - marginTop --高
    cardWindow.sumHotspot = sumHotspot
    cardWindow.hotspotOrder = hotspotOrder + 1 --当前热点序号
    cardWindow.hotspotRatio = 0.333 --收集占半分比
    cardWindow.collectStatus = 1
    cardWindow.collectCount = 1
    cardWindow.id = "os_card_window" .. tostring(data.id) .. tostring(data.hotspotOrder)
    cardWindow.launchPlanId = data.launchPlanId
    cardWindow.isHotOrder1 = false
    cardWindow.isHotOrder2 = false
    cardWindow.isHotOrder3 = false
    if data.data.userCardInfo ~= nil then
        -- print("LuaView os card window userCardInfo "..Native:tableToJson(data.data.userCardInfo))
        cardWindow.userCardInfo = data.data.userCardInfo
        if cardWindow.hotspotOrder == 1 then
            cardWindow.userCardInfo.isHotOrder1 = true
        elseif cardWindow.hotspotOrder == 2 then
            cardWindow.userCardInfo.isHotOrder2 = true
        elseif cardWindow.hotspotOrder == 3 then
            cardWindow.userCardInfo.isHotOrder3 = true
        end

        cardWindow.collectStatus = cardWindow.userCardInfo.collectStatus
        cardWindow.isHotOrder1 = cardWindow.userCardInfo.isHotOrder1
        cardWindow.isHotOrder2 = cardWindow.userCardInfo.isHotOrder2 --是否收集状态
        cardWindow.isHotOrder3 = cardWindow.userCardInfo.isHotOrder3
        cardWindow.collectStatus = checkCollectStatus()
        if cardWindow.userCardInfo.collectStatus == 1 then
            postUserCardInfo()
        end
        if (cardWindow.collectStatus == 2) then
            local showLinkUrl = getHotspotExposureTrackLink(data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (cardWindow.launchPlanId ~= nil) then
                osTrack(cardWindow.launchPlanId, 2, 1)
            end
        end
    else
        if cardWindow.hotspotOrder == 1 then
            cardWindow.isHotOrder1 = true
        elseif cardWindow.hotspotOrder == 2 then
            cardWindow.isHotOrder2 = true
        elseif cardWindow.hotspotOrder == 3 then
            cardWindow.isHotOrder3 = true
        end
        postUserCardInfo()
    end
    if (cardWindow.sumHotspot == 2) then
        if cardWindow.collectCount < 2 then
            cardWindow.hotspotRatio = cardWindow.collectCount / 2.0
        end
    elseif (cardWindow.sumHotspot == 3) then
        if cardWindow.collectCount < 3 then
            cardWindow.hotspotRatio = cardWindow.collectCount / 3.0
        end
    end
    -- cardWindow.collectStatus = 3 --1.收集未成功 2.收集成功 3.领取成功
    -- if (cardWindow.collectStatus == 1) then
    -- cardWindow.isHotOrder1 = false
    -- cardWindow.isHotOrder2 = true --是否收集状态
    -- cardWindow.isHotOrder3 = false
    -- else
    --     cardWindow.isHotOrder1 = true
    --     cardWindow.isHotOrder2 = true --是否收集状态
    --     cardWindow.isHotOrder3 = true
    -- end
end

function show(args)
    if (args == nil or args.data == nil or cardWindow.luaView ~= nil) then
        return
    end
    cardWindow.request = HttpRequest()
    setConfig(args.data)

    onCreate(args.data)
    -- postUserCardInfo()
end

