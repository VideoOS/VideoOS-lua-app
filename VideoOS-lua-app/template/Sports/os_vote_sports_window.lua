--
-- Created by IntelliJ IDEA.
-- User: videojj_pls
-- Date: 2018/10/29
-- Time: 2:36 PM
-- To change this template use File | Settings | File Templates.
--
require "os_config"
require "os_string"
require "os_constant"
require "os_util"
require "os_track"
voteWindow = object:new()
local adTypeName = "voteWindow"
local scale = getScale()
local OS_ICON_WEDGE_CLOSE = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAAXNSR0IArs4c6QAAABxpRE9UAAAAAgAAAAAAAAAOAAAAKAAAAA4AAAAOAAAA0xIBqR4AAACfSURBVEgNpNNBCoAwDATAIoKP8u4HvHrrR/x53VgXqqSSJkJoacOOYEypeUopK+pAzc2xa4uMCbWjNjUAF4KdT4VQZBBj3hv9YGxyoQrGvIp2MDYNoT8Y87aEJgnlgbaaUAMm2VnAGRVCrRj6lnuAIugwxpH1oG7Mg4YxByo/tTZkPMu4r9+M4b0VjZZBYrC22jG+RAAdxwKoH3OgJuwCAAD//66JOlQAAACZSURBVKXTywqAIBAFUJHAP2sttG3Xj/TndicY0NDmFQxBXub4KiXhaa1l1IG6hToxvgnt/ofRQIvxZPyoA/OjAcyOKrELOdo+BmZveXsNWEF2C6EWjK+aG/VgbjSCuVCA0k9NF6Rw89UbGdWZJgR31OyW0TcVxpNQoPXNLlATpkArnMy570pdGDebrHTEuiBtbwjrevGZDtgDb6tF9uwpXPUAAAAASUVORK5CYII="

local OS_ICON_PRELOAD = "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"
local OS_NO_LOGIN_INFO = "您还未登录,请先登录"

local OS_VOTE_LANDSCAPE_CELL = "iVBORw0KGgoAAAANSUhEUgAAAWoAAABiCAYAAAB5/Jk6AAAAAXNSR0IArs4c6QAAABxpRE9UAAAAAgAAAAAAAAAxAAAAKAAAADEAAAAxAAAKEbANWg4AAAndSURBVHgB7J0NdFPlGcfViW6KmyATaSsqJGlKW1vLChRRbAH5EKWMwUCZnU7WAtrBpmwwp8Wvku9+pt+2YKF8KWJFRaBHEHPvTdI2bWlLKVCQlYLtdAruANvMntfZnp6cutPlvmmS5s8573mTtPdy7/P839/73Od5AlddhT+wACwAC8ACsAAsAAvAArAALAALwAKwACwAC8ACsAAsAAvAArCA+xZIczqviaw3D1MLpjtVkiFKadXfrxB0DytE3VKFqFmhsujWqgTdBqWgzVNatFto3qMQNMKYfS995v7fiiNhAVgAFggQC4y3FwxR2fUjFHbt2DBBGxMqauJVkiZRJeiTlIIulaD6PMFVR2AtpLFNYdF8oCTI0miiz9vp51foM6c7Y+xHrzgDxMy4TVgAFghUC8RZjD+KEDNGqiWDSmXVx1LUOl0pahcoRO2TCkG7WiVo0lSC1khALSGg7qSxj15bCbgtNM4pLNp/uQNYXseMPfQaQB2o4sV9wwK+bgGWKghvzB2qshiDlYIpTCEaJqkl/cxQQbeIYLuMYPssQfVlGlkUuZYRUHcReKtoVBNoj9PnnfT6G17A9Np5DqcD1L4uVlwfLOCvFqB0wU/C7Zmj1RZjZKigvVclaucoJe0SgmoKRap/pLzsawTcXAJqOY13lBbNQfqZg0YbQfFzr4HRzRSFx673Ew1A7a+LANcNC3jKAgud238QbjEOD5V0dymt2miKVKd2F70ItispTbCOwKqhiDafoFpB0H2PItfDFMU20/wpvf/aY9DyNYgO0PXI8rXT6RxB46cYsAE04BsaqPm6M0h/1qJe3VI54bHGimnzGjbOf7C2OOmB6oKn4+zmtbH27PQYa2ZulDXjjUjRtDtcNFSFiXq7WtS1UEqhg2B7CZB1r+jnSbu5DWpamNfSGIsBG0ADfDTQeKFj3KZz9okvn94/PbWlcn5S047HFxwpXznHUfqn6bVFr0ytycucXJ3z+gRb1o4Ya8YHUVLGJxGisT5MNLSFirpOSh3805OwwLm9B3A5oL4BC5TPAoUd/d+OlotnIgvbrZNfaNs385nWt3+R1Lj1iQUNm1Ifqnv9zwk1Ben3V+fnTLLnlP3MlvVmtDXjw0jJKFA0eyRM0J2m/O3nlC74N0DoPRD6uu3lgPpmAMb/ARPoPvzSeUn54RfHonPPilPWHd87O+XorkWPNlX8JrFu06qZjpK/xNcWaO+zm/Mm2XLfIMi+fY+UcSBSMlkJss1qQf9XKoZ9OSg6CwYo1+rrQPTV65MDapabRuoDNvCaBjqdl1S7OpvH6858/MBzJ/bMfap555JHGzf/NrGh7A+zakvS4msKDVOq8won2nIqxlszK6Otpo8iRIOdcrItlJM9S98Eu+CrCxPXhei6twbkgDoEoMZG5a4Gjl3uCtvaVRubfupAwurWd+Y9eXTHY4saylPm1pU+N8NR9BKlCkxx9tziCfasbZSPfS9KMh2KkIy14wT9cSp6nUfRCyDrDbLB/loOqO9yd5HiOP8GvONCR3jpuepJ60/vn/HMsd0/f7x5W1J30WtGbdGrU2vysybbc0tjbdk7Y2yZe++WTJaeopeg66KWrsuDfWHh/rCR8NSAW6Am0KLjw09THocunrw7r912b1rb/llPt+5euJSKXvN7Fb2mVJtzJtqzN463Zr8Vbc3cR5AVKR/b2FP08vLXaXmKH+fqJ0yp0El901fYUwzN/6A+6os0vqLxd1YIpSecLhqfUTqpg+Z2ms8wvbBulHGi4cQ4Ud9KcwvL67MCaoRkaKDhiJQMNSwVxXL+TGdsQ4+ymg7TfJClqVg9gGkwWsrcSy2F798jZe5hKSyqFexm+oylwizrgKGAYCtLb1GxtpzmTXFUtGXdMZPt5iKW+qKRTyOXFXRZ5wx7WmNpsYTqQh3VIDTTHUXpLMBgT3IzHcXrabwwy1H8/EN1petYx83c+rI18+rKnn2kfuPvExs2/o4ViVlgsrBh8/LFjeUpi49ULGN1DVZAZkHLE0e3LV1GT4jLWt5azGoebJ2xgGbV8crENa3vPsLSdKwewtZg2skDD64/tT8+pDS1Lqh4pfPbUURz0QpnUOEKZ3DxyhPB5anT3AU1Oj4GGNTdRa+ss4fvW3vi/TnJLW/+cknTlqfm1ZetZsLqKXqRWJmQo6WMKuossIVL+qNqWjz/LXr5YGfB/4SA7m9yIEAAkAmB7O1yIJBQU7hBDgSWNG5JlgMB9sTz6umqabpTBxOMZw5NZdphm3TJeSluc4djwtauI7Esx8+KqVVfnIyyXfg0grUI4ol3YJ94Pz5/bExQXvKVUeZkZ8/IS/4myJycFVSQdoNbkGYHkSPR8cEJ1G2Xv1JXdjbFsEXEdli28/66afuv2E7NimKs84AteIoCMnpHAv2CAOV7vy8S6A8EWJvZ90UC/YEAuy9XCLD7ZUVAwGBgYQB7+669Z+/c8HAPoL+Fdcqp4IIV8W4DuvtAcvqtcLzvOh6+gW+gAf/RgKpk1YvdoA7KSykKLVlzUzdrZc0kAnR8cIqosaD8Z0HBV/CVJzQQkr/83SBzSnuIeflsWWDufTBd6NU0xnjignFOLARoABoINA0E5yebRpuXD+vNWdmvyYhDAs2QuF/AAxqABjykgTtkQ7mvE9DF3uihC/baN9xwP1iE0AA04CUNjOqLs7I/o5sZ5qUbAsiRF4cGoIHBpoFbZEO5rxMQpEcC1Ig+oAFoABrgogE+HR6usCbn3A4HcXHQYIsMcD+IdqGB/18D17syVvZ7AjTr+IAzYANoABqABvho4GrZYHY9AUH6OoAaGxU0AA1AA1w0MNqVsVzek3OGwkFcHIRohE80AjvCjv6sgdu4gNn1JATp4QA1QA0NQAPQABcNDHdlLJf35Jzb4CAuDvLnKADXjigWGuCjgaFcwOx6EoL0aIAaoIYGoAFogIsGrnNlrOz35Bh0fPDZRRGNwI7QADTANOCRjo/rsYty2UWxSLFIoQFo4HbZ0XNfJyBI3wRQA9TQADQADXDRwMi+OCv7M3LOLXAQFwchmkI0BQ1AA3z/WdNuwhOkRwHUADU0AA1AA1w0cGM3W7nO5Jw74CAuDkI0hWgKGoAGhnAFNDsZAfoaQBqQhgagAWiAiwbY/5CFjg+IiYuYEPUh6oMGPKOBEO7R9HcR9Y8BP8APGoAGoAEuGrjVU6BGx4dndlZELLArNBB4GkDHB3Z8Ljs+4BF48IDPB87nHuv4uBMABAChAWgAGuCigWu5pz7IMej4GLidFlENbA0NDG4NjOEO6e8KiT/ELsplF8UCHNwLEP6Ff/ujAXR8YEPBhgINQAM+rgGPdXyM8PEb788uht9BtAMNQAO+oIGb3Ul9/AcAAP//+DgR4wAAA75JREFU7d3ZTuNAFEVRIGFIGAKEOYzd//+N9M1rVBUk34s6hoXkh5RVxtTZ2T5IRdjb++Lr8/PzKY6/DmuAAQxgIM3A/AvlDjsdwbwLJx2OB52HPQYwsGZgOszEW2bFRSckTdIYwAAGShj42KLb4acinJmASgLSprQpDGBgNdzGW2aGpBdETdQYwAAGShi43aLb4acinFsBlQSkTWlTGMDAYriNt8wMSa+ImqgxgAEMlDAw26Lb4acinA8BlQSkTWlTGMDAZLiNOzND0FOSJmkMYAADJQy8d1SbG45w5gIqCUiT0qQwgIGnnJE7s0PSl0RN1BjAAAZKGLjpqDY3HOHcCagkIG1Km8IABi5yRu7MDkk/EzVRYwADGChh4KSj2txwhPNHQCUBaVPaFAYwcJAzcmN2CPqQpEkaAxjAQAkDbw3N5ocinFMBlQSkSWlSGMDAY97KjSuEpK+ImqgxgAEMlDCwbGg2PxTh3AuoJCBtSpvCAAbO81ZuXCEk/ULURI0BDGCghIHjhmZzQxHMfhx2fGgBmiAGMFDDgB0fnvglT3xvyJo3pHW0jpsM2PFB0iSNAQzsOAN2fOx4QJtPVq+1LQz8Pgbs+CBqbQoDGNhxBuz42PGAtKff155kLvNNBr5tx8fmN/IafBjAAAaGMbCf24fXmB0N9UhL9askBjCAgRIGXhuazQ9FOGcCKglI+xjWPqybdftJDDzkrdy4Qkj6mqiJGgMYwEAJA9cNzeaHIpwHAZUE9JNagZ9Fy8XAMAbO8lZuXCEk/UrURI0BDGCghIGjhmZzQxHM+jM+PDmtAQYwgIEaBr5lx8cxUXtQYQADGChh4CVXnTuzI5xzAZUEpI3UtBHraB3HzMB9R7W54ZD0kqiJGgMYwEAJA1c5I3dmRziPAioJaMwtwL1rsRioYeC0o9rccEj6jaiJGgMYwEAJA4c5IzdmRzAHwikJRxupaSPW0TqOmYH1f8j6lh0fJ0RN1BjAAAZKGHhu9OH8UIRzIaCSgMbcAty7FouBGgbu8lZuXCEkfUPURI0BDGCghIHLhmbzQxHOk4BKAtJIahqJdbSOY2Zgnrdy4woh6XeiJmoMYAADJQxMG5rNDUUwE+GUhDPmBuDeNVgM1DDwkTNyZ3ZIekbURI0BDGCghIFVR7W54QhnIaCSgDSSmkZiHa3jmBm4zRm5MzskbceHN8aY3xjuHb+7xMCio9rccIjahzEBfZdAdy94HDMDJzkjd2aHqCdxrOIY8+K4d/lhAAP/k4H1n40vO5pND/8D85Hmhs7rtCkAAAAASUVORK5CYII="

local OS_VOTE_PORTRAIT_CELL = "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"

local OS_VOTE_LANDSCAPE_BG = ""

local OS_VOTE_PORTRAIT_BG = ""

local function getHotspotExposureTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.exposureTrackLink
end

local function getHotspotClickTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.clickTrackLink
end

local function closeView()
    Native:widgetEvent(eventTypeClose, voteWindow.id, adTypeName, actionTypeNone, "")
    Native:destroyView()
end

local function mathPercent(num)
    if (type(num) ~= 'number' or type(num) == 'inf') then
        return 0, "0.0%"
    end
    if (num == 0 or num == 0.0 or tostring(num) == "inf") then
        return 0, "0.0%"
    end
    local floorNum = math.floor(num * 1000 + 0.5) * 0.1
    local percentNum = math.floor(floorNum)
    if (percentNum < floorNum) then
        return percentNum, floorNum .. "%"
    else
        return percentNum, floorNum .. ".0%"
    end
end

local function calculateVoteCount()

    local len = 0
    if voteWindow.voteCount ~= nil then
        for k, v in pairs(voteWindow.voteCount) do
            len = len + v
        end
    end

    voteWindow.totalVote = len
    if voteWindow.totalVote == 0 then
        voteWindow.totalVote = 1
    end
end

local function translationAnim(x, y)
    local anim = Animation():translation(x, y):duration(0.3)
    return anim
end

local function startViewTranslationAnim(view, x, y, table)
    if (view == nil) then
        return nil
    end
    if table ~= nil then
        return translationAnim(x, y):with(view):callback(table):start()
    else
        return translationAnim(x, y):with(view):start()
    end
end

local function getUserVoteInfo(callback)

    local businessInfo = {
        userId = Native:getIdentity(),
        creativeId = voteWindow.data.creativeId
    }

    local paramData = {
        businessParam = businessInfo,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    --     print("==[LuaView] "..userInfoTable.uid)
    -- print("[LuaView] "..OS_HTTP_GET_MOBILE_QUERY)
    -- print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    voteWindow.request:post(OS_HTTP_GET_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        voteWindow.loadingCount = voteWindow.loadingCount - 1
        if voteWindow.loadingCount <= 0 then
            voteWindow.voteLoadingView:hide()
        end

        if (response == nil) then
            voteWindow.voteErrorView:show()
            return
        end
        -- print("luaview getUserVoteInfo 11"..Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            voteWindow.voteErrorView:show()
            return
        end
        local dataTable = response.businessInfo
        if (dataTable == nil) then
            local showLinkUrl = getHotspotExposureTrackLink(voteWindow.data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (voteWindow.launchPlanId ~= nil) then
                osTrack(voteWindow.launchPlanId, 2, 1)
            end
            if callback ~= nil then
                callback()
            end
            return
        end
        if dataTable.isVote == true then
            voteWindow.section = dataTable.vote
            showVoteResult()
        else
            local showLinkUrl = getHotspotExposureTrackLink(voteWindow.data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (voteWindow.launchPlanId ~= nil) then
                osTrack(voteWindow.launchPlanId, 2, 1)
            end
        end
    end, voteWindow.luaview)
end

local function postUserVoteInfo(voteIndex)

    local businessInfoTable = {
        isVote = true,
        vote = voteIndex
    }
    local businessParamTable = {
        userId = Native:getIdentity(),
        creativeId = voteWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    print("[LuaView] " .. OS_HTTP_POST_MOBILE_QUERY)
    print("[LuaView] " .. Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    voteWindow.request:post(OS_HTTP_POST_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview postUserVoteInfo")
        if (response == nil) then
            return
        end
        print("luaview postUserVoteInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.launchInfoList
        if (dataTable == nil) then
            return
        end
    end, voteWindow.luaview)
end

local function getVoteCountInfo()

    local businessInfoTable = {}
    for k, v in pairs(voteWindow.data.data.voteList) do
        businessInfoTable[k] = {
            action = "count",
            condition = {
                {
                    key = "vote",
                    value = k,
                    operator = "equal"
                }
            }
        }
    end

    local businessParamTable = {
        creativeId = voteWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    print("[LuaView] " .. OS_HTTP_GET_COMMON_QUERY)
    --print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    voteWindow.request:post(OS_HTTP_GET_COMMON_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview getVoteCountInfo")

        voteWindow.loadingCount = voteWindow.loadingCount - 1
        if voteWindow.loadingCount <= 0 then
            voteWindow.voteLoadingView:hide()
        end

        if (response == nil) then
            voteWindow.voteErrorView:show()
            return
        end
        print("luaview getVoteCountInfo 11")
        print("luaview getVoteCountInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            voteWindow.voteErrorView:show()
            return
        end
        local dataTable = response.commonResult
        if (dataTable == nil) then
            return
        end
        voteWindow.voteCount = dataTable
        --如果需要显示投票结果，显示投票结果
        if voteWindow.needShowVoteResult ~= nil and voteWindow.needShowVoteResult == true then
            calculateVoteCount()
            voteWindow.voteWindowScrollview:reload()
        end
    end, voteWindow.luaview)
end

--未上传时传递index，对应count+1，已上传不需要+1
function showVoteResult(index)
    local clickLinkUrl = getHotspotClickTrackLink(voteWindow.data, 1)
    if (clickLinkUrl ~= nil) then
        Native:get(clickLinkUrl)
    end
    if (voteWindow.launchPlanId ~= nil) then
        osTrack(voteWindow.launchPlanId, 3, 1)
    end
    if voteWindow.voteCount == nil then
        voteWindow.isVoted = true
        voteWindow.needShowVoteResult = true
        return
    end
    if index ~= nil then
        voteWindow.voteCount[index] = voteWindow.voteCount[index] + 1
        voteWindow.section = index
        postUserVoteInfo(index)
    end
    calculateVoteCount()
    voteWindow.isVoted = true
    voteWindow.voteWindowScrollview:reload()
end

local function voteClickEvent(section, row)
    -- local userInfoTable = Native:getUserInfo()
    -- if (userInfoTable == nil or userInfoTable.uid == nil or userInfoTable.uid == "") then
    --     Toast(OS_NO_LOGIN_INFO)
    --     Native:requireLogin(function(userInfo)
    --         voteWindow.loadingCount = voteWindow.loadingCount + 1
    --         voteWindow.voteLoadingView:show()
    --         getUserVoteInfo(function()
    --             postUserVoteInfo(row)
    --             showVoteResult(row)
    --         end)
    --     end)
    --     return
    -- end
    showVoteResult(row)
end

local function setLuaViewSize(luaview, isPortrait) --设置当前容器大小
    if (luaview == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        luaview:frame(0, 0, math.min(screenWidth, screenHeight), math.max(screenWidth, screenHeight))
        luaview:align(Align.BOTTOM)
    else
        luaview:frame(0, 0, math.max(screenWidth, screenHeight), math.min(screenWidth, screenHeight))
        luaview:align(Align.RIGHT)
    end
end

local function setVoteViewSize(data, voteWindowView, voteWindowContentView, voteWindowContentBg, isPortrait) --设置当前容器大小
    if (data == nil or voteWindowView == nil or voteWindowContentView == nil or voteWindowContentBg == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        voteWindowView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        -- voteWindowView:align(Align.BOTTOM)
        voteWindowContentView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        voteWindowContentView:align(Align.BOTTOM)

        voteWindowContentBg:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        voteWindowContentBg:image(Data(OS_VOTE_PORTRAIT_BG))

        if System.ios() then
            voteWindowView:frame(0, math.max(screenWidth, screenHeight) - voteWindow.portraitHeight, voteWindow.portraitWidth, voteWindow.portraitHeight)
        else
            voteWindowView:align(Align.BOTTOM)
        end
    else
        voteWindowView:frame(0, 0, 215 * scale, math.min(screenWidth, screenHeight))
        voteWindowContentView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
        voteWindowContentView:align(Align.RIGHT)

        voteWindowContentBg:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
        voteWindowContentBg:image(Data(OS_VOTE_LANDSCAPE_BG))

        if System.ios() then
            voteWindowView:frame(math.max(screenWidth, screenHeight) - 215 * scale, 0, 215 * scale, math.min(screenWidth, screenHeight))
        else
            voteWindowView:align(Align.RIGHT)
        end
    end
end

local function setVoteLoadingViewSize(data, voteLoadingView, voteLoading, isPortrait) --设置当前容器大小
    if (data == nil or voteLoadingView == nil or voteLoading == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        voteLoadingView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
    else
        voteLoadingView:frame(0, 0, 215 * scale, math.min(screenWidth, screenHeight))
    end
    voteLoadingView:align(Align.RIGHT)
    voteLoading:frame(0, 0, 40, 40)
    voteLoading:align(Align.CENTER)
end

local function setVoteErrorViewSize(data, voteErrorView, voteErrorMessage, isPortrait) --设置当前容器大小
    -- if (data == nil or voteErrorView == nil or voteErrorMessage == nil) then
    --     return
    -- end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        voteErrorView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        voteErrorMessage:frame(0, voteWindow.portraitHeight * 0.7, math.min(screenWidth, screenHeight), 40)
    else
        voteErrorView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
        voteErrorMessage:frame(0, math.min(screenWidth, screenHeight) * 0.7, 215 * scale, 40)
    end
    voteErrorView:align(Align.RIGHT)
end

local function setVoteIconViewSize(data, voteIconView, isPortrait)
    if (data == nil or voteIconView == nil) then
        return
    end
    if (isPortrait) then
        voteIconView:xy(30 * scale, 19 * scale)
    else
        voteIconView:xy(0, 27 * scale)
    end
end

local function setVoteTopViewSize(data, voteWindowTopLabel, voteWindowTopCloseView, isPortrait) --设置当前容器大小
    if (data == nil or voteWindowTopLabel == nil or voteWindowTopCloseView == nil) then
        return
    end
    if (isPortrait) then
        voteWindowTopCloseView:show()
        voteWindowTopLabel:frame(70 * scale, 22 * scale, 300 * scale, 25 * scale)
        voteWindowTopLabel:textSize(18)
    else
        voteWindowTopCloseView:hide()
        voteWindowTopLabel:frame(26 * scale, 37 * scale, 170 * scale, 20 * scale)
        voteWindowTopLabel:textSize(14)
    end
end

local function setVoteScrollviewSize(data, voteWindowScrollview, isPortrait) --设置当前容器大小
    if (data == nil or voteWindowScrollview == nil) then
        return
    end
    if (isPortrait) then
        local screenWidth, screenHeight = System.screenSize()
        voteWindowScrollview:frame(0, 80 * scale, voteWindow.portraitWidth, voteWindow.portraitHeight - 80 * scale)
    else
        voteWindowScrollview:frame(0, 90 * scale, 200 * scale, 285 * scale)
    end
    voteWindowScrollview:reload()
end

--屏幕旋转--
local function rotationScreen(isPortrait)
    setLuaViewSize(voteWindow.luaview, isPortrait)
    setVoteViewSize(voteWindow.data, voteWindow.voteWindowView, voteWindow.voteWindowContentView, voteWindow.voteWindowContentBg, isPortrait)
    setVoteIconViewSize(voteWindow.data, voteWindow.voteWindowIcon, isPortrait)
    setVoteTopViewSize(voteWindow.data, voteWindow.voteWindowTopLabel, voteWindow.voteWindowTopCloseView, isPortrait)
    setVoteScrollviewSize(voteWindow.data, voteWindow.voteWindowScrollview, isPortrait)
    setVoteLoadingViewSize(voteWindow.data, voteWindow.voteLoadingView, voteWindow.voteLoading, isPortrait)
    setVoteErrorViewSize(voteWindow.data, voteWindow.voteErrorView, voteWindow.voteErrorMessage, isPortrait)
end

local function registerMedia()
    local media = Media()
    -- body
    -- 注册window callback通知
    local callbackTable = {
        --0: 竖屏小屏幕，1 竖屏全凭，2 横屏全屏
        onPlayerSize = function(type)
            if (type == 0) then
                rotationScreen(true)
            elseif (type == 1) then
                rotationScreen(true)
            elseif (type == 2) then
                rotationScreen(false)
            end
            voteWindow.voteWindowScrollview:reload()
        end
    }
    media:mediaCallback(callbackTable)
    return media
end

local function getSectionCount(data)
    if (data == nil) then
        return 0
    end
    local dataTable = data.data
    if (dataTable == nil) then
        return 0
    end
    local voteRule = dataTable.voteRule
    if (voteRule ~= nil) then
        return 2
    else
        return 1
    end
end

local function getRowCount(data, section)
    if (data == nil) then
        return 0
    end
    local dataTable = data.data
    if (dataTable == nil) then
        return 0
    end
    local voteList = dataTable.voteList
    if (voteList == nil) then
        return 0
    end
    if (section == 1) then
        return table_leng(voteList)
    else
        return 1
    end
end

local function getStateCellSize(data)
    if (data == nil) then
        return 0, 0
    end
    local voteRule = data.voteRule
    if (voteRule == nil) then
        return 0, 0
    end
    local isPortrait = Native:isPortraitScreen()
    if (isPortrait) then
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, 334 * scale, 14)
        local screenWidth, screenHeight = System.screenSize()
        return math.min(screenWidth, screenHeight), screenHeight + 30 * scale
    else
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, 160 * scale, 12)
        return 200 * scale, textHeight + 20 * scale
    end
end

local function createInitCell(cell, section, row)
    cell.rootView = View(Native)

    cell.itemBgView = Image(Native)
    cell.itemBgView:image(Data(OS_VOTE_PORTRAIT_CELL))
    cell.itemBgView:scaleType(ScaleType.FIT_XY)


    cell.iconView = Image(Native)
    cell.iconView:placeHolderImage(Data(OS_ICON_PRELOAD))
    cell.iconView:scaleType(ScaleType.CENTER_CROP)

    cell.nameView = Label()
    cell.nameView:textColor(0xFFFFFF)
    cell.nameView:textAlign(TextAlign.LEFT)

    cell.voteTagMaxView = View() -- 投票进度
    cell.voteTagMaxView:backgroundColor(0x000906)
    cell.voteTagMaxView:hide()

    cell.voteTagView = View() -- 投票进度
    cell.voteTagView:backgroundColor(0x24C689)
    cell.voteTagView:hide()

    cell.percentView = Label()
    cell.percentView:textColor(0x24C689)
    cell.percentView:text("100.0%")
    --    cell.percentView:textAlign(TextAlign.RIGHT)
    cell.percentView:hide()

    --    cell.voteView = Image(Native)
    --    cell.voteView:scaleType(ScaleType.FIT_XY)
    cell.voteView = Label()
    cell.voteView:textColor(0x24C689)
    cell.voteView:text("投票")
    -- cell.voteView:backgroundColor(0x4A90E2)
    cell.voteView:textAlign(TextAlign.CENTER)
    cell.voteView:hide()
end

local function createInitStateCell(cell, section, row)
    cell.stateView = Label()
    cell.stateView:textColor(0x86818B)
    if (System.android()) then
        cell.stateView:maxLines(100)
    else
        cell.stateView:lines(100)
    end
    cell.stateView:textAlign(TextAlign.LEFT)
end

local function createCellLandscapeSize(data, cell, section, row)
    --    cell.rootView1:frame(0, 0, 200 * scale, 50 * scale)
    cell.rootView:frame(0, 0, 200 * scale, 45 * scale)

    cell.itemBgView:frame(13.6 * scale, 0, 177.6 * scale, 45 * scale)
    cell.itemBgView:image(Data(OS_VOTE_LANDSCAPE_CELL))

    cell.iconView:frame(17.6 * scale, 0, 42 * scale, 42 * scale)
    cell.nameView:frame(66 * scale, 2 * scale, 120 * scale, 45 * scale)
    cell.nameView:textSize(12)


    if (voteWindow.isVoted) then
        if (cell.voteTagMaxView:isHide()) then
            cell.voteTagMaxView:show()
        end
        if (cell.voteTagView:isHide()) then
            cell.voteTagView:show()
        end
        if (cell.percentView:isHide()) then
            cell.percentView:show()
        end
        if (cell.voteView:isShow()) then
            cell.voteView:hide()
        end
        local percent, percentText = mathPercent(voteWindow.voteCount[row] / voteWindow.totalVote)
        local percentWidth = percent * (70 * scale / 100) --90 * scale为最大宽度
        if (percentWidth == 0) then
            percentWidth = 6 * scale
        end
        cell.voteTagMaxView:frame(66.7 * scale, 35 * scale, 70 * scale, 6 * scale)
        cell.voteTagView:frame(66.7 * scale, 35 * scale, percentWidth, 6 * scale)
        cell.voteTagMaxView:cornerRadius(3 * scale)
        cell.voteTagView:cornerRadius(3 * scale)

        cell.percentView:frame(140.0 * scale, 27 * scale, 50 * scale, 20 * scale)
        cell.percentView:textSize(12)
        cell.percentView:text(percentText)
    else
        if (cell.voteTagView:isShow()) then
            cell.voteTagView:hide()
        end
        if (cell.voteTagMaxView:isShow()) then
            cell.voteTagMaxView:hide()
        end
        if (cell.percentView:isShow()) then
            cell.percentView:hide()
        end
        if (cell.voteView:isHide()) then
            cell.voteView:show()
        end
        cell.voteView:frame(151 * scale, 2 * scale, 30 * scale, 45 * scale)
        cell.voteView:textSize(12)
    end


    if (data == nil) then
        return
    end
    local imageUrl = data.imageUrl
    if (imageUrl ~= nil) then
        cell.iconView:image(imageUrl)
    end
    local title = data.title
    if (title ~= nil) then
        cell.nameView:text(title)
    end
    --    local btnImageUrl = voteWindow.data.data.voteBtnImage
    --    if (btnImageUrl ~= nil) then
    --        cell.voteView:image(btnImageUrl)
    --    end
    cell.voteView:onClick(function()
        --TODO 投票逻辑添加
        voteClickEvent(section, row)
    end)
end

local function createStateCellLandscapeSize(data, cell, section, row)

    if (data == nil) then
        return
    end

    local voteRule = data.voteRule
    if (System.android()) then
        cell.stateView:margin(20 * scale, 0, 20 * scale, 10 * scale)
    else
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, 200 * scale - 21 * scale * 2, 12)
        cell.stateView:frame(20 * scale, 10 * scale, textWidth, textHeight + 5 * scale)
    end

    cell.stateView:textSize(12)

    if (voteRule ~= nil) then
        cell.stateView:text(voteRule)
    end
end

local function createCellPortraitSize(data, cell, section, row)
    local screenWidth, screenHeight = System.screenSize()

    cell.rootView:frame(0, 0, math.min(screenWidth, screenHeight), 85 * scale)

    cell.itemBgView:frame(49 * scale, 4 * scale, math.min(screenWidth, screenHeight) - 98 * scale, 55 * scale)
    cell.itemBgView:image(Data(OS_VOTE_PORTRAIT_CELL))


    cell.iconView:frame(59 * scale, 0, 63 * scale, 63 * scale)

    cell.nameView:frame(129 * scale, 2*scale, 246 * scale, 63 * scale)
    cell.nameView:textSize(18)

    if (voteWindow.isVoted) then
        if (cell.voteTagMaxView:isHide()) then
            cell.voteTagMaxView:show()
        end
        if (cell.voteTagView:isHide()) then
            cell.voteTagView:show()
        end
        if (cell.percentView:isHide()) then
            cell.percentView:show()
        end
        if (cell.voteView:isShow()) then
            cell.voteView:hide()
        end
        local percent, percentText = mathPercent(voteWindow.voteCount[row] / voteWindow.totalVote)
        local percentWidth = percent * (117 * scale / 100) --205 * scale为最大宽度
        if (percentWidth == 0) then
            percentWidth = 10 * scale
        end
        cell.voteTagMaxView:frame(129 * scale, 48 * scale, 117 * scale, 6 * scale)
        cell.voteTagView:frame(129 * scale, 48 * scale, percentWidth, 6 * scale)
        cell.voteTagMaxView:cornerRadius(3 * scale)
        cell.voteTagView:cornerRadius(3 * scale)

        cell.percentView:frame(255 * scale, 34 * scale, 80 * scale, 30 * scale) --109 * scale其它偏移量
        cell.percentView:textSize(14)
        cell.percentView:text(percentText)
    else
        if (cell.voteTagView:isShow()) then
            cell.voteTagView:hide()
        end
        if (cell.voteTagMaxView:isShow()) then
            cell.voteTagMaxView:hide()
        end
        if (cell.percentView:isShow()) then
            cell.percentView:hide()
        end
        if (cell.voteView:isHide()) then
            cell.voteView:show()
        end
        cell.voteView:frame(262 * scale, 2*scale, 40 * scale, 63 * scale)
        cell.voteView:textSize(18)
    end



    if (data == nil) then
        return
    end
    local imageUrl = data.imageUrl
    if (imageUrl ~= nil) then
        cell.iconView:image(imageUrl)
    end
    local title = data.title
    if (title ~= nil) then
        cell.nameView:text(title)
    end
    --    local btnImageUrl = voteWindow.data.data.voteBtnImage
    --    if (btnImageUrl ~= nil) then
    --        cell.voteView:image(btnImageUrl)
    --    end

    cell.voteView:onClick(function()
        --TODO 投票逻辑添加
        voteClickEvent(section, row)
    end)
end

local function createStateCellPortraitSize(data, cell, section, row)

    if (data == nil) then
        return
    end
    local voteRule = data.voteRule

    if (System.android()) then
        cell.stateView:margin(21 * scale, 0, 21 * scale, 15 * scale)
    else
        local screenWidth, screenHeight = System.screenSize()
        local cellWidth = math.min(screenWidth, screenHeight)
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, cellWidth - 21 * scale * 2 - 2 * scale, 14)
        cell.stateView:frame(21 * scale, 15 * scale, cellWidth - 21 * scale * 2, textHeight + 5 * scale)
    end
    cell.stateView:textSize(14)


    if (voteRule ~= nil) then
        cell.stateView:text(voteRule)
    end
end

--全局父控件
local function createLuaView(isPortrait)
    local luaView
    -- if System.android() then
    --     luaView = View()
    -- else
    --     luaView = ThroughView()
    -- end
    luaView = View()
    setLuaViewSize(luaView, isPortrait)
    return luaView
end

--投票云窗大小控件
local function createVoteView(data, isPortrait)
    local voteWindowView = View()
    local voteWindowContentView = View()
    voteWindowContentView:backgroundColor(0x000000, 0.0)

    local voteWindowContentBg = Image(Native)
    --    voteWindowContentBg:image(Data(OS_VOTE_PORTRAIT_BG))
    voteWindowContentBg:scaleType(ScaleType.FIT_XY)

    voteWindowContentView:addView(voteWindowContentBg)

    setVoteViewSize(data, voteWindowView, voteWindowContentView, voteWindowContentBg, isPortrait)

    voteWindowView:addView(voteWindowContentView)
    return voteWindowView, voteWindowContentView, voteWindowContentBg
end

--投票loading控件
local function createVoteLoadingView(data, isPortrait)
    local voteLoadingView = View()
    voteLoadingView:backgroundColor(0x000000, 0.4)
    local voteLoading = LoadingIndicator()
    voteLoading:start()
    setVoteLoadingViewSize(data, voteLoadingView, voteLoading, isPortrait)
    voteLoadingView:addView(voteLoading)
    voteLoadingView:hide()
    voteLoadingView:onClick(function()
    end)
    return voteLoadingView, voteLoading
end

--投票错误控件
local function createVoteErrorView(data, isPortrait)
    local voteErrorView = View()
    voteErrorView:backgroundColor(0x000000, 0.4)

    local voteErrorMessage = Label()
    voteErrorMessage:textColor(0xFFFFFF)
    voteErrorMessage:text("服务器出错了，请稍后再试")
    voteErrorMessage:textAlign(TextAlign.CENTER)
    local voteLoading = LoadingIndicator()

    setVoteErrorViewSize(data, voteErrorView, voteErrorMessage, isPortrait)
    voteErrorView:addView(voteErrorMessage)
    voteErrorView:hide()
    voteErrorView:onClick(function()
        voteErrorView:hide()
    end)
    return voteErrorView, voteErrorMessage
end

local function createVoteIconView(data, isPortrait)
    local voteWindowIcon = Image(Native)
    voteWindowIcon:scaleType(ScaleType.CENTER_CROP)
    voteWindowIcon:size(30 * scale, 30 * scale)
    voteWindowIcon:placeHolderImage(Data(OS_ICON_PRELOAD))
    voteWindowIcon:cornerRadius(15 * scale)
    setVoteIconViewSize(data, voteWindowIcon, isPortrait)
    return voteWindowIcon
end

local function createVoteTopView(data, isPortrait)

    local voteWindowTopLabel = Label()
    local title = "快来Pick你喜欢的小姐姐吧"
    voteWindowTopLabel:textColor(0xFFFFFF)
    voteWindowTopLabel:text(title)

    local voteWindowTopCloseView = View()
    voteWindowTopCloseView:frame(0, 0, 25 * scale, 25 * scale)
    voteWindowTopCloseView:align(Align.RIGHT)
    voteWindowTopCloseView:hide()

    local voteWindowTopCloseImage = Image(Native)
    voteWindowTopCloseImage:frame(0, 0, 14 * scale, 14 * scale)
    voteWindowTopCloseImage:scaleType(ScaleType.CENTER_CROP)
    voteWindowTopCloseImage:image(Data(OS_ICON_WEDGE_CLOSE))
    voteWindowTopCloseImage:align(Align.BOTTOM)

    voteWindowTopCloseView:addView(voteWindowTopCloseImage)

    setVoteTopViewSize(data, voteWindowTopLabel, voteWindowTopCloseView, isPortrait)
    return voteWindowTopLabel, voteWindowTopCloseView
end

local function createVoteScrollview(data, isPortrait)
    local dataTable = voteWindow.data.data
    local voteTable = dataTable.voteList
    local voteWindowScrollview = CollectionView {
        Section = {
            SectionCount = function()
                -- 返回页面区块的个数（不同区块的种类数）
                return getSectionCount(voteWindow.data)
            end,
            RowCount = function(section)
                -- 返回每个区块对应有的坑位数
                return getRowCount(voteWindow.data, section)
            end
        },
        Cell = {
            Id = function(section, row)
                -- 返回每个区块对应额坑位ID
                if (section == 1) then
                    return "VoteCell"
                elseif (section == 2) then
                    if (System.android()) then
                        return "VoteState"
                    else
                        return "VoteStateIOS"
                    end
                end
            end,
            VoteCell = {
                Size = function(section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        local screenWidth, screenHeight = System.screenSize()
                        return math.min(screenWidth, screenHeight), 85 * scale
                    else
                        return 200 * scale, 70 * scale
                    end
                end,
                Init = function(cell, section, row)
                    createInitCell(cell, section, row)
                end,
                Layout = function(cell, section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then

                        createCellPortraitSize(voteTable[row], cell, section, row)
                    else
                        createCellLandscapeSize(voteTable[row], cell, section, row)
                    end
                end
            },
            VoteState = {
                Sizes = function(section, row)
                    return 0, 0
                end,
                Init = function(cell, section, row)
                    createInitStateCell(cell, section, row)
                end,
                Layout = function(cell, section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        createStateCellPortraitSize(dataTable, cell, section, row)
                    else
                        createStateCellLandscapeSize(dataTable, cell, section, row)
                    end
                end
            },
            VoteStateIOS = {
                Size = function(section, row)
                    local voteRule = dataTable.voteRule
                    local isPortrait = Native:isPortraitScreen()
                    if voteRule == nil then
                        return 0, 0
                    end
                    if (isPortrait) then
                        local screenWidth, screenHeight = System.screenSize()
                        local cellWidth = math.min(screenWidth, screenHeight)
                        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, cellWidth - 42 * scale, 14)
                        return cellWidth, textHeight + 5 * scale + 30 * scale
                    else
                        local cellWidth = 200 * scale
                        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, cellWidth - 40 * scale, 12)
                        return cellWidth, textHeight + 5 * scale + 20 * scale
                    end
                end,
                Init = function(cell, section, row)
                    createInitStateCell(cell, section, row)
                end,
                Layout = function(cell, section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        createStateCellPortraitSize(dataTable, cell, section, row)
                    else
                        createStateCellLandscapeSize(dataTable, cell, section, row)
                    end
                end
            }
        },
        Callback = {
            -- 整个CollectionView的事件回调
            Scrolling = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                -- 滚动中回调
            end,
            ScrollBegin = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                -- 滚动开始回调
            end,
            ScrollEnd = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                -- 滚动结束回调
            end
        }
    }
    setVoteScrollviewSize(data, voteWindowScrollview, isPortrait)
    return voteWindowScrollview
end


local function onCreate(data)
    registerMedia()

    local isPortrait = Native:isPortraitScreen()
    voteWindow.luaview = createLuaView(isPortrait)
    voteWindow.voteWindowView, voteWindow.voteWindowContentView, voteWindow.voteWindowContentBg = createVoteView(data, isPortrait)
    voteWindow.voteWindowIcon = createVoteIconView(data, isPortrait)
    voteWindow.voteWindowTopLabel, voteWindow.voteWindowTopCloseView = createVoteTopView(data, isPortrait)
    voteWindow.voteWindowScrollview = createVoteScrollview(data, isPortrait)
    voteWindow.voteLoadingView, voteWindow.voteLoading = createVoteLoadingView(data, isPortrait)
    voteWindow.voteErrorView, voteWindow.voteErrorMessage = createVoteErrorView(data, isPortrait)

    voteWindow.luaview:addView(voteWindow.voteWindowView)
    voteWindow.voteWindowView:addView(voteWindow.voteWindowIcon)

    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowTopLabel)
    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowTopCloseView)
    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowScrollview)
    voteWindow.voteWindowView:addView(voteWindow.voteLoadingView)
    voteWindow.voteWindowView:addView(voteWindow.voteErrorView)
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if System.ios() then
            voteWindow.voteWindowView:y(math.max(screenWidth, screenHeight))
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowView, 0, -voteWindow.portraitHeight)
        else
            voteWindow.voteWindowView:translation(0, voteWindow.portraitHeight)
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowView, 0, 0)
        end
    else
        if System.ios() then
            voteWindow.voteWindowView:x(math.max(screenWidth, screenHeight))
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowView, -215 * scale, 0)
        else
            voteWindow.voteWindowView:translation(215 * scale, 0)
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowView, 0, 0)
        end
    end

    voteWindow.voteWindowView:onClick(function()
    end)
    voteWindow.luaview:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(voteWindow.voteWindowView, 0, voteWindow.portraitHeight, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        else
            startViewTranslationAnim(voteWindow.voteWindowView, 215 * scale, 0, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)
    voteWindow.voteWindowTopCloseView:onClick(function()
        startViewTranslationAnim(voteWindow.voteWindowView, 0, voteWindow.portraitHeight, {
            onCancel = function()
                closeView()
            end,
            onEnd = function()
                closeView()
            end,
            onPause = function()
                closeView()
            end
        })
    end)
    local dataTable = voteWindow.data.data
    if (dataTable == nil) then
        return
    end
    local voteTitle = dataTable.voteTitle
    if (voteTitle ~= nil) then
        voteWindow.voteWindowTopLabel:text(voteTitle)
    end
    local voteIcon = dataTable.voteImageUrl
    if (voteIcon ~= nil) then
        voteWindow.voteWindowIcon:image(voteIcon)
    end
    Native:widgetEvent(eventTypeShow, voteWindow.id, adTypeName, actionTypeNone, "")
end

local function setConfig(data)
    if (data == nil) then
        return
    end
    voteWindow.data = data
    voteWindow.isVoted = false
    local screenWidth, screenHeight = System.screenSize()
    local videoWidth, videoHight, marginTop = Native:getVideoSize(0)
    voteWindow.portraitWidth = math.min(screenWidth, screenHeight) --宽
    voteWindow.portraitHeight = math.max(screenWidth, screenHeight) - videoHight - marginTop --高
    local dataTable = voteWindow.data.data
    if (dataTable == nil) then
        return
    end
    local voteListTable = dataTable.voteList
    if (voteListTable == nil) then
        voteWindow.totalVote = 1
        return
    end
end

function show(args)
    if (args == nil or args.data == nil or voteWindow.luaview ~= nil) then
        return
    end
    print("LuaView os vote window" .. Native:tableToJson(args))
    voteWindow.loadingCount = 0
    voteWindow.id = "os_vote_window" .. tostring(args.data.id)
    voteWindow.launchPlanId = args.data.launchPlanId
    voteWindow.request = HttpRequest()
    if (voteWindow.launchPlanId ~= nil) then
        osTrack(voteWindow.launchPlanId, 1, 1)
    end
    setConfig(args.data)
    onCreate(args.data)

    if args.data.data.voteCount == nil then
        voteWindow.totalVote = 1
        voteWindow.loadingCount = voteWindow.loadingCount + 1
        voteWindow.voteLoadingView:show()
        getVoteCountInfo()
    else
        local voteCount = args.data.data.voteCount
        voteWindow.voteCount = voteCount
        calculateVoteCount()
    end

    --用户已经登录，判定是否在vote热点页面取到用户投票数据
    if args.data.data ~= nil and args.data.data.userVote then
        local userVote = args.data.data.userVote
        if userVote.isVote == true then
            --用户已经投票，判定是否在vote热点页面取到票数
            voteWindow.section = userVote.vote
            if voteWindow.voteCount ~= nil then
                voteWindow.isVoted = true
                voteWindow.voteWindowScrollview:reload()
            else
                voteWindow.needShowVoteResult = true
            end
        else
            local showLinkUrl = getHotspotExposureTrackLink(args.data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (voteWindow.launchPlanId ~= nil) then
                osTrack(voteWindow.launchPlanId, 2, 1)
            end
        end
    else
        voteWindow.loadingCount = voteWindow.loadingCount + 1
        voteWindow.voteLoadingView:show()
        getUserVoteInfo()
    end
end

