--
-- Created by IntelliJ IDEA.
-- User: videojj_pls
-- Date: 2018/11/6
-- Time: 10:22 AM
-- To change this template use File | Settings | File Templates.
--
require "os_config"
require "os_string"
require "os_constant"
require "os_util"
require "os_track"
cardWindow = object:new()
local adTypeName = "cardWindow"
local scale = getScale()
local OS_ICON_WEDGE_CLOSE = "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAtCAYAAAA6GuKaAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAhOAAAITgBRZYxYAAAABxpRE9UAAAAAgAAAAAAAAAXAAAAKAAAABcAAAAWAAABJuDZqwUAAADySURBVGgFxNYxDsIwDAXQDiwwcR1uwB1ghpUj5Oh8S3yE2rTYju1GsiIlqf3Swe009ccFyw/Esb+dsnpA1hvi6sku4PaJJ+YKOMGsa4L/gpkgGz4Hs64K3gMzQRZ8Dcy6m/AtMBNEw/+BWbcL14CZIAquBbPuAi5dgpuaeRQu4Lux5gvnT4jvkO4gkGYIL9z6hsUk4DNiMSrgoWDeIBOeAs6Ep4Iz4CXgSHgpOAK+C3gU7unD3bZGiHX2dJWGItpY7cNW6Px8FjwNzAtEw9PB0fAycBS8HDwK3w0scOnD1rbW8Iz37xCPjg3Ph6OhJGMY/gYAAP//68uhBAAAANxJREFU7dZNDoIwEAVgEl2gK4/lCdh4ALceoUf3DfEloIjTdt6sbDIpJHTeF34ahqFuHHH5DVU66471J5R8RIELpFZyeDRYDleBZfAW8OP16InyzGGvSiv4ArR9ZAbxgHlNN7wHDOs8UuER4FR4JDgFrgBL4UqwBJ4BDofX/kvYPmzbWuto3VXGZeAVJ8VZvWDm1sInLDxwMWcPPArMTC98E8wme/BoMDN/wXfBbLIFV4GZ+Q3uArPJEq4GM/MdXgVmE4NngZlJeBOYTc48SJxHZH3sEon5/6jVHXgCCd+jGkmWfYoAAAAASUVORK5CYII="
local OS_ICON_CARD_IMAGE_BG = "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"
local OS_ICON_CARD_NO_COLLECT = ""

local OS_CARD_LANDSCAPE_BG = ""

local OS_CARD_PORTRAIT_BG = ""

local OS_CARD_PROGRESS_BG = "iVBORw0KGgoAAAANSUhEUgAAADIAAABKCAYAAAD5TgcdAAAAAXNSR0IArs4c6QAAABxpRE9UAAAAAgAAAAAAAAAlAAAAKAAAACUAAAAlAAABtPVQSC8AAAGASURBVGgF1NgrSAVBFIDhFRERRQSxmAwzuyuKCAoiBovBYDFYzGar2Thn0CvLNdxiMQiC1Wqbs4uXFcMNoiCIIBaDQRAf69EgiK/72Mecha0LH/8wc2YdYVTC/ZWo9hzuCIFw40flfvYQGcGC8/5wLkJLaucDwRqCcCXCoJc3BOHVRT33ieBbBMpfEBwh0sDF2Knu5g1B9eIhzHxDcCsiQw0/IjhBJEJNnAedrCHSqCcvUpO/IrgUcUNY/xPBAUI14olqpYM1hEaQx+FjPfovwvoiqNbqQtgMoRq4lOy384YgPPjRhls3wtYiEvVqQwgrIQhHSZK0sYbQQHjvY2moYYRtRVyElaYQVkFQHTaNsAhy58VqkD1EGr3cEsKGInTwHbSMKB4CtyIOBthDXKMXU0EUWYS22t3UEEVB6Np6PX5S6mMP8QzMp4ooogiNIZXUEXlDaKu9HKlt9/CG0P9aYWA2E0SeRWhJbWWGyA2C6mzabHYxh8Az3fimMkXQx98AAAD//9ruNyQAAAGFSURBVN3YK0gEQRjA8fMdBIvBJAju7K54iqDNYrAatZotFovBoEWYbz1PDg0Ws1yzWi4I+82eh6BwSZPFYjCIoqLjKAiCr3vMzsznwtYZfvufGXY348VcpnoLvp4xcaWKQH42XC12mnBk0oIwhEdWhjEjiLdJUoSsGEOkB4HjKVlqpw65Z5gfMopIo4gv+JJxhG4IQ360KmUraYg6pW69CgxaQWgtgrBgDaELopbUoZSyhTYE+U22nOu3itBRxMeNeeuIpiEIB04gmoGofXGdFVt95CEBRnPOIBougrDvFKIhCMJVmGz3/gNINOMcot4iaoPvOYmoC4Jw6YlCD20IwouP0bSziFqLKMSO04haICyGi9HTqJs2BPlzgDDpPOKvIqpGRALxG0R98VW980IXaQiL+VOQ8AkyiJ+K+ALWSCG+g6gaJ+OV3Q7SEPUK8hDGmyPkEF+KCFgmifgMUTVwVhbbaEMQ7sIk55NFfBRhGC2SRrxDEErWf67peIoh5gd0jGN7jFc6MvK1BM8iIQAAAABJRU5ErkJggg=="

local OS_CARD_PORTRAIT_SHADOW = ""
local OS_CARD_LANDSCAPE_SHADOW = ""

local OS_CARD_GRADIENT_COLOR_1 = 0x24C689
local OS_CARD_GRADIENT_COLOR_2 = 0x24C689
local OS_CARD_GRADIENT_COLOR_3 = 0x2E2D37

local adTypeName = "CardWindow"
local blurUrl = nil
cardWindow.userCardInfo = {}
cardWindow.requestIds = {}
local alphaTime = 1.0

local function translationAnim(x, y)
    local anim = Animation():translation(x, y):duration(0.3)
    return anim
end

local function startViewTranslationAnim(view, x, y, table)
    if (view == nil) then
        return
    end
    if table ~= nil then
        translationAnim(x, y):with(view):callback(table):start()
    else
        translationAnim(x, y):with(view):start()
    end
end

local function startShowAnimation(view, duration)
    if (view == nil) then
        return
    end
    print("Luaview startShowAnimation")
    view:alpha(0)
    local anim = Animation():alpha(1.0):duration(duration):with(view):start()
    return anim
end

local function getHotspotExposureTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.exposureTrackLink
end

local function getHotspotClickTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.clickTrackLink
end

local function closeView()
    for key, value in pairs(cardWindow.requestIds) do
        if (value ~= nil) then
            Native:abort(value)
        end
    end
    Native:widgetEvent(eventTypeClose, cardWindow.id, adTypeName, actionTypeNone, "")
    Native:destroyView()
end

local function setBlurImage(blurView, imageUrl)
    if (blurView == nil or imageUrl == nil) then
        return
    end
    -- blurUrl = imageUrl
    -- blurView:imageBlur(imageUrl, 8)
    local isPortrait = Native:isPortraitScreen()
    if isPortrait then
    	blurView:image(Data(OS_CARD_PORTRAIT_BG))
    else
    	blurView:image(Data(OS_CARD_LANDSCAPE_BG))
    end
end

local function checkCollectStatus()

    if cardWindow.collectStatus == 3 then
        return 3
    end

    local collectCount = 0
    if cardWindow.isHotOrder1 == true then
        collectCount = collectCount + 1;
    end
    if cardWindow.isHotOrder2 == true then
        collectCount = collectCount + 1;
    end
    if cardWindow.isHotOrder3 == true then
        collectCount = collectCount + 1;
    end
    cardWindow.collectCount = collectCount
    if collectCount == cardWindow.sumHotspot then
        return 2
    end
    return 1
end

local function postUserCardInfo()

    local businessInfoTable = {
        collectStatus = checkCollectStatus(),
        isHotOrder1 = cardWindow.isHotOrder1,
        isHotOrder2 = cardWindow.isHotOrder2,
        isHotOrder3 = cardWindow.isHotOrder3,
    }

    local businessParamTable = {
        userId = Native:getIdentity(),
        creativeId = cardWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    -- print("[LuaView] " .. OS_HTTP_POST_MOBILE_QUERY)
    -- print("[LuaView] " .. Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    local requestId = cardWindow.request:post(OS_HTTP_POST_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview postUserCardInfo")
        if (response == nil) then
            return
        end
        -- print("luaview postUserCardInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.launchInfoList
        if (dataTable == nil) then
            return
        end
    end, cardWindow.luaView)
    table.insert(cardWindow.requestIds, requestId)
end

local function getUserCardInfo()

    local businessInfo = {
        userId = Native:getIdentity(),
        creativeId = cardWindow.data.creativeId
    }

    local paramData = {
        businessParam = businessInfo,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    -- print("[LuaView] "..paramDataString)
    -- print("[LuaView] "..OS_HTTP_GET_MOBILE_QUERY)
    -- print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    local requestId = cardWindow.request:post(OS_HTTP_GET_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        -- print("luaview getUserVoteInfo")
        if (response == nil) then
            return
        end
        -- print("luaview getUserVoteInfo 11"..Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.businessInfo
        if (dataTable == nil) then
            postUserCardInfo()
            return
        end
        cardWindow.data.data.userCardInfo = dataTable
    end, cardWindow.luaView)
    -- table.insert(cardWindow.requestIds, requestId)
end

local function setLuaViewSize(luaview, isPortrait) --设置当前容器大小
    if (luaview == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        luaview:frame(0, 0, math.min(screenWidth, screenHeight), math.max(screenWidth, screenHeight))
    else
        luaview:frame(0, 0, math.max(screenWidth, screenHeight), math.min(screenWidth, screenHeight))
        if (System.android()) then
            luaview:align(Align.RIGHT)
        end
    end
end

local function setCardViewSize(data, cardWindowView, isPortrait) --设置当前容器大小
    if (data == nil or cardWindowView == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if (System.android()) then
            cardWindowView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight)
            cardWindowView:align(Align.BOTTOM)
        else
            cardWindowView:frame(0, math.max(screenWidth, screenHeight) - cardWindow.portraitHeight, cardWindow.portraitWidth, cardWindow.portraitHeight)
        end
    else
        if (System.android()) then
            cardWindowView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
            cardWindowView:align(Align.RIGHT)
        else
            cardWindowView:frame(math.max(screenWidth, screenHeight) - 200 * scale, 0, 200 * scale, math.min(screenWidth, screenHeight))
        end
    end
end

local function setCardTopContentViewSize(data, cardWindowTopContentView, isPortrait) --设置当前容器大小
    if (data == nil or cardWindowTopContentView == nil) then
        return
    end
    if (isPortrait) then
        cardWindowTopContentView:backgroundColor(0xEAEAEA, 1)
        cardWindowTopContentView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.877)
    else
        cardWindowTopContentView:backgroundColor(0x000000, 0)
        cardWindowTopContentView:frame(0, 0, 200 * scale, 336.8 * scale)
        cardWindowTopContentView:align(Align.RIGHT)
    end
end

local function setCardBlurViewViewSize(data, cardBlurView, isPortrait) --设置当前容器大小
    if (data == nil or cardBlurView == nil) then
        return
    end
    if (isPortrait) then
        cardBlurView:image(Data(OS_CARD_PORTRAIT_BG))
        cardBlurView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 1.0)
    else
    	cardBlurView:image(Data(OS_CARD_LANDSCAPE_BG))
        cardBlurView:frame(0, 0, 200 * scale, 336.8 * scale)
    end
end

local function setCardImageLayoutSize(data, index, cardImageLayout, cardImage, cardBgView, isPortrait)
    if (data == nil or cardImageLayout == nil or cardImage == nil or cardBgView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.sumHotspot == 2) then
            w = cardWindow.portraitWidth * 0.276
            --            h = cardWindow.portraitHeight * 0.317
            h = w / 0.743
            y = cardWindow.portraitHeight * 0.086
            if (index == 1) then
                x = cardWindow.portraitWidth * 0.205
            else
                x = cardWindow.portraitWidth * 0.520
            end
        else
            w = cardWindow.portraitWidth * 0.276
            --            h = cardWindow.portraitHeight * 0.317
            h = w / 0.743
            y = cardWindow.portraitHeight * 0.086
            if (index == 1) then
                x = cardWindow.portraitWidth * 0.057
            elseif index == 2 then
                x = cardWindow.portraitWidth * 0.363
            else
                x = cardWindow.portraitWidth * 0.667
            end
        end
    else
        if (cardWindow.sumHotspot == 2) then
            w = 78.2 * scale
            h = 105.2 * scale
            y = 42 * scale
            if (index == 1) then
                x = 17.6 * scale
            elseif (index == 2) then
                x = 105.6 * scale
            end
        else
            w = 85.2 * scale
            h = 114.4 * scale
            y = 29 * scale
            if (index == 1) then
                x = 14.9 * scale
                y = 39 * scale
            elseif index == 2 then
                x = 57.5 * scale
                y = 29 * scale
            else
                x = 100.1 * scale
                y = 39 * scale
            end
        end
    end

    cardImageLayout:frame(x, y, w, h)
    cardImage:frame(scale, scale, w - 2 * scale, h - 2 * scale)
    cardBgView:frame(0, 0, w, h)
    --    cardImage:cornerRadius(5 * scale)
end

local function setCardBottomViewSize(data, cardBottomView, cardFlexView, cardProgressView, cardFlexLabel, isPortrait) --设置当前容器大小
    if (data == nil or cardBottomView == nil or cardFlexView == nil or cardFlexLabel == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    local corner = 0
    if (isPortrait) then
        cardBottomView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
        cardBottomView:align(Align.BOTTOM)
        cardFlexView:frame(0, 0, cardWindow.portraitWidth * cardWindow.hotspotRatio, cardWindow.portraitHeight * 0.123)
        cardProgressView:frame(cardWindow.portraitWidth * cardWindow.hotspotRatio - 1, 0, cardWindow.portraitHeight * 0.123 * 52.0 / 76.0, cardWindow.portraitHeight * 0.123)
        cardFlexLabel:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
    else
        cardBottomView:frame(0, 0, 200 * scale, 38.3 * scale)
        cardBottomView:align(Align.BOTTOM)
        cardFlexView:frame(0, 0, 200 * scale * cardWindow.hotspotRatio, 38.3 * scale)
        cardProgressView:frame(200 * scale * cardWindow.hotspotRatio - 1, 0, 38.3 * scale * 52.0 / 76.0, 38.3 * scale)
        cardFlexLabel:frame(0, 0, 200 * scale, 38.3 * scale)
    end
    -- cardFlexView:corner(0, 0, corner, corner, corner, corner, 0, 0)
end

local function setCardTitleViewSize(data, cardTitleView, isPortrait)
    if (data == nil or cardTitleView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.collectStatus == 3) then
            x = cardWindow.portraitWidth * 0.227
            y = cardWindow.portraitHeight * 0.643
            w = cardWindow.portraitWidth * 0.567
            h = cardWindow.portraitHeight * 0.136
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(15)
        else
            x = cardWindow.portraitWidth * 0.227
            w = cardWindow.portraitWidth * 0.567
            if (System.android()) then
                y = cardWindow.portraitHeight * 0.423
                h = cardWindow.portraitHeight * 0.136
            else
                y = cardWindow.portraitHeight * 0.408
                h = cardWindow.portraitHeight * 0.090
            end
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(15)
        end
    else
        if (cardWindow.collectStatus == 3) then
            x = 13.9 * scale
            y = 200.5 * scale
            w = 171 * scale
            h = 40 * scale
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(13)
        else
            x = 13.9 * scale
            y = 173.5 * scale
            w = 171 * scale
            h = 40 * scale
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(13)
        end
    end
    --    if (System.android()) then
    --        cardTitleView:margin(x, y, x, 0)
    --    else
    --        cardTitleView:frame(x, y, w, h)
    --    end
    cardTitleView:frame(x, y, w, h)
end

local function setCardContentImageView(data, cardContentImageView, cardContentImageShadowView, isPortrait)
    if (data == nil or cardContentImageView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.collectStatus == 3) then
            x = cardWindow.portraitWidth * 0.120
            y = cardWindow.portraitHeight * 0.207
            w = cardWindow.portraitWidth * 0.763
            h = w * 80.0 / 165.0 --cardWindow.portraitHeight * 0.316
        else
            x = cardWindow.portraitWidth * 0.187
            y = cardWindow.portraitHeight * 0.558
            w = cardWindow.portraitWidth * 0.628
            h = w * 80.0 / 165.0 --cardWindow.portraitHeight * 0.260
        end
        -- cardContentImageShadowView:backgroundColor(0xFF0000)
        cardContentImageShadowView:image(Data(OS_CARD_PORTRAIT_SHADOW))
        cardContentImageShadowView:frame((cardWindow.portraitWidth - 348 * scale) * 0.5, y + h - 8 * scale, 348 * scale, 16 * scale)
    else
        if (cardWindow.collectStatus == 3) then
            x = 17.7 * scale
            y = 96.5 * scale
            w = 165 * scale
            h = 80 * scale
        else
            x = 17.7 * scale
            y = 225.5 * scale
            w = 165 * scale
            h = 80 * scale
        end
        -- cardContentImageShadowView:backgroundColor(0xFF00FF)
        cardContentImageShadowView:image(Data(OS_CARD_LANDSCAPE_SHADOW))
        cardContentImageShadowView:frame(0 * scale, y + h - 6 * scale, 200 * scale, 12 * scale)
    end
    cardContentImageView:frame(x, y, w, h)
end

local function setCardCloseImageView(data, cardCloseLayout, cardCloseImageView, isPortrait)
    if (data == nil or cardCloseLayout == nil or cardCloseImageView == nil) then
        return
    end
    --    local x, y, w, h = 0, 0, 0, 0
    local size = cardWindow.portraitHeight * 0.083
    if (isPortrait) then
        --        x = 350 * scale
        --        y = 8 * scale
        --        w = 15 * scale
        --        h = 15 * scale
        cardCloseLayout:frame(0, 0, size, size)
        cardCloseImageView:frame(0, 0, 15 * scale, 15 * scale)
        cardCloseImageView:show()
        cardCloseLayout:align(Align.RIGHT)
        cardCloseImageView:align(Align.CENTER)
    else
        cardCloseImageView:hide()
    end
end

--屏幕旋转--
local function rotationScreen(isPortrait)
    setLuaViewSize(cardWindow.luaView, isPortrait)
    setCardViewSize(cardWindow.data, cardWindow.cardWindowView, isPortrait)
    setCardTopContentViewSize(cardWindow.data, cardWindow.cardWindowTopContentView, isPortrait)
    setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
    setCardBottomViewSize(cardWindow.data, cardWindow.cardBottomView, cardWindow.cardFlexView, cardWindow.cardProgressView, cardWindow.cardFlexLabel, isPortrait)
    setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
    if (cardWindow.collectStatus ~= 3) then
        if (cardWindow.cardImageLayout3 ~= nil) then
            cardWindow.cardImageLayout1:rotation(0)
            cardWindow.cardImageLayout3:rotation(0)
        end
        setCardImageLayoutSize(cardWindow.data, 1, cardWindow.cardImageLayout1, cardWindow.cardImageView1, cardWindow.cardBgView1, isPortrait)
        setCardImageLayoutSize(cardWindow.data, 2, cardWindow.cardImageLayout2, cardWindow.cardImageView2, cardWindow.cardBgView2, isPortrait)
        setCardImageLayoutSize(cardWindow.data, 3, cardWindow.cardImageLayout3, cardWindow.cardImageView3, cardWindow.cardBgView3, isPortrait)
        if (isPortrait == false and cardWindow.cardImageLayout3 ~= nil and cardWindow.sumHotspot >= 3) then
            cardWindow.cardImageLayout1:rotation(-10)
            cardWindow.cardImageLayout3:rotation(10)
        end
    end
    setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
    setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
end

local function registerMedia()
    local media = Media()
    -- body
    -- 注册window callback通知
    local callbackTable = {
        --0: 竖屏小屏幕，1 竖屏全凭，2 横屏全屏
        onPlayerSize = function(type)
            if (type == 0) then
                rotationScreen(true)
            elseif (type == 1) then
                rotationScreen(true)
            elseif (type == 2) then
                rotationScreen(false)
            end
        end
    }
    media:mediaCallback(callbackTable)
    return media
end

local function registerWindow()
    local nativeWindow = nil
    if System.ios() then
        nativeWindow = NativeWindow()
    else
        nativeWindow = nativeWindow
    end
    local callbackTable = {
        onShow = function()
            if (System.android()) then
                setBlurImage(cardWindow.cardBlurImageView, blurUrl)
            end
        end
    }
    if (nativeWindow == nil and System.android()) then
        nativeWindow = window
    end
    if (nativeWindow == nil) then
        return
    end
    nativeWindow:callback(callbackTable)
    return nativeWindow
end

--全局父控件
local function createLuaView(isPortrait)
    local luaView
    -- if System.android() then
    --     luaView = View()
    -- else
    --     luaView = ThroughView()
    -- end
    luaView = View()
    setLuaViewSize(luaView, isPortrait)
    return luaView
end

local function createCardView(data, isPortrait)
    local cardWindowView = View()

    setCardViewSize(data, cardWindowView, isPortrait)

    return cardWindowView
end

local function createCardTopContentView(data, isPortrait)
    local cardWindowTopContentView = View()
    setCardTopContentViewSize(data, cardWindowTopContentView, isPortrait)
    return cardWindowTopContentView
end

local function createCardBlurView(data, isPortrait)
    local cardBlurImageView = Image(Native)
    cardBlurImageView:scaleType(ScaleType.FIT_XY)
    setCardBlurViewViewSize(data, cardBlurImageView, isPortrait)
    return cardBlurImageView
end

--创建单个--
local function createCardImageItem()
    local cardImageLayout = View()
    local cardImageView = Image(Native)
    cardImageView:scaleType(ScaleType.FIT_XY)
    local cardBgView = Image(Native)
    cardBgView:image(Data(OS_ICON_CARD_IMAGE_BG))
    cardBgView:scaleType(ScaleType.FIT_XY)
    cardImageLayout:addView(cardImageView)
    cardImageLayout:addView(cardBgView)
    return cardImageLayout, cardImageView, cardBgView
end

local function createCardGroupView(data, isPortrait)
    local cardImageLayout1, cardImageView1, cardBgView1 = createCardImageItem()
    local cardImageLayout2, cardImageView2, cardBgView2 = createCardImageItem()
    local cardImageLayout3, cardImageView3, cardBgView3
    if (cardWindow.sumHotspot == 3) then
        cardImageLayout3, cardImageView3, cardBgView3 = createCardImageItem()
    end
    setCardImageLayoutSize(data, 1, cardImageLayout1, cardImageView1, cardBgView1, isPortrait)
    setCardImageLayoutSize(data, 2, cardImageLayout2, cardImageView2, cardBgView2, isPortrait)
    setCardImageLayoutSize(data, 3, cardImageLayout3, cardImageView3, cardBgView3, isPortrait)
    return cardImageLayout1, cardImageView1, cardBgView1, cardImageLayout2, cardImageView2, cardBgView2, cardImageLayout3, cardImageView3, cardBgView3
end

local function createCardBottomView(data, isPortrait)
    local cardBottomView = GradientView()
    cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_3, OS_CARD_GRADIENT_COLOR_3)

    local cardFlexView = GradientView()
	cardFlexView:gradient(OS_CARD_GRADIENT_COLOR_1, OS_CARD_GRADIENT_COLOR_2)

	local cardProgressView = Image(Native)
    cardProgressView:image(Data(OS_CARD_PROGRESS_BG))
    cardProgressView:scaleType(ScaleType.FIT_XY)

    local text = "运气真好，还差" .. tostring(cardWindow.sumHotspot - cardWindow.collectCount) .. "张就成功啦"
    local cardFlexLabel = Label(Native)
    cardFlexLabel:text(text)
    cardFlexLabel:textColor(0xFFFFFF)
    cardFlexLabel:textAlign(TextAlign.CENTER)

    -- setCardBottomViewSize(data, cardBottomView, cardFlexView, cardProgressView, cardFlexLabel, isPortrait)

    return cardBottomView, cardFlexView, cardProgressView, cardFlexLabel
end

local function createCardCloseImageView(data, isPortrait)
    local cardCloseLayout = View()
    cardCloseLayout:align(Align.RIGHT)
    local cardCloseImageView = Image(Native)
    cardCloseImageView:align(Align.CENTER)
    cardCloseImageView:scaleType(ScaleType.FIT_XY)
    cardCloseImageView:image(Data(OS_ICON_WEDGE_CLOSE))
    cardCloseImageView:hide()
    setCardCloseImageView(data, cardCloseLayout, cardCloseImageView, isPortrait)
    cardCloseLayout:addView(cardCloseImageView)
    return cardCloseLayout, cardCloseImageView
end

local function createTitleView(data, isPortrait)
    local cardTitleLabel = Label(Native)
    cardTitleLabel:textAlign(TextAlign.CENTER)
    cardTitleLabel:lines(2)
    cardTitleLabel:text("")
    setCardTitleViewSize(data, cardTitleLabel, isPortrait)
    return cardTitleLabel
end

local function createCardContentImageView(data, isPortrait)
    local cardContentImageView = Image(Native)
    cardContentImageView:scaleType(ScaleType.CENTER_CROP)

    local cardContentImageShadowView = Image(Native)
    cardContentImageShadowView:scaleType(ScaleType.CENTER_CROP)
    setCardContentImageView(data, cardContentImageView, cardContentImageShadowView, isPortrait)
    return cardContentImageView, cardContentImageShadowView
end

--未收集成功 默认无需处理
local function notCollectState(data)
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local collectTable = dataTable.collect
    if (collectTable == nil) then
        return
    end
    -- print("LuaView notCollectState "..Native:tableToJson(dataTable))
    local contentImageUrl = collectTable.imageUrl
    if (contentImageUrl ~= nil) then
        cardWindow.cardContentImageView:image(contentImageUrl)
    end
    local content = collectTable.content
    if content ~= nil then
        cardWindow.cardTitleLabel:text(content)
    else
        cardWindow.cardTitleLabel:text("")
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil) then
        return
    end
    -- print("LuaView hotspotArrayTable "..Native:tableToJson(hotspotArrayTable))
    if (cardWindow.isHotOrder1) then
        local HotOrderTable = hotspotArrayTable[1]
        if (HotOrderTable == nil or cardWindow.cardImageView1 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 1) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView1, alphaTime)
            end
            cardWindow.cardImageView1:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView1 ~= nil) then
            cardWindow.cardImageView1:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView1:hide()
        end
    end

    if (cardWindow.isHotOrder2) then
        local HotOrderTable = hotspotArrayTable[2]
        if (HotOrderTable == nil or cardWindow.cardImageView2 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 2) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView2, alphaTime)
            end
            cardWindow.cardImageView2:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView2 ~= nil) then
            cardWindow.cardImageView2:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView2:hide()
        end
    end

    if (cardWindow.isHotOrder3) then
        local HotOrderTable = hotspotArrayTable[3]
        if (HotOrderTable == nil or cardWindow.cardImageView3 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 3) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView3, alphaTime)
            end
            cardWindow.cardImageView3:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView3 ~= nil) then
            cardWindow.cardImageView3:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView3:hide()
        end
    end
end

--收集成功 未领取
local function collectState(data)
	if System.ios() then
	    cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, 1.0, 0.0, 0.5, 1.0, 0.5)
	else
		cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2,1.0)
	end
    cardWindow.cardFlexView:hide()
    cardWindow.cardProgressView:hide()
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local collectTable = dataTable.collect
    if (collectTable == nil) then
        return
    end
    local btnTitle = collectTable.btnTitle
    if (btnTitle ~= nil) then
        cardWindow.cardFlexLabel:text(btnTitle)
    end
    local content = collectTable.content
    if content ~= nil then
        cardWindow.cardTitleLabel:text(content)
    else
        cardWindow.cardTitleLabel:text("")
    end

    local imageUrl = collectTable.imageUrl
    if (imageUrl ~= nil) then
        cardWindow.cardContentImageView:image(imageUrl)
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil) then
        return
    end
    if (cardWindow.isHotOrder1) then
        local HotOrderTable = hotspotArrayTable[1]
        if (HotOrderTable == nil or cardWindow.cardImageView1 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView1:image(imageUrl)
            if (cardWindow.hotspotOrder == 1) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView1, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView1 ~= nil) then
            cardWindow.cardImageView1:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView1:hide()
        end
    end

    if (cardWindow.isHotOrder2) then
        local HotOrderTable = hotspotArrayTable[2]
        if (HotOrderTable == nil or cardWindow.cardImageView2 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView2:image(imageUrl)
            if (cardWindow.hotspotOrder == 2) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView2, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView2 ~= nil) then
            cardWindow.cardImageView2:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView2:hide()
        end
    end

    if (cardWindow.isHotOrder3) then
        local HotOrderTable = hotspotArrayTable[3]
        if (HotOrderTable == nil or cardWindow.cardImageView3 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView3:image(imageUrl)
            if (cardWindow.hotspotOrder == 3) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView3, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView3 ~= nil) then
            cardWindow.cardImageView3:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView3:hide()
        end
    end

    --点击lua文件
    cardWindow.cardBottomView:onClick(function()
        --TODO领奖操作逻辑处理
        cardWindow.collectStatus = 3
        postUserCardInfo()
        local clickLinkUrl = getHotspotClickTrackLink(data, 1)
        if (clickLinkUrl ~= nil) then
            Native:get(clickLinkUrl)
        end
        if (cardWindow.launchPlanId ~= nil) then
            osTrack(cardWindow.launchPlanId, 3, 1)
        end
        if collectTable.linkType == 2 then
            Native:widgetEvent(eventTypeClick, cardWindow.id, adTypeName, actionTypeOpenUrl, collectTable.linkUrl)
            performWithDelay(function()
                closeView()
            end, 500)
            return
        end

        cardWindow.cardFlexLabel:text("确定")
        cardWindow.cardWindowTopContentView:removeAllViews()
        local isPortrait = Native:isPortraitScreen()
        setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
        setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
        setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
        setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseImageView)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)

        local successTable = dataTable.success
        if (successTable == nil) then
            return
        end

        cardWindow.cardBottomView:onClick(function()
            Native:widgetEvent(eventTypeClick, cardWindow.id, adTypeName, actionTypeGetItem, successTable.itemId)
            closeView()
        end)

        local title = successTable.title
        if (title ~= nil) then
            cardWindow.cardTitleLabel:text(title)
        end

        local imageUrl = successTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardContentImageView:image(imageUrl)
        end
    end)
end

local function successState(data)
	if System.ios() then
	    cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, 1.0, 0.0, 0.5, 1.0, 0.5)
	else
		cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2,1.0)
	end
    cardWindow.cardFlexView:hide()
    cardWindow.cardProgressView:hide()
    cardWindow.cardFlexLabel:text("确定") --写死？？？

    cardWindow.cardWindowTopContentView:removeAllViews()
    local isPortrait = Native:isPortraitScreen()
    setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
    setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
    setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
    setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseImageView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)
    cardWindow.cardTitleLabel:text("您已经领取过这套卡牌奖励哦") --写死？？？
    cardWindow.cardBottomView:onClick(function()
        closeView()
    end)
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local successTable = dataTable.success
    if (successTable == nil) then
        return
    end

    local successImageUrl = successTable.imageUrl
    if (successImageUrl ~= nil) then
        cardWindow.cardContentImageView:image(successImageUrl)
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil or cardWindow.hotspotOrder == nil) then
        return
    end
    local hotspotItemTable = hotspotArrayTable[cardWindow.hotspotOrder]
    if (hotspotItemTable == nil) then
        return
    end
    local imageUrl = hotspotItemTable.imageUrl
    if (imageUrl ~= nil) then
        setBlurImage(cardWindow.cardBlurImageView, imageUrl)
    end
end

local function onCreate(data)
    if (cardWindow.launchPlanId ~= nil) then
        osTrack(cardWindow.launchPlanId, 1, 1)
    end

    local isPortrait = Native:isPortraitScreen()
    cardWindow.media = registerMedia()
    cardWindow.window = registerWindow()
    cardWindow.luaView = createLuaView(isPortrait)

    cardWindow.cardWindowView = createCardView(data, isPortrait)
    cardWindow.cardWindowTopContentView = createCardTopContentView(data, isPortrait)
    cardWindow.cardBlurImageView = createCardBlurView(data, isPortrait)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)

    cardWindow.cardCloseLayout, cardWindow.cardCloseImageView = createCardCloseImageView(data, isPortrait)
    cardWindow.cardBottomView, cardWindow.cardFlexView, cardWindow.cardProgressView, cardWindow.cardFlexLabel = createCardBottomView(data, isPortrait)

    -- 首先判断状态
    if (cardWindow.collectStatus ~= 3) then
        cardWindow.cardImageLayout1, cardWindow.cardImageView1, cardWindow.cardBgView1, cardWindow.cardImageLayout2, cardWindow.cardImageView2, cardWindow.cardBgView2, cardWindow.cardImageLayout3, cardWindow.cardImageView3, cardWindow.cardBgView3 = createCardGroupView(data, isPortrait)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout1)
        if (cardWindow.sumHotspot == 3) then
            cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout3)
        end
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout2)
        if (isPortrait == false and cardWindow.sumHotspot >= 3) then
            cardWindow.cardImageLayout1:rotation(-10)
            cardWindow.cardImageLayout3:rotation(10)
        end
    end


    cardWindow.cardTitleLabel = createTitleView(data, isPortrait)
    cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView = createCardContentImageView(data, isPortrait)

    cardWindow.cardBottomView:addView(cardWindow.cardFlexView)
    cardWindow.cardBottomView:addView(cardWindow.cardProgressView)
    cardWindow.cardBottomView:addView(cardWindow.cardFlexLabel)

    cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseLayout)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageShadowView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)

    cardWindow.cardWindowView:addView(cardWindow.cardWindowTopContentView)

    cardWindow.cardWindowView:addView(cardWindow.cardBottomView)

    cardWindow.luaView:addView(cardWindow.cardWindowView)

    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if System.ios() then
            cardWindow.cardWindowView:y(math.max(screenWidth, screenHeight))
            startViewTranslationAnim(cardWindow.cardWindowView, 0, -cardWindow.portraitHeight)
        else
            cardWindow.cardWindowView:translation(0, 438 * scale)
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 0)
        end

    else
        if System.ios() then
            cardWindow.cardWindowView:x(math.max(screenWidth, screenHeight))
            startViewTranslationAnim(cardWindow.cardWindowView, -200 * scale, 0)
        else
            cardWindow.cardWindowView:translation(200 * scale, 0)
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 0)
        end
    end

    cardWindow.cardWindowView:onClick(function()
    end)

    cardWindow.cardCloseLayout:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 438 * scale, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)

    cardWindow.luaView:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 438 * scale, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        else
            startViewTranslationAnim(cardWindow.cardWindowView, 200 * scale, 0, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)
    --- -逻辑处理----
    ------ 状态判断--------
    if (cardWindow.collectStatus == 1) then
        notCollectState(data)
    elseif (cardWindow.collectStatus == 2) then
        collectState(data)
    else
        successState(data)
    end
    Native:widgetEvent(eventTypeShow, cardWindow.id, adTypeName, actionTypeNone, "")
    rotationScreen(Native:isPortraitScreen())
end

local function setConfig(data)
    if (data == nil) then
        return
    end
    cardWindow.data = data
    local sumHotspot = data.sumHotspot
    if (sumHotspot == nil) then
        sumHotspot = 2
    end
    local hotspotOrder = data.hotspotOrder
    if (hotspotOrder == nil) then
        hotspotOrder = 0
    end
    local screenWidth, screenHeight = System.screenSize()
    local videoWidth, videoHight, marginTop = Native:getVideoSize(0)
    cardWindow.portraitWidth = math.min(screenWidth, screenHeight) --宽
    cardWindow.portraitHeight = math.max(screenWidth, screenHeight) - videoHight - marginTop --高
    cardWindow.sumHotspot = sumHotspot
    cardWindow.hotspotOrder = hotspotOrder + 1 --当前热点序号
    cardWindow.hotspotRatio = 0.333 --收集占半分比
    cardWindow.collectStatus = 1
    cardWindow.collectCount = 1
    cardWindow.id = "os_card_window" .. tostring(data.id) .. tostring(data.hotspotOrder)
    cardWindow.launchPlanId = data.launchPlanId
    cardWindow.isHotOrder1 = false
    cardWindow.isHotOrder2 = false
    cardWindow.isHotOrder3 = false
    if data.data.userCardInfo ~= nil then
        -- print("LuaView os card window userCardInfo "..Native:tableToJson(data.data.userCardInfo))
        cardWindow.userCardInfo = data.data.userCardInfo
        if cardWindow.hotspotOrder == 1 then
            cardWindow.userCardInfo.isHotOrder1 = true
        elseif cardWindow.hotspotOrder == 2 then
            cardWindow.userCardInfo.isHotOrder2 = true
        elseif cardWindow.hotspotOrder == 3 then
            cardWindow.userCardInfo.isHotOrder3 = true
        end

        cardWindow.collectStatus = cardWindow.userCardInfo.collectStatus
        cardWindow.isHotOrder1 = cardWindow.userCardInfo.isHotOrder1
        cardWindow.isHotOrder2 = cardWindow.userCardInfo.isHotOrder2 --是否收集状态
        cardWindow.isHotOrder3 = cardWindow.userCardInfo.isHotOrder3
        cardWindow.collectStatus = checkCollectStatus()
        if cardWindow.userCardInfo.collectStatus == 1 then
            postUserCardInfo()
        end
        if (cardWindow.collectStatus == 2) then
            local showLinkUrl = getHotspotExposureTrackLink(data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (cardWindow.launchPlanId ~= nil) then
                osTrack(cardWindow.launchPlanId, 2, 1)
            end
        end
    else
        if cardWindow.hotspotOrder == 1 then
            cardWindow.isHotOrder1 = true
        elseif cardWindow.hotspotOrder == 2 then
            cardWindow.isHotOrder2 = true
        elseif cardWindow.hotspotOrder == 3 then
            cardWindow.isHotOrder3 = true
        end
        postUserCardInfo()
    end
    if (cardWindow.sumHotspot == 2) then
        if cardWindow.collectCount < 2 then
            cardWindow.hotspotRatio = cardWindow.collectCount / 2.0
        end
    elseif (cardWindow.sumHotspot == 3) then
        if cardWindow.collectCount < 3 then
            cardWindow.hotspotRatio = cardWindow.collectCount / 3.0
        end
    end
--     cardWindow.collectStatus = 3 --1.收集未成功 2.收集成功 3.领取成功
    -- if (cardWindow.collectStatus == 1) then
    -- cardWindow.isHotOrder1 = false
    -- cardWindow.isHotOrder2 = true --是否收集状态
    -- cardWindow.isHotOrder3 = false
    -- else
    --     cardWindow.isHotOrder1 = true
    --     cardWindow.isHotOrder2 = true --是否收集状态
    --     cardWindow.isHotOrder3 = true
    -- end
end

function show(args)
    if (args == nil or args.data == nil or cardWindow.luaView ~= nil) then
        return
    end
    cardWindow.request = HttpRequest()
    setConfig(args.data)

    onCreate(args.data)
    -- postUserCardInfo()
end

