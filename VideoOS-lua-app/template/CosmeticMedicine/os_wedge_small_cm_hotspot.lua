--中插--
require "os_config"
require "os_string"
require "os_constant"
require "os_util"
require "os_track"
wedge = object:new()
local adTypeName = "wedge"
local scale = getScale()
local OS_ICON_NO_VOICE = "iVBORw0KGgoAAAANSUhEUgAAAC8AAAAqCAYAAAAj6gIfAAAABHNCSVQICAgIfAhkiAAAA+pJREFUWIXVmU1oXVUQx3+TpGlMTGsbqpZKUUgbIxK1dVGKC7HSRREVRahUEHUrXRTdKWgRP1KEgKuCq1qXFYXQRYi6UQrFLtxoGsEiiKLQWqxN0qbJz8W5L7l9H758vPte/K/e486Z+c+cOXNm7oX/MaIIpWpP9nMqIizCBkBHI5VlpB8GHgFmgNPAj420UQjUu9W31V9NmFZH1Ftbza0m1FB3q5+qV7wZp9V7irK9qrRRO4D9wOvAHqCrTGQjUFjkV0xe7QSeA94B7qqhqw1oX6mNelgRebUbeAs4QoHk6mFZ5NV1QD8wQkqXlqJtqYLqBuAAcII1QBxykc9yeADYAfRS6dggKce3N41dHXQAqJuAF4BnSYevh8rbtxfobiq7OuhQ15NK3SvAFgpqGUpQNwMHSWX0M2CyXguh7gX2Ad8D4xExVXqwX/3HYnBGfTBHolN9Q72cXWhn1KE6xJ9Sf8vkf1GfVqP08OuCiFcj361+WSYzoQ5UId2uPq/eyMnOm5zvgXQody1luxuEG8C3pKathAHgC3VIbcuI30IqDh+xeI8IXAJ+WlhfYNQrIp/Z266eUq+WyZ5V96q96iF1Mot0KeIX1WF1S15Zs8mHOqh+UubAbObAsHo+R1xTvh9Vt1KmrKnkyxw4ZWqd8w5MlRGfU99Vb69IwlaQzzkwoI5686HMY840I/RV09Ey8jn729RzNdYfc3GkrMCSe5sioLaT5oAdNUQOAJtqrW8ZebWLVA5HqD2w3AeMmSujebSEvGkeeAI4CmwjtSQCV4BJYDonPgh8DOwud6Dp5LOIP0MaZvpZ7KWuAseBV4FRYCq37CHgGPBolmoLypp2YNU2dZ/6g9XL4Z2mKjRkKqPXczLX1HH1gTz5vJKiyXepJ6sQf99cOXSxjH5Vpm9GPWzaPdqAvxqTEEtCkOaCUqrMA8PABxFxcUEowog4D7wInM2t7yT1OqmFNm1PUdGvljaPqxfUP9U3TeNlTZg60c9NbfSYen/+4Z5MUeHkM3uhbla3mj98/+1Au3qHqUotoA04B7wHXMi2sVBkKXEpIn6PiLklrpmLiD8WJqgMHRExqx4HfiaVsJ3ABirHwY2kMXHd6l1oDDoAImJKHQW+I10a3VSS7wNeBh4D1jeT5KqR5d296onV5HwjseQbNsu7CeAw8CGlctVCLLs9iIjLEfEa6VXJJVroxGp6m5PAS8AEMNsYOsvDislHxCzps80R4BvgWhUxWQPpVRPZpbPL9GVkuuzAjqs7W82xLtR+0+Q/kxGfNzVh1efPtQa1Tz1o6kHG1CetMgE1Cg1/qWr6TnVb9vfviLjeaBsl/AswcLO5gs9JGQAAAABJRU5ErkJggg=="
local OS_ICON_VOICE = "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAqCAYAAAAnH9IiAAAABHNCSVQICAgIfAhkiAAABEVJREFUWIXtmFuIlVUUx3/rOKOOlyHNTFNDpKSbpRIlRQkqFlZ0oZdAsBsEPRhF1lNUZJH1EvQQ0kvQS7eXbg+JZFFqJpVdDCUVL5RoiqZpXufXw/5O7jlzRp2Z78zxoT98sC9rr/3f+9t7rbUX/I8EtU1tV6MR+ktVqg4CLgNuBsYCy4AvI8Iy5ykN6kj1QXWNesyE79UxzeZWF+oE9UV1q3rSU9itzip7vpa+DC7O7OXA88Ac4Lw6+sf2ZY566BNp4CbgDeASYGCd/gBa+zhHF/SKtDoYeAh4rbc6+oIeTagOAC4GngIW9HR8WTjrSdU24HrgSWA2MLhMImoL6ZhdBOyKiPXdybZkgwYWgyYD7cCAGtnxwL3AlXX6ysBU4BlgBrBJfToivu6WtDoCmA/cRfr9Q4FKjWwbaTGNwhTgWmB08S1WH4uIH7tIqoPUl9RdaoflYp96f505u3hidbr6TcbhqPq+Oq5WtgLMBBYWq2tIrFBDbgHwnbpMvSLr+gl4FdhZ1FuBWcB99ZSsKHl3u91pdbLJtVvs6Fp1Ug2fR9VDmY6V6vRcpgJ0amgwjgB/AR2kv3o18IJ6fiazFMgv4DRgnslQAIl0Iy9XJ0TEduBNYEfRNJDkVW83+QAi4iTwHHCokGkjbeyEqp5aC9EfeJfkSavh6jhgHsk+AxARq4FV2ZipJHMMNIF0sZNvkS5elcMUUuCV46OsPB6YpLZWB/Q7ImI/8F7WNBGYVCO2Miu3AhdSeOGmkC7wRVYeDIwyvXyq2Av8ndVHAoOguaR/z8pBMgh5PHOCRLyKEZwDpEfU1P8Bjmf1CjAsqx8mLaSppK/JyieAfSQ7XsVQOr+E9lb7m0LaFIbOz5r+ALZFREfWNo1T0WQHsJtmkgbmAjdm9Q3AxhqZ27Lyn8B24Bgk0v2ak1CvAp4leTpIbv0rYHMmMxq4JRv2K7C5mj+pAPv7hW0i004iPK3aBKwHPoiIo5noImBUJvMzsKXaWQFW0H+7PRG4lPT4ENgGvBwRGyDF2ep1wCMkMyjp6HwWEQdz0q8Ae/qJ9CZSTLEd+A1YEhEfVwmTXPnrJMsB6eItp7MjArVVfVzdYufsUOnxdDHfcHVusaN5+wT1HfVIMfaEulqdUbvylog4ri4lnZk7SQnEdrpaliHAGAqv1FsUv3lZna6ZwA2Z/q3AEmBNF9KFosPqJ8C3pIhqSB3Sw4G7gXtoTAy+CzhAOscHSTH1p/Uyrv+lEIqQcSen3midoFaAdSQj/zApgCkTq4EnSLHzL8DnEXH89EPOEsWZXFic1x6f6TPoHmBKyDfG6alzTKnc013eHpE+W/R6RRGxHLgVWAscPYN4qejrb/gBeAD4kOSOayEp2Dn3UNjYxeqOmuOxR72j2fy6hXqBKdGyMTvnO9TJzeZ2WqjD1Nnq2+o6dZHFC7pMlJ67MyVdhpPeewci4nDZc/wLE5dmHzJCOVcAAAAASUVORK5CYII="
local OS_ICON_WEDGE_CLOSE = "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"
local OS_ICON_WEDGE_BACK = ""
local OS_ICON_BUBBLE_PROMPT_LEFT = ""
local OS_WEDGE_BACKGROUND = ""
local OS_WEDGE_BORDER_COLOER = 0xFC68A4

local function getHotspotExposureTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.hotspotTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.exposureTrackLink
end

local function getHotspotClickTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.hotspotTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.clickTrackLink
end

local function closeWedge()
    if (wedge.mediaPlayer ~= nil) then
        wedge.mediaPlayer:stopPlay()
    end
    if Native:getCacheData(wedge.id) == tostring(eventTypeShow) then
        Native:widgetEvent(eventTypeClose, wedge.id, adTypeName, actionTypePlayVideo, "")
        Native:deleteBatchCacheData({ wedge.id })
    end
    Native:destroyView()
end

local function wedgeConfig(data)
    if (data == nil) then
        wedge.videoDuration = 0
        wedge.closeAfter = 0
        wedge.isShowClose = false
        wedge.isShowAds = false
        wedge.needflush = false
        wedge.mediaPlayPaused = false
        return
    end
    local contentDataTable = data.data
    if (contentDataTable == nil) then
        wedge.videoDuration = 0
        wedge.closeAfter = 0
        wedge.isShowClose = false
        wedge.isShowAds = false
        wedge.needflush = false
        wedge.mediaPlayPaused = false
        return
    end
    wedge.videoDuration = contentDataTable.videoDuration
    wedge.videoDuration = 0
    wedge.isShowClose = contentDataTable.isShowClose
    wedge.isShowAds = contentDataTable.isShowAds
    if (contentDataTable.closeAfter ~= nil) then
        wedge.closeAfter = contentDataTable.closeAfter
    else
        wedge.closeAfter = -1
    end
    if (wedge.isShowClose) then
        if (wedge.isShowAds == true and wedge.closeAfter > 0) then
            wedge.timerType = 1
        elseif (wedge.isShowAds == false and wedge.closeAfter > 0) then
            wedge.timerType = 2
        else
            wedge.timerType = -1
        end
    else
        wedge.timerType = -1
    end
    wedge.needflush = false
    wedge.mediaPlayPaused = false

    --    wedge.isShowClose = true
    --    wedge.isShowAds = true
    --    wedge.isShowCountdown = false
    --    wedge.timerType = 1
    --    wedge.closeAfter = 10
end

local function wedgeID(data)
    if (data == nil) then
        return nil
    end
    return data.id
end

local function wedgeLinkUrl(data)
    if (data == nil) then
        return nil
    end
    local dataTable = data.data
    if (dataTable == nil) then
        return nil
    end
    local link = dataTable.linkUrl
    if (link ~= nil and string.match(tostring(link), "http") == "http") then
        return link
    else
        return nil
    end
end

local function getWedgeUrl(data)
    if (data == nil) then
        return nil
    end
    local contentDataTable = data.data
    if (contentDataTable == nil) then
        return nil
    end
    return contentDataTable.videoUrl
end

local function getVideoDuration(data)
    if (data == nil) then
        return 0
    end
    local contentDataTable = data.data
    if (contentDataTable == nil) then
        return 0
    end
    local _videoUrlTable = contentDataTable._videoUrl
    if (_videoUrlTable == nil) then
        return 0
    end
    local duration = _videoUrlTable.duration
    if (duration == nil) then
        return 0
    end
    return duration * 1000
end

--延时回调--
local function performWithDelay(callback, delay)
    if callback ~= nil and delay ~= nil then
        local timer = Timer()
        timer:interval(delay)
        timer:repeatCount(false)
        timer:delay(delay / 1000)
        timer:callback(callback)
        timer:start()
        return timer
    end
end

local function getLandscapeLocation(data) --获取竖屏位置
    if (data == nil) then
        return 0, 0, 0, 0
    end
    local contentDataTable = data.data
    if (contentDataTable == nil) then
        return 0, 0, 0, 0
    end
    if (wedge.landscapeWidth ~= nil and wedge.landscapeHeight ~= nil and wedge.landscapeX ~= nil and wedge.landscapeY ~= nil) then
        return wedge.landscapeX, wedge.landscapeY, wedge.landscapeWidth, wedge.landscapeHeight
    end
    local screenWidth, screenHeight = System.screenSize()
    local width = 0
    local height = 0
    local x = 0
    local y = 0
    local scaleWidth = contentDataTable.width
    if (scaleWidth ~= nil) then
        width = math.max(screenWidth, screenHeight) * scaleWidth
    end
    local ratio = contentDataTable.ratio
    if (ratio ~= nil) then
        height = math.min(screenWidth, screenHeight) * ratio
    end
    local scaleX = contentDataTable.positionX
    if (scaleX ~= nil) then
        x = math.max(screenWidth, screenHeight) * scaleX
    end
    local scaleY = contentDataTable.positionY
    if (scaleY ~= nil) then
        y = math.min(screenWidth, screenHeight) * scaleY
    end
    wedge.landscapeX = x
    wedge.landscapeY = y
    wedge.landscapeWidth = width
    wedge.landscapeHeight = height
    return wedge.landscapeX, wedge.landscapeY, wedge.landscapeWidth, wedge.landscapeHeight
end

local function getPortraitLocation(data) --获取竖屏位置
    if (data == nil) then
        return 0, 0, 0, 0
    end
    local contentDataTable = data.data
    if (contentDataTable == nil) then
        return 0, 0, 0, 0
    end
    if (wedge.portraitWidth ~= nil and wedge.portraitHeight ~= nil and wedge.portraitX ~= nil and wedge.portraitY ~= nil) then
        return wedge.portraitX, wedge.portraitY, wedge.portraitWidth, wedge.portraitHeight
    end
    local screenWidth, screenHeight = System.screenSize()
    local videoWidth, videoHight, originY = Native:getVideoSize(0)
    --忽略originY，已经设置luaview originY
    originY = 0
    local scaleW = math.min(screenWidth, screenHeight) / math.max(screenWidth, screenHeight)
    local scaleH = videoHight / math.min(screenWidth, screenHeight)
    local width = 0
    local height = 0
    local x = 0
    local y = 0
    local scaleWidth = contentDataTable.width
    if (scaleWidth ~= nil) then
        width = math.max(screenWidth, screenHeight) * scaleWidth * scaleW
    end
    local ratio = contentDataTable.ratio
    if (ratio ~= nil) then
        height = math.min(screenWidth, screenHeight) * ratio * scaleH
    end
    local scaleX = contentDataTable.positionX
    if (scaleX ~= nil) then
        x = math.max(screenWidth, screenHeight) * scaleX * scaleW
    end
    local scaleY = contentDataTable.positionY
    if (scaleY ~= nil) then
        y = math.min(screenWidth, screenHeight) * scaleY * scaleH
    end
    wedge.portraitX = x
    wedge.portraitY = y + originY
    wedge.portraitWidth = width
    wedge.portraitHeight = height
    return wedge.portraitX, wedge.portraitY, wedge.portraitWidth, wedge.portraitHeight
end

local function getLocation(data, isPortrait)
    if (isPortrait) then
        return getPortraitLocation(data)
    else
        return getLandscapeLocation(data)
    end
end

function getMediaPlayerLocation(data, isPortrait)
    local x = 44 * scale
    local y = 46 * scale
    local width = 1
    local height = 1
    local screenWidth, screenHeight = System.screenSize()
    local videoWidth, videoHight, originY = Native:getVideoSize(0)
    if isPortrait then
        local scaleW = math.min(screenWidth, screenHeight) / math.max(screenWidth, screenHeight)
        local scaleH = videoHight / math.min(screenWidth, screenHeight)
        height = math.min(screenWidth, screenHeight) * scaleH - y * 2
        width = height * 16.0 / 9.0;
        x = (math.max(screenWidth, screenHeight) * scaleW - width) * 0.5
    else
        height = math.min(screenWidth, screenHeight) - y * 2
        width = height * 16.0 / 9.0;
        x = (math.max(screenWidth, screenHeight) - width) * 0.5
    end
    return x, y, width, height
end

--延时回调设置
local function performWithRepeatCount(callback, repeatCount)
    if (repeatCount == nil or callback == nil) then
        return
    end
    local timer = Timer()
    timer:repeatCount(repeatCount)
    timer:delay(1)
    timer:callback(callback)
    timer:start()
    return timer
end

--情况三 播放器倒计时+广告标识+关闭按钮
local function setDownType3Size(downParentView, downView, downLabel, lineView, adLabel, downCloseView, downCloseImage, isPortrait)
    local downTop = 0
    local parentW = 0
    local parentH = 0
    local downW = 94 * scale
    local downH = 30 * scale
    local corner = 15 * scale
    if (isPortrait) then
        parentW = 138 * scale
        parentH = 42 * scale
        downTop = 12 * scale
    else
        parentW = 140 * scale
        parentH = 44 * scale
        downTop = 14 * scale
    end
    downParentView:frame(0, 0, parentW, parentH)
    downView:frame(0, downTop, downW, downH)
    -- downView:corner(corner, corner, 0, 0, 0, 0, corner, corner)
    downLabel:frame(6 * scale, 0, downH, downH)

    lineView:frame(39.3 * scale, 6.85 * scale, scale, 16.3 * scale)
    adLabel:frame(54 * scale, 0, 37 * scale, 30 * scale)

    downCloseView:frame(96 * scale, downTop, 30 * scale, 30 * scale)
    -- downCloseView:corner(0, 0, corner, corner, corner, corner, 0, 0)
    downCloseImage:frame(10 * scale, 10 * scale, 9.6 * scale, 9.6 * scale)

    downParentView:alignRight()
end

--情况四 播放器倒计时+关闭按钮
local function setDownType4Size(downParentView, downView, downLabel, downCloseView, downCloseImage, isPortrait)
    local downTop = 0
    local parentW = 0
    local parentH = 0
    local downW = 30 * scale
    local downH = 30 * scale
    local corner = 15 * scale
    if (isPortrait) then
        parentW = 74 * scale
        parentH = 42 * scale
        downTop = 12 * scale
    else
        parentW = 76 * scale
        parentH = 44 * scale
        downTop = 14 * scale
    end
    downParentView:frame(0, 0, parentW, parentH)
    downView:frame(0, downTop, downW, downH)
    -- downView:corner(corner, corner, 0, 0, 0, 0, corner, corner)
    downLabel:frame(0 * scale, 0, downH, downH)

    downCloseView:frame(32 * scale, downTop, 30 * scale, 30 * scale)
    -- downCloseView:corner(0, 0, corner, corner, corner, corner, 0, 0)
    downCloseImage:frame(10 * scale, 10 * scale, 9.6 * scale, 9.6 * scale)

    downParentView:alignRight()
end

--倒计时+关闭倒计时+关闭按钮切换状态
local function changeStatusType5(downParentView, downView, downLabel, lineView, adsLabel, downAdsLabel, line2View, downCloseView, downCloseImage, isPortrait)
    if (lineView ~= nil and lineView:isShow()) then
        lineView:hide()
    end
    if (downAdsLabel ~= nil and downAdsLabel:isShow()) then
        downAdsLabel:hide()
    end
    if (downCloseView ~= nil) then
        downCloseView:show()
    end
    setDownType4Size(downParentView, downView, downLabel, downCloseView, downCloseImage, isPortrait)
end

--倒计时+关闭倒计时+关闭按钮切换状态
local function changeStatusType6(downParentView, downView, downLabel, lineView, adsLabel, downAdsLabel, line2View, downCloseView, downCloseImage, isPortrait)
    if (downAdsLabel ~= nil and downAdsLabel:isShow()) then
        downAdsLabel:hide()
    end
    if (line2View ~= nil and line2View:isShow()) then
        line2View:hide()
    end
    if (downCloseView ~= nil) then
        downCloseView:show()
    end
    setDownType3Size(downParentView, downView, downLabel, lineView, adsLabel, downCloseView, downCloseImage, isPortrait)
end

local function performWithShutDownTimer(videoDuratimeTime) --根据关闭时间倒计时
    if (videoDuratimeTime == nil) then
        return
    end
    local repeatRerecordNum = 0 --记录重复次数
    local needChangeStatu = false
    wedge.timer = performWithRepeatCount(function()
        if (wedge.mediaPlayPaused) then
            return
        end
        repeatRerecordNum = repeatRerecordNum + 1
        wedge.countDownLabel:text(tostring(videoDuratimeTime - repeatRerecordNum))
        if (videoDuratimeTime - repeatRerecordNum <= 0) then --执行结束操作
            wedge.timer:cancel()
            return
        end
        if (wedge.timerType == -1) then
            return
        end
        if (wedge.closeAfter - repeatRerecordNum > 0 and wedge.countDownLabel ~= nil) then
            wedge.countDownAdsLabel:text(tostring(wedge.closeAfter - repeatRerecordNum) .. "s后可关闭广告")
        end
        if (wedge.closeAfter - repeatRerecordNum <= 0 and needChangeStatu == false) then --刷新情况 5，6
            if (wedge.timerType == 2) then
                changeStatusType5(wedge.countDownParentView, wedge.countDownView, wedge.countDownLabel, wedge.countDownLineView, wedge.downAdsLabel, wedge.countDownAdsLabel, wedge.countDownLine2View, wedge.countDownCloseView, wedge.countDownCloseImage, Native:isPortraitScreen())
            else
                changeStatusType6(wedge.countDownParentView, wedge.countDownView, wedge.countDownLabel, wedge.countDownLineView, wedge.downAdsLabel, wedge.countDownAdsLabel, wedge.countDownLine2View, wedge.countDownCloseView, wedge.countDownCloseImage, Native:isPortraitScreen())
            end
            needChangeStatu = true
        end
    end, videoDuratimeTime)
    if (videoDuratimeTime <= 0) then
        wedge.timer:cancel()
    end
    --设置视频倒计时 关闭倒计时默认值
    if (wedge.timerType ~= -1 and wedge.countDownAdsLabel ~= nil) then
        wedge.countDownAdsLabel:text(tostring(wedge.closeAfter) .. "s后可关闭广告")
    end
    wedge.countDownLabel:text(tostring(videoDuratimeTime))
end

local function setLuaViewSize(luaview, luaviewBack, isPortrait) --设置当前容器大小
    if (luaview == nil or luaviewBack == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        local videoWidth, videoHight, y = Native:getVideoSize(0)
        if System.android() then
            y = 0.0
        end
        luaview:frame(0, y, math.min(screenWidth, screenHeight), videoHight)
        luaviewBack:frame(0, 0, math.min(screenWidth, screenHeight), videoHight)
        if System.android() then
            luaview:align(Align.TOP) --RIGHT
        end
    else
        luaview:frame(0, 0, math.max(screenWidth, screenHeight), math.min(screenWidth, screenHeight))
        luaviewBack:frame(0, 0, math.max(screenWidth, screenHeight), math.min(screenWidth, screenHeight))
        if System.android() then
            luaview:align(Align.RIGHT) --RIGHT
        end
    end
end

local function setBackViewSize(backView, isPortrait) --设置返回区域大小
    if (backView == nil) then
        return
    end
    local x, y, w, h = getLocation(wedge.data, isPortrait)
    if (isPortrait) then
        local scale13 = 13 * scale
        backView:xy(scale13, scale13 + y)
    else
        backView:xy(17 * scale, 14 * scale + y)
    end
end

--情况一 只显示播放器倒计时
local function setDownType1Size(downParentView, downView, downLabel, isPortrait)
    local downTop = 0
    local parentSize = 0
    local downSize = 30 * scale
    if (isPortrait) then
        parentSize = 42 * scale
        downTop = 12 * scale
    else
        parentSize = 44 * scale
        downTop = 14 * scale
    end
    downParentView:frame(0, 0, parentSize, parentSize)
    downView:frame(0, downTop, downSize, downSize)
    -- downView:corner(20 * scale, 20 * scale, 20 * scale, 20 * scale, 20 * scale, 20 * scale, 20 * scale, 20 * scale)
    downLabel:frame(0, 0, downSize, downSize)
    downParentView:alignRight()
end

--情况二 播放器倒计时+广告标识
local function setDownType2Size(downParentView, downView, downLabel, lineView, adLabel, isPortrait)
    local downTop = 0
    local parentW = 0
    local parentH = 0
    local downW = 94 * scale
    local downH = 30 * scale
    local corner = 15 * scale
    if (isPortrait) then
        parentW = 106 * scale
        parentH = 42 * scale
        downTop = 12 * scale
    else
        parentW = 108 * scale
        parentH = 44 * scale
        downTop = 14 * scale
    end
    downParentView:frame(0, 0, parentW, parentH)
    downView:frame(0, downTop, downW, downH)
    -- downView:corner(corner, corner, corner, corner, corner, corner, corner, corner)
    downLabel:frame(6 * scale, 0, downH, downH)

    lineView:frame(39.3 * scale, 6.85 * scale, scale, 16.3 * scale)
    adLabel:frame(54 * scale, 0, 37 * scale, 30 * scale)

    downParentView:alignRight()
end

--情况五 播放器倒计时+关闭倒计时+关闭按钮
local function setDownType5Size(downParentView, downView, downLabel, lineView, downAdsLabel, downCloseView, downCloseImage, isPortrait)
    if (downCloseView ~= nil and downCloseView:isShow()) then
        downCloseView:hide()
    end
    local downTop = 0
    local parentW = 0
    local parentH = 0
    local downW = 143 * scale
    local downH = 30 * scale
    local corner = 15 * scale
    if (isPortrait) then
        parentW = 155 * scale
        parentH = 42 * scale
        downTop = 12 * scale
    else
        parentW = 157 * scale
        parentH = 44 * scale
        downTop = 14 * scale
    end
    downParentView:frame(0, 0, parentW, parentH)
    downView:frame(0, downTop, downW, downH)
    -- downView:corner(corner, corner, 0, 0, 0, 0, corner, corner)
    downLabel:frame(6 * scale, 0, downH, downH)

    downLabel:frame(0, 0, 33.3 * scale, 30 * scale)

    lineView:frame(33.3 * scale, 6.85 * scale, scale, 16.3 * scale)

    downAdsLabel:frame(40.5 * scale, 0, 129 * scale, 30 * scale)

    downParentView:alignRight()
end

--情况六 播放器倒计时+广告标识+关闭倒计时+关闭按钮
local function setDownType6Size(downParentView, downView, downLabel, lineView, adsLabel, downAdsLabel, line2View, downCloseView, downCloseImage, isPortrait)
    if (downCloseView ~= nil and downCloseView:isShow()) then
        downCloseView:hide()
    end
    local downTop = 0
    local parentW = 0
    local parentH = 0
    local downW = 173 * scale
    local downH = 30 * scale
    local corner = 15 * scale
    if (isPortrait) then
        parentW = 185 * scale
        parentH = 42 * scale
        downTop = 12 * scale
    else
        parentW = 187 * scale
        parentH = 44 * scale
        downTop = 14 * scale
    end
    downParentView:frame(0, 0, parentW, parentH)
    downView:frame(0, downTop, downW, downH)
    -- downView:corner(corner, corner, 0, 0, 0, 0, corner, corner)

    downLabel:frame(0, 0, 33.3 * scale, 30 * scale)

    lineView:frame(33.3 * scale, 6.85 * scale, scale, 16.3 * scale)

    adsLabel:frame(40.5 * scale, 0, 30 * scale, 30 * scale)

    line2View:frame(70 * scale, 6.85 * scale, scale, 16.3 * scale)

    downAdsLabel:frame(77 * scale, 0, 150 * scale, 30 * scale)

    downParentView:alignRight()
end

--设置右边布局大小
local function setCountDownViewSize(downParentView, downView, downLabel, lineView, adsLabel, downAdsLabel, line2View, downCloseView, downCloseImage, isPortrait) --设置倒计时区域大小
    if (downParentView == nil or downView == nil) then
        return
    end
    if (not wedge.isShowClose and not wedge.isShowAds) then --只显示播放器倒计时
        setDownSize(downParentView, downView, downLabel, isPortrait)
        return
    end
    if (not wedge.isShowClose and wedge.isShowAds) then --播放器倒计时+广告标识
        setDownWithAdsSize(downParentView, downView, downLabel, lineView, adsLabel, isPortrait)
        return
    end
    if (wedge.isShowClose and wedge.isShowAds and wedge.closeAfter <= 0) then --播放器倒计时+广告标识+关闭按钮
        setDownWithAdsAndCloseSize(downParentView, downView, downLabel, lineView, adsLabel, downCloseView, downCloseImage, isPortrait)
        return
    end
    if (wedge.isShowClose and wedge.isShowAds and wedge.closeAfter > 0) then --播放器倒计时+广告标识+关闭倒计时+关闭按钮
        setDownWithAdsAndCloseSize(downParentView, downView, downLabel, lineView, adsLabel, downCloseView, downCloseImage, isPortrait)
        return
    end
end

local function setGuideViewSize(guideParentView, guideView, guideImage, guideLabel, guideVoiceView, guideVoiceImage, data, isPortrait) --设置底部详情大小
    if (guideParentView == nil or guideView == nil) then
        return
    end
    guideParentView:frame(0, 0, 62 * scale, 43 * scale)
    guideView:frame(0, 0, 30 * scale, 30 * scale)
    -- guideView:corner(20 * scale, 20 * scale, 20 * scale, 20 * scale, 20 * scale, 20 * scale, 20 * scale, 20 * scale)
    guideImage:frame(13 * scale, 0 * scale, 17.6 * scale, 17 * scale)
    guideImage:align(Align.V_CENTER)


    if System.android() then
        guideParentView:alignRightBottom()
    else
        guideParentView:alignRight()
        guideParentView:alignBottom()
    end
    local linkUrl = wedgeLinkUrl(data)
    if (linkUrl == nil) then
        guideVoiceView:frame(17 * scale, 0, 30 * scale, 30 * scale)
        -- guideVoiceView:corner(15 * scale, 15 * scale, 15 * scale, 15 * scale, 15 * scale, 15 * scale, 15 * scale, 15 * scale)
        guideVoiceImage:frame(0, 0, 10 * scale, 10 * scale)
        guideVoiceImage:align(Align.CENTER)
        guideView:hide()
        guideVoiceView:show()
        if (isPortrait) then
            guideParentView:show()
        else
            guideParentView:show()
        end
        return
    end
    local alpha = Animation():alpha(0.5):duration(0.25):reverses(true):repeatCount(4)
    alpha:with(guideImage):callback({
        onEnd = function()
            guideImage:alpha(1)
        end
    }):start()
    performWithDelay(function()
        guideParentView:frame(0, 0, 162 * scale, 43 * scale)
        guideView:frame(0, 0, 115 * scale, 30 * scale)
        -- guideView:corner(15 * scale, 15 * scale, 0, 0, 0, 0, 15 * scale, 15 * scale)
        guideLabel:frame(40 * scale, 0, 115 * scale, 30 * scale)

        guideImage:frame(88 * scale, 0 * scale, 17.6 * scale, 17 * scale)
        guideImage:align(Align.V_CENTER)

        guideVoiceView:frame(117 * scale, 0, 30 * scale, 30 * scale)
        -- guideVoiceView:corner(0, 0, 15 * scale, 15 * scale, 15 * scale, 15 * scale, 0, 0)
        guideVoiceImage:frame(0, 0, 10 * scale, 10 * scale)
        guideVoiceImage:align(Align.CENTER)

        if System.android() then
            guideParentView:alignRightBottom()
        else
            guideParentView:alignRight()
            guideParentView:alignBottom()
        end
        local translation = Animation():translation(-75 * scale, 0):duration(0.5)
        translation:with(guideImage):callback({
            onStart = function()
            end,
            onCancel = function()
            end,
            onEnd = function()
                guideLabel:show()
                guideVoiceView:show()
            end,
            onPause = function()
            end,
            onResume = function()
            end,
        }):start()
    end, 2000)
    --    if (isPortrait) then
    --        guideParentView:show()
    --    else
    --        guideParentView:show()
    --    end
end

--屏幕旋转--  TODO
local function rotationScreen(isPortrait)
    if (wedge.mediaPlayer == nil or wedge.data == nil) then
        return
    end
    local x, y, w, h
    if (isPortrait) then
        x, y, w, h = getPortraitLocation(wedge.data)
        --        wedge.guideParentView:show()
    else
        x, y, w, h = getLandscapeLocation(wedge.data)
        --        wedge.guideParentView:show()
    end
    setLuaViewSize(wedge.luaView, wedge.luaViewBack, isPortrait)
    setBackViewSize(wedge.backView, isPortrait)
    x, y, w, h = getMediaPlayerLocation(wedge.data, isPortrait)
    wedge.mediaPlayer:frame(x, y, w, h)
end

local function registerMedia()
    local media = Media()
    -- body
    -- 注册window callback通知
    local callbackTable = {
        --0: 竖屏小屏幕，1 竖屏全凭，2 横屏全屏
        onPlayerSize = function(type)
            if (type == 0) then
                rotationScreen(true)
            elseif (type == 1) then
                rotationScreen(true)
            elseif (type == 2) then
                rotationScreen(false)
            end
            if System.ios() then
                wedge.guideParentView:alignRight()
                wedge.guideParentView:alignBottom()
                wedge.countDownParentView:alignRight()
            end
        end
    }
    media:mediaCallback(callbackTable)
    return media
end

local function registerWindow()
    local nativeWindow = nil
    if System.ios() then
        nativeWindow = NativeWindow()
    else
        nativeWindow = nativeWindow
    end
    local callbackTable = {
        onShow = function()
            wedge.mediaPlayPaused = false
            if (wedge.mediaPlayer ~= nil) then
                wedge.mediaPlayer:restartPlay()
            end
        end,
        onHide = function()
            wedge.mediaPlayPaused = true
            if (wedge.mediaPlayer ~= nil) then
                wedge.mediaPlayer:pausePlay()
            end
        end,
        onHome = function()
            if (wedge.mediaPlayer ~= nil) then
                wedge.mediaPlayer:pausePlay()
            end
        end,
        onLayout = function()
            if (wedge.luaView == nil) then
                return
            end
            if (Native:isPortraitScreen() == true) then
                return
            end
            local hWidth = nativeWindow:width()
            local screenWidth, screenHeight = System.screenSize()
            if (hWidth <= math.max(screenWidth, screenHeight)) then
                return
            end
            wedge.luaView:frame(0, 0, hWidth, math.min(screenWidth, screenHeight))
            wedge.luaView:align(Align.RIGHT) --RIGHT
            local x, y, w, h = getMediaPlayerLocation(wedge.data, isPortrait)
            wedge.mediaPlayer:frame(x, y, w, h)
        end
    }
    if (nativeWindow == nil and System.android()) then
        nativeWindow = window
    end
    if (nativeWindow == nil) then
        return
    end
    nativeWindow:callback(callbackTable)
    return nativeWindow
end

local function createParent(isPortrait)
    local luaView
    if System.android() then
        luaView = View()
    else
        luaView = ThroughView()
    end

    local luaViewBack = Image(Native)
    luaViewBack:image(Data(OS_WEDGE_BACKGROUND))
    luaViewBack:scaleType(ScaleType.FIT_XY)
    luaView:addView(luaViewBack)
    setLuaViewSize(luaView, luaViewBack, isPortrait)
    return luaView, luaViewBack
end

local function createMediaPlay(data, isPortrait)
    local mediaPlayer = MediaPlayer()
    mediaPlayer:clipsToBounds(true)
    mediaPlayer:cornerRadius(5 * scale)
    local x, y, w, h = getMediaPlayerLocation(data, isPortrait)
    mediaPlayer:frame(x, y, w, h)
    if System.ios() then
        mediaPlayer:show()
    else
        mediaPlayer:backgroundColor(0x000000)
    end
    return mediaPlayer
end

local function createBack(data, isPortrait)
    local backView = Image(Native)
    backView:size(30 * scale, 30 * scale)
    backView:image(Data(OS_ICON_WEDGE_BACK))
    backView:clipsToBounds(true)
    backView:cornerRadius(15 * scale)
    backView:borderColor(OS_WEDGE_BORDER_COLOER)
    backView:borderWidth(1)
    setBackViewSize(backView, isPortrait)
    return backView
end

--播放器倒计时必显示 “Ns后可关闭”显示前提为“关闭”按钮为开启状态
--1.只显示播放器倒计时
--2.播放器倒计时+“广告”标识
--3.播放器倒计时+“广告”标识+“关闭”按钮
--4.播放器倒计时+“关闭”按钮
--5.播放器倒计时+“Ns后可关闭”+“关闭”按钮
--6.播放器倒计时+“广告”标识+“Ns后可关闭”+“关闭”按钮
local function createVideoDownView(data, isPortrait)
    local downParentView = View()
    downParentView:align(Align.RIGHT) --RIGHT

    local downView = View()
    downView:backgroundColor(0x000000, 0.6) --播放器倒计时

    downView:clipsToBounds(true)
    downView:cornerRadius(15 * scale)
    downView:borderColor(OS_WEDGE_BORDER_COLOER)
    downView:borderWidth(1)

    local downLabel = Label()
    downLabel:textSize(16)
    downLabel:textColor(0xffffff)
    downLabel:textAlign(TextAlign.CENTER) --播放器倒计时文本
    --1.只显示播放器倒计时
    if (not wedge.isShowClose and not wedge.isShowAds) then --1.只显示播放器倒计时
        setDownType1Size(downParentView, downView, downLabel, isPortrait)

        downView:addView(downLabel)
        downParentView:addView(downView)

        return downParentView, downView, downLabel, nil, nil, nil, nil, nil, nil
    end
    --2.播放器倒计时+“广告”标识
    if (not wedge.isShowClose and wedge.isShowAds) then --播放器倒计时+广告标识
        local lineView = View()
        lineView:backgroundColor(0xffffff) --分隔符

        local adsLabel = Label()
        adsLabel:textSize(12)
        adsLabel:textColor(0xffffff)
        adsLabel:text("广告")
        adsLabel:textAlign(TextAlign.V_CENTER) --广告标识

        setDownType2Size(downParentView, downView, downLabel, lineView, adsLabel, isPortrait)

        downView:addView(downLabel)
        downView:addView(lineView)
        downView:addView(adsLabel)
        downParentView:addView(downView)

        return downParentView, downView, downLabel, lineView, adsLabel, nil, nil, nil, nil
    end
    --3.播放器倒计时+“广告”标识+“关闭”按钮
    if (wedge.isShowClose and wedge.isShowAds and wedge.closeAfter <= 0) then --播放器倒计时+广告标识+关闭按钮
        local lineView = View()
        lineView:backgroundColor(0xffffff) --分隔符

        local adsLabel = Label()
        adsLabel:textSize(12)
        adsLabel:textColor(0xffffff)
        adsLabel:text("广告")
        adsLabel:textAlign(TextAlign.V_CENTER) --广告标识

        local downCloseView = View()
        downCloseView:backgroundColor(0x000000, 0.6) --关闭按钮父控件

        downCloseView:clipsToBounds(true)
        downCloseView:cornerRadius(15 * scale)
        downCloseView:borderColor(OS_WEDGE_BORDER_COLOER)
        downCloseView:borderWidth(1)

        local downCloseImage = Image(Native) --关闭按钮显示图片
        downCloseImage:image(Data(OS_ICON_WEDGE_CLOSE))

        setDownType3Size(downParentView, downView, downLabel, lineView, adsLabel, downCloseView, downCloseImage, isPortrait)

        downView:addView(downLabel)
        downView:addView(lineView)
        downView:addView(adsLabel)

        downCloseView:addView(downCloseImage)

        downParentView:addView(downView)
        downParentView:addView(downCloseView)
        return downParentView, downView, downLabel, lineView, adsLabel, nil, nil, downCloseView, downCloseImage
    end
    --4.播放器倒计时+“关闭”按钮
    if (wedge.isShowClose and not wedge.isShowAds and wedge.closeAfter <= 0) then
        local downCloseView = View()
        downCloseView:backgroundColor(0x000000, 0.6) --关闭按钮父控件

        downCloseView:clipsToBounds(true)
        downCloseView:cornerRadius(15 * scale)
        downCloseView:borderColor(OS_WEDGE_BORDER_COLOER)
        downCloseView:borderWidth(1)

        local downCloseImage = Image(Native) --关闭按钮显示图片
        downCloseImage:image(Data(OS_ICON_WEDGE_CLOSE))

        setDownType4Size(downParentView, downView, downLabel, downCloseView, downCloseImage, isPortrait)

        downView:addView(downLabel)
        downCloseView:addView(downCloseImage)

        downParentView:addView(downView)
        downParentView:addView(downCloseView)
        return downParentView, downView, downLabel, nil, nil, nil, nil, downCloseView, downCloseImage
    end
    --5.播放器倒计时+“Ns后可关闭”+“关闭”按钮
    if (wedge.isShowClose and not wedge.isShowAds and wedge.closeAfter > 0) then
        local lineView = View()
        lineView:backgroundColor(0xffffff) --分隔符

        local downAdsLabel = Label()
        downAdsLabel:textSize(12)
        downAdsLabel:textColor(0xffffff)
        downAdsLabel:textAlign(TextAlign.V_CENTER) --可关闭倒计时

        local downCloseView = View()
        downCloseView:backgroundColor(0x000000, 0.6) --关闭按钮父控件

        downCloseView:clipsToBounds(true)
        downCloseView:cornerRadius(15 * scale)
        downCloseView:borderColor(OS_WEDGE_BORDER_COLOER)
        downCloseView:borderWidth(1)

        local downCloseImage = Image(Native) --关闭按钮显示图片
        downCloseImage:image(Data(OS_ICON_WEDGE_CLOSE))

        setDownType5Size(downParentView, downView, downLabel, lineView, downAdsLabel, downCloseView, downCloseImage, isPortrait)

        downView:addView(downLabel)
        downView:addView(lineView)
        downView:addView(downAdsLabel)
        downCloseView:addView(downCloseImage)

        downParentView:addView(downView)
        downParentView:addView(downCloseView)
        --TODO
        return downParentView, downView, downLabel, lineView, nil, downAdsLabel, nil, downCloseView, downCloseImage
    end
    --6.播放器倒计时+“广告”标识+“Ns后可关闭”+“关闭”按钮
    if (wedge.isShowClose and wedge.isShowAds and wedge.closeAfter > 0) then
        local lineView = View()
        lineView:backgroundColor(0xffffff) --分隔符

        local adsLabel = Label()
        adsLabel:textSize(12)
        adsLabel:textColor(0xffffff)
        adsLabel:text("广告")
        adsLabel:textAlign(TextAlign.V_CENTER) --广告标识

        local line2View = View()
        line2View:backgroundColor(0xffffff) --分隔符

        local downAdsLabel = Label()
        downAdsLabel:textSize(12)
        downAdsLabel:textColor(0xffffff)
        downAdsLabel:textAlign(TextAlign.V_CENTER) --可关闭倒计时

        local downCloseView = View()
        downCloseView:backgroundColor(0x000000, 0.6) --关闭按钮父控件

        downCloseView:clipsToBounds(true)
        downCloseView:cornerRadius(15 * scale)
        downCloseView:borderColor(OS_WEDGE_BORDER_COLOER)
        downCloseView:borderWidth(1)

        local downCloseImage = Image(Native) --关闭按钮显示图片
        downCloseImage:image(Data(OS_ICON_WEDGE_CLOSE))

        setDownType6Size(downParentView, downView, downLabel, lineView, adsLabel, downAdsLabel, line2View, downCloseView, downCloseImage, isPortrait)
        downView:addView(downLabel)
        downView:addView(lineView)
        downView:addView(adsLabel)
        downView:addView(line2View)
        downView:addView(downAdsLabel)
        downCloseView:addView(downCloseImage)

        downParentView:addView(downView)
        downParentView:addView(downCloseView)
        --TODO
        return downParentView, downView, downLabel, lineView, adsLabel, downAdsLabel, line2View, downCloseView, downCloseImage
    end
end

local function createGuide(data, isPortrait)
    local guideParentView = View()

    local guideView = View()
    guideView:backgroundColor(0x000000, 0.6)

    guideView:clipsToBounds(true)
    guideView:cornerRadius(15 * scale)
    guideView:borderColor(OS_WEDGE_BORDER_COLOER)
    guideView:borderWidth(1)

    local guideImage = Image(Native)
    guideImage:image(Data(OS_ICON_BUBBLE_PROMPT_LEFT))
    guideImage:scaleType(ScaleType.FIT_XY)

    local guideLabel = Label()
    guideLabel:textColor(0xffffff)
    guideLabel:textSize(12)
    guideLabel:text("点击看详情")
    guideLabel:textAlign(TextAlign.V_CENTER)
    guideLabel:hide()

    local guideVoiceView = View()
    guideVoiceView:backgroundColor(0x000000, 0.6)

    guideVoiceView:clipsToBounds(true)
    guideVoiceView:cornerRadius(15 * scale)
    guideVoiceView:borderColor(OS_WEDGE_BORDER_COLOER)
    guideVoiceView:borderWidth(1)

    guideVoiceView:hide()

    local guideVoiceImage = Image(Native)
    guideVoiceImage:image(Data(OS_ICON_VOICE))
    guideVoiceImage:scaleType(ScaleType.CENTER_CROP)

    guideView:addView(guideImage)
    guideView:addView(guideLabel)
    guideVoiceView:addView(guideVoiceImage)

    setGuideViewSize(guideParentView, guideView, guideImage, guideLabel, guideVoiceView, guideVoiceImage, data, isPortrait)

    guideParentView:addView(guideView)
    guideParentView:addView(guideVoiceView)

    return guideParentView, guideView, guideImage, guideLabel, guideVoiceView, guideVoiceImage
end

local function showControl(isPortrait, visible)
    if (isPortrait and visible) then
        wedge.backView:show()
        wedge.countDownParentView:show()
        --        wedge.guideParentView:hide()
        return
    end
    if (isPortrait and not visible) then
        wedge.backView:hide()
        wedge.countDownParentView:hide()
        --        wedge.guideParentView:hide()
        return
    end
    if (not isPortrait and visible) then
        wedge.backView:show()
        wedge.countDownParentView:show()
        --        wedge.guideParentView:show()
    end
    if (not isPortrait and not visible) then
        wedge.backView:hide()
        wedge.countDownParentView:hide()
        --        wedge.guideParentView:hide()
    end
    if System.ios() then
        wedge.guideParentView:alignRight()
        wedge.guideParentView:alignBottom()
    end
end

function createLoadingView()
    local loading = LoadingIndicator()
    loading:frame(0, 0, 40, 40)
    loading:color(0xffffff)
    loading:start()
    return loading;
end

local function onCreate(data)
    local showLinkUrl = getHotspotExposureTrackLink(data, 1)
    if (showLinkUrl ~= nil) then
        Native:get(showLinkUrl)
    end
    if (wedge.launchPlanId ~= nil) then
        osTrack(wedge.launchPlanId, 1, 2)
        if (wedgeLinkUrl(data) ~= nil) then
            osTrack(wedge.launchPlanId, 2, 2)
        end
    end
    wedge.luaView, wedge.luaViewBack = createParent(Native:isPortraitScreen())
    wedge.mediaPlayer = createMediaPlay(data, Native:isPortraitScreen())
    wedge.backView = createBack(data, Native:isPortraitScreen())
    wedge.countDownParentView, wedge.countDownView, wedge.countDownLabel, wedge.countDownLineView, wedge.downAdsLabel, wedge.countDownAdsLabel, wedge.countDownLine2View, wedge.countDownCloseView, wedge.countDownCloseImage = createVideoDownView(data, Native:isPortraitScreen())
    wedge.guideParentView, wedge.guideView, wedge.guideImageView, wedge.guideLabelView, wedge.guideVoiceView, wedge.guideVoiceImage = createGuide(data, Native:isPortraitScreen())
    wedge.loading = createLoadingView()
    showControl(Native:isPortraitScreen(), false)
    wedge.luaView:addView(wedge.mediaPlayer)
    wedge.luaView:addView(wedge.backView)
    wedge.luaView:addView(wedge.countDownParentView)
    wedge.countDownParentView:alignRight()
    wedge.luaView:addView(wedge.guideParentView)
    wedge.luaView:addView(wedge.loading)
    wedge.loading:alignCenter()
    if System.ios() then
        wedge.guideParentView:alignRight()
        wedge.guideParentView:alignBottom()
    end
    wedge.countDownParentView:onClick(function()
    end)
    wedge.backView:onClick(function()
        Native:widgetEvent(eventTypeBack, wedge.id, adTypeName, actionTypeNone, "")
    end)
    local clickFunction = function()
        local linkUrl = wedgeLinkUrl(wedge.data)
        if (linkUrl == nil) then
            return
        end
        local clickLinkUrl = getHotspotClickTrackLink(wedge.data, 1)
        if (clickLinkUrl ~= nil) then
            Native:get(clickLinkUrl)
        end
        if (wedge.launchPlanId ~= nil) then
            osTrack(wedge.launchPlanId, 3, 2)
        end
        local adId = wedgeID(wedge.data)
        local adType = "os_wedge.lua"
        local linkTable = { link = linkUrl, adType = adType, adId = adId }
        Native:widgetEvent(eventTypeClick, wedge.id, adTypeName, actionTypeOpenUrl, linkUrl)
        if (wedge.mediaPlayer ~= nil) then
            wedge.mediaPlayer:pausePlay()
            wedge.mediaPlayPaused = true
        end
    end
    wedge.guideParentView:onClick(clickFunction)
    if (wedge.countDownCloseView ~= nil) then
        wedge.countDownCloseView:onClick(function()
            closeWedge()
        end)
    end
    wedge.guideVoiceView:onClick(function()
        local voice = wedge.mediaPlayer:voice()
        if (voice == 0 and wedge.voice == 0) then
            wedge.guideVoiceImage:image(Data(OS_ICON_NO_VOICE))
        elseif (voice > 0 and wedge.voice > 0) then
            wedge.mediaPlayer:voice(0)
            wedge.guideVoiceImage:image(Data(OS_ICON_NO_VOICE))
        else
            wedge.mediaPlayer:voice(wedge.voice)
            wedge.guideVoiceImage:image(Data(OS_ICON_VOICE))
        end
    end)
    if System.ios() then
        wedge.mediaPlayer:onClick(clickFunction)
    else
        wedge.luaView:onClick(clickFunction)
    end
end

local function setDefaultValue(data) --设置默认大小值
    if (data == nil) then
    end
    data.data.width = 1.0
    data.data.ratio = 1.0
    data.data.positionY = 0.0
    data.data.positionX = 0.0
end

--入口Native调用--
function show(args)
    if (args == nil) then
        if (wedge.mediaPlayer ~= nil) then
            wedge.mediaPlayer:restartPlay()
            wedge.mediaPlayPaused = false
        end
        return
    end
    local dataTable = args.data
    if (dataTable == nil) then
        if (wedge.mediaPlayer ~= nil) then
            wedge.mediaPlayer:restartPlay()
            wedge.mediaPlayPaused = false
        end
        return
    else
        local wedgeUrl = getWedgeUrl(dataTable)
        if wedgeUrl == nil then
            return
        end
    end
    setDefaultValue(dataTable)
    wedgeConfig(dataTable)
    wedge.id = dataTable.id
    wedge.launchPlanId = dataTable.launchPlanId

    Native:widgetEvent(eventTypeShow, wedge.id, adTypeName, actionTypePauseVideo, "")
    Native:saveCacheData(wedge.id, tostring(eventTypeShow))
    wedge.data = dataTable
    wedge.media = registerMedia()
    wedge.window = registerWindow()
    onCreate(dataTable)
    wedge.mediaPlayer:callback({
        onStart = function(url)
            --开始播放
            wedge.voice = wedge.mediaPlayer:voice()
            if (wedge.voice > 0) then
                wedge.guideVoiceImage:image(Data(OS_ICON_VOICE))
            else
                wedge.guideVoiceImage:image(Data(OS_ICON_NO_VOICE))
            end
            wedge.mediaPlayPaused = false
            local videoDuration = getVideoDuration(dataTable)
            local currentPosition = 0
            if (videoDuration == 0) then
                currentPosition = rounded((wedge.mediaPlayer:duration() - wedge.mediaPlayer:position()) / 1000)
            else
                currentPosition = rounded((videoDuration - wedge.mediaPlayer:position()) / 1000)
            end
            wedge.videoDuration = currentPosition
            if wedge.timer == nil then
                performWithShutDownTimer(currentPosition)
            end
            showControl(Native:isPortraitScreen(), true)
            if wedge.loading ~= nil then
                wedge.loading:stop()
                wedge.loading:removeFromParent()
                wedge.loading = nil
            end
        end,
        onPause = function(url)
            wedge.mediaPlayPaused = true
            --暂停播放
        end,
        onFinished = function(url)
            --停止播放
            closeWedge()
        end,
        onPrepare = function(url)
            --准备播放
            if System.ios() then
                wedge.mediaPlayer:show()
            end
        end,
        onError = function(url)
            --播放错误
            closeWedge()
        end,
        onChangeVolume = function(volme)
            wedge.voice = volme
            if (wedge.guideVoiceImage == nil or wedge.mediaPlayer == nil) then
                return
            end
            if (volme > 0) then
                wedge.guideVoiceImage:image(Data(OS_ICON_VOICE))
            else
                wedge.guideVoiceImage:image(Data(OS_ICON_NO_VOICE))
            end
        end
    })
    wedge.mediaPlayer:startPlay(getWedgeUrl(dataTable))
end
