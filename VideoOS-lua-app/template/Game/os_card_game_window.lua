--
-- Created by IntelliJ IDEA.
-- User: videojj_pls
-- Date: 2018/11/6
-- Time: 10:22 AM
-- To change this template use File | Settings | File Templates.
--
require "os_config"
require "os_string"
require "os_constant"
require "os_util"
require "os_track"
cardWindow = object:new()
local adTypeName = "cardWindow"
local scale = getScale()
local OS_ICON_WEDGE_CLOSE = "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAAAXNSR0IArs4c6QAAABxpRE9UAAAAAgAAAAAAAAAPAAAAKAAAAA8AAAAPAAAA5AcB+qEAAACwSURBVEgNrNRRDkAwDAZgEeJQ3l3AqzcXcfP5K/7YpqRakmbLTL9NlzVN9qSURsSC6LJhVxc5WsSMmF4TYIKg2xkhHDmIMp+OVygnu3AFZb4Sf0A5+RP+gjLfhWOyJOcLrTXhBlRyr4j+qDk6HSKE4/u6ptoGBB2KgxbB3ShX4MHDqAf/DXXgcjloteTYvaZEnlrjbyegtd9RLiaA+9EAHkcd+H+o4MbTK3U23XDc0A4AAP//ccVjlAAAAKlJREFUrdNJCoAwDAXQIoo3cy24dedFvHn9BT9GqW3SVCh1SPI6GULhijEOaBvaqWw74sZCyfonFLCiHFw77kDbcSV6IC7NjFCu18/cgM6IHbvgFpQnxI23oG7cg7pwwLX/NB2kmchfjxjbniNhQcudyvROhXIwCnxFzMD4gIccbkJZrIC/UZEg8SZU1Pouex4VCQl3oaIW8TIqEibee/t72Z899RbskX8BAmhX+trGubgAAAAASUVORK5CYII="

local OS_ICON_CARD_IMAGE_BG = ""
local OS_ICON_CARD_NO_COLLECT = ""

local OS_CARD_PROGRESS_BG = ""

local OS_CARD_TRIANGLE_BG = "iVBORw0KGgoAAAANSUhEUgAAAE4AAABMCAYAAADDYoEWAAAAAXNSR0IArs4c6QAAABxpRE9UAAAAAgAAAAAAAAAmAAAAKAAAACYAAAAmAAABHu7kH0gAAADqSURBVHgB7NDJDcJAFAPQaYJshFuqoyAaoyAiBAJF2WaSWf7/ts/2wc85JkhgGJrLrWvuQSP08hutb+vntase6Bbe/39obfUinCfbBI1wfmozNMLtwy2iEW4bbhWNcOtwm2iEW4bbRSPcHM4LjXBTOG80wv3hgtAI94ELRiOcc4fQ0OEOoyHDnUJDhTuNhggXBQ0NLhoaElxUNBS46GgIcEnQrMMlQ7MMlxTNKlxyNItwWdCswWVDswSXFc0KXHY0C3BF0LTDFUPTDFcUTStccTSNcCLQtMGJQdMEJwpNC5w4NA1wItG+cCMAAAD//wynkEsAAADmSURBVO3ayQ2DUAwEUJpgCxypmcYoKFEkDl+IxcBfxvZYcgNv5JOnqkBnmrp67Ntl6Jsv3H6aGZINGu0fJCIcPBoinAo0NDg1aEhwqtBQ4NShIcCpRCsNpxatJJxqtFJw6tFKwJlAyw1nBi0nnCm0XHDm0HLAmURLDWcWLSWcabRUcObRUsC5QIsN5wYtJpwrtFhw7tBiwLlEewvnFu0NnGu0p3Du0Z7AEW2tY9z55BMt6LBI4YgWoElPlWgbNAkc0XbQruCIdoB2Bke0E7QjOKJdoO3BEU2AtoUjmhAthCPaDbQV7gcI1qiXaJuXxwAAAABJRU5ErkJggg=="

local OS_CARD_PORTRAIT_SHADOW = "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"
local OS_CARD_LANDSCAPE_SHADOW = ""

local OS_CARD_GRADIENT_COLOR_1 = 0xFF77B4
local OS_CARD_GRADIENT_COLOR_2 = 0xFEA2A5
local OS_CARD_GRADIENT_COLOR_3 = 0x1C1A17

local adTypeName = "CardWindow"
local blurUrl = nil
cardWindow.userCardInfo = {}
cardWindow.requestIds = {}
local alphaTime = 1.0

local function translationAnim(x, y)
    local anim = Animation():translation(x, y):duration(0.3)
    return anim
end

local function startViewTranslationAnim(view, x, y, table)
    if (view == nil) then
        return
    end
    if table ~= nil then
        translationAnim(x, y):with(view):callback(table):start()
    else
        translationAnim(x, y):with(view):start()
    end
end

local function startShowAnimation(view, duration)
    if (view == nil) then
        return
    end
    print("Luaview startShowAnimation")
    view:alpha(0)
    local anim = Animation():alpha(1.0):duration(duration):with(view):start()
    return anim
end

local function getHotspotExposureTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.exposureTrackLink
end

local function getHotspotClickTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.clickTrackLink
end

local function closeView()
    for key, value in pairs(cardWindow.requestIds) do
        if (value ~= nil) then
            Native:abort(value)
        end
    end
    Native:widgetEvent(eventTypeClose, cardWindow.id, adTypeName, actionTypeNone, "")
    Native:destroyView()
end

local function setBlurImage(blurView, imageUrl)
    if (blurView == nil or imageUrl == nil) then
        return
    end
    -- blurUrl = imageUrl
    -- blurView:imageBlur(imageUrl, 8)
    -- local isPortrait = Native:isPortraitScreen()
    -- if isPortrait then
    -- 	blurView:image(Data(OS_CARD_PORTRAIT_BG))
    -- else
    -- 	blurView:image(Data(OS_CARD_LANDSCAPE_BG))
    -- end
end

local function checkCollectStatus()

    if cardWindow.collectStatus == 3 then
        return 3
    end

    local collectCount = 0
    if cardWindow.isHotOrder1 == true then
        collectCount = collectCount + 1;
    end
    if cardWindow.isHotOrder2 == true then
        collectCount = collectCount + 1;
    end
    if cardWindow.isHotOrder3 == true then
        collectCount = collectCount + 1;
    end
    cardWindow.collectCount = collectCount
    if collectCount == cardWindow.sumHotspot then
        return 2
    end
    return 1
end

local function postUserCardInfo()

    local businessInfoTable = {
        collectStatus = checkCollectStatus(),
        isHotOrder1 = cardWindow.isHotOrder1,
        isHotOrder2 = cardWindow.isHotOrder2,
        isHotOrder3 = cardWindow.isHotOrder3,
    }

    local businessParamTable = {
        userId = Native:getIdentity(),
        creativeId = cardWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    -- print("[LuaView] " .. OS_HTTP_POST_MOBILE_QUERY)
    -- print("[LuaView] " .. Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    local requestId = cardWindow.request:post(OS_HTTP_POST_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview postUserCardInfo")
        if (response == nil) then
            return
        end
        -- print("luaview postUserCardInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.launchInfoList
        if (dataTable == nil) then
            return
        end
    end, cardWindow.luaView)
    table.insert(cardWindow.requestIds, requestId)
end

local function getUserCardInfo()

    local businessInfo = {
        userId = Native:getIdentity(),
        creativeId = cardWindow.data.creativeId
    }

    local paramData = {
        businessParam = businessInfo,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    -- print("[LuaView] "..paramDataString)
    -- print("[LuaView] "..OS_HTTP_GET_MOBILE_QUERY)
    -- print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    local requestId = cardWindow.request:post(OS_HTTP_GET_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        -- print("luaview getUserVoteInfo")
        if (response == nil) then
            return
        end
        -- print("luaview getUserVoteInfo 11"..Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.businessInfo
        if (dataTable == nil) then
            postUserCardInfo()
            return
        end
        cardWindow.data.data.userCardInfo = dataTable
    end, cardWindow.luaView)
    table.insert(cardWindow.requestIds, requestId)
end

local function setLuaViewSize(luaview, isPortrait) --设置当前容器大小
    if (luaview == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        luaview:frame(0, 0, math.min(screenWidth, screenHeight), math.max(screenWidth, screenHeight))
    else
        luaview:frame(0, 0, math.max(screenWidth, screenHeight), math.min(screenWidth, screenHeight))
        if (System.android()) then
            luaview:align(Align.RIGHT)
        end
    end
end

local function setCardViewSize(data, cardWindowView, isPortrait) --设置当前容器大小
    if (data == nil or cardWindowView == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if (System.android()) then
            cardWindowView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight)
            cardWindowView:align(Align.BOTTOM)
        else
            cardWindowView:frame(0, math.max(screenWidth, screenHeight) - cardWindow.portraitHeight, cardWindow.portraitWidth, cardWindow.portraitHeight)
        end
    else
        if (System.android()) then
            cardWindowView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
            cardWindowView:align(Align.RIGHT)
        else
            cardWindowView:frame(math.max(screenWidth, screenHeight) - 200 * scale, 0, 200 * scale, math.min(screenWidth, screenHeight))
        end
    end
end

local function setCardTopContentViewSize(data, cardWindowTopContentView, isPortrait) --设置当前容器大小
    if (data == nil or cardWindowTopContentView == nil) then
        return
    end
    if (isPortrait) then
        cardWindowTopContentView:backgroundColor(0xEAEAEA, 1)
        cardWindowTopContentView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.877)
    else
        cardWindowTopContentView:backgroundColor(0x000000, 0)
        cardWindowTopContentView:frame(0, 0, 200 * scale, 336.8 * scale)
        cardWindowTopContentView:align(Align.RIGHT)
    end
end

local function setCardBlurViewViewSize(data, cardBlurView, isPortrait) --设置当前容器大小
    if (data == nil or cardBlurView == nil) then
        return
    end
    if (isPortrait) then
        --cardBlurView:image(Data(OS_CARD_PORTRAIT_BG))
        cardBlurView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.877)
    else
    	--cardBlurView:image(Data(OS_CARD_LANDSCAPE_BG))
        cardBlurView:frame(0, 0, 200 * scale, 336.8 * scale)
    end
end

local function setCardImageLayoutSize(data, index, cardImageLayout, cardImage, cardBgView, isPortrait)
    if (data == nil or cardImageLayout == nil or cardImage == nil or cardBgView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.sumHotspot == 2) then
            w = cardWindow.portraitWidth * 0.276
            --            h = cardWindow.portraitHeight * 0.317
            h = w / 0.743
            y = cardWindow.portraitHeight * 0.086
            if (index == 1) then
                x = cardWindow.portraitWidth * 0.205
            else
                x = cardWindow.portraitWidth * 0.520
            end
        else
            w = cardWindow.portraitWidth * 0.276
            --            h = cardWindow.portraitHeight * 0.317
            h = w / 0.743
            y = cardWindow.portraitHeight * 0.086
            if (index == 1) then
                x = cardWindow.portraitWidth * 0.057
            elseif index == 2 then
                x = cardWindow.portraitWidth * 0.363
            else
                x = cardWindow.portraitWidth * 0.667
            end
        end
    else
        if (cardWindow.sumHotspot == 2) then
            w = 78.2 * scale
            h = 105.2 * scale
            y = 42 * scale
            if (index == 1) then
                x = 17.6 * scale
            elseif (index == 2) then
                x = 105.6 * scale
            end
        else
            w = 85.2 * scale
            h = 114.4 * scale
            y = 29 * scale
            if (index == 1) then
                x = 14.9 * scale
                y = 39 * scale
            elseif index == 2 then
                x = 57.5 * scale
                y = 29 * scale
            else
                x = 100.1 * scale
                y = 39 * scale
            end
        end
    end

    cardImageLayout:frame(x, y, w, h)
    cardImage:frame(scale, scale, w - 2 * scale, h - 2 * scale)
    cardBgView:frame(0, 0, w, h)
    --    cardImage:cornerRadius(5 * scale)
end

local function setCardBottomViewSize(data, cardBottomView, cardBottomBgView, cardFlexView, cardProgressView, cardFlexLabel, isPortrait) --设置当前容器大小
    if (data == nil or cardBottomView == nil or cardBottomBgView == nil or cardFlexView == nil or cardProgressView == nil or cardFlexLabel == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    local corner = 0
    if (isPortrait) then
        cardBottomView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
        cardBottomView:align(Align.BOTTOM)
        cardBottomBgView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
        cardFlexView:frame(cardWindow.portraitWidth * cardWindow.hotspotRatio - cardWindow.portraitHeight * 0.123 * 78.0 / 76.0 + 1, 0, cardWindow.portraitHeight * 0.123 * 78.0 / 76.0, cardWindow.portraitHeight * 0.123)
        cardProgressView:frame(cardWindow.portraitWidth * cardWindow.hotspotRatio - 1, 0, cardWindow.portraitWidth * (1.0 - cardWindow.hotspotRatio) + 1, cardWindow.portraitHeight * 0.123)
        cardFlexLabel:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
    else
        cardBottomView:frame(0, 0, 200 * scale, 38.3 * scale)
        cardBottomView:align(Align.BOTTOM)
        cardBottomBgView:frame(0, 0, 200 * scale, 38.3 * scale)
        cardFlexView:frame(200 * scale * cardWindow.hotspotRatio - 38.3 * scale * 78.0 / 76.0 + 1, 0, 38.3 * scale * 78.0 / 76.0, 38.3 * scale)
        cardProgressView:frame(200 * scale * cardWindow.hotspotRatio - 1, 0, 200 * scale * (1.0 - cardWindow.hotspotRatio) + 1, 38.3 * scale)
        cardFlexLabel:frame(0, 0, 200 * scale, 38.3 * scale)
        -- corner = 19.15 * scale
    end

    -- cardFlexView:corner(0, 0, corner, corner, corner, corner, 0, 0)
end

local function setCardTitleViewSize(data, cardTitleView, isPortrait)
    if (data == nil or cardTitleView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.collectStatus == 3) then
            x = cardWindow.portraitWidth * 0.227
            y = cardWindow.portraitHeight * 0.643
            w = cardWindow.portraitWidth * 0.567
            h = cardWindow.portraitHeight * 0.082
            cardTitleView:textColor(0xF5D876)
            cardTitleView:textSize(14)
        else
            x = cardWindow.portraitWidth * 0.227
            y = cardWindow.portraitHeight * 0.448
            w = cardWindow.portraitWidth * 0.567
            h = cardWindow.portraitHeight * 0.090
            cardTitleView:textColor(0xF5D876)
            cardTitleView:textSize(14)
        end
    else
        if (cardWindow.collectStatus == 3) then
            x = 13.9 * scale
            y = 200.5 * scale
            w = 171 * scale
            h = 40 * scale
            cardTitleView:textColor(0xF5D876)
            cardTitleView:textSize(13)
        else
            x = 13.9 * scale
            y = 173.5 * scale
            w = 171 * scale
            h = 40 * scale
            cardTitleView:textColor(0xF5D876)
            cardTitleView:textSize(13)
        end
    end
    --    if (System.android()) then
    --        cardTitleView:margin(x, y, x, 0)
    --    else
    --        cardTitleView:frame(x, y, w, h)
    --    end
    cardTitleView:frame(x, y, w, h)
end

local function setCardContentImageView(data, cardContentImageView, cardContentImageShadowView, isPortrait)
    if (data == nil or cardContentImageView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.collectStatus == 3) then
            x = cardWindow.portraitWidth * 0.120
            y = cardWindow.portraitHeight * 0.207
            w = cardWindow.portraitWidth * 0.763
            h = w * 80.0 / 165.0 --cardWindow.portraitHeight * 0.316
        else
            x = cardWindow.portraitWidth * 0.187
            y = cardWindow.portraitHeight * 0.558
            w = cardWindow.portraitWidth * 0.628
            h = w * 80.0 / 165.0 --cardWindow.portraitHeight * 0.260
        end
        -- cardContentImageShadowView:backgroundColor(0xFF0000)
        cardContentImageShadowView:image(Data(OS_CARD_PORTRAIT_SHADOW))
        cardContentImageShadowView:frame((cardWindow.portraitWidth - 348 * scale) * 0.5, y + h - 8 * scale, 348 * scale, 16 * scale)
    else
        if (cardWindow.collectStatus == 3) then
            x = 17.7 * scale
            y = 96.5 * scale
            w = 165 * scale
            h = 80 * scale
        else
            x = 17.7 * scale
            y = 225.5 * scale
            w = 165 * scale
            h = 80 * scale
        end
        -- cardContentImageShadowView:backgroundColor(0xFF00FF)
        cardContentImageShadowView:image(Data(OS_CARD_LANDSCAPE_SHADOW))
        cardContentImageShadowView:frame(0 * scale, y + h - 6 * scale, 200 * scale, 12 * scale)
    end
    cardContentImageView:frame(x, y, w, h)
end

local function setCardCloseImageView(data, cardCloseLayout, cardCloseImageView, isPortrait)
    if (data == nil or cardCloseLayout == nil or cardCloseImageView == nil) then
        return
    end
    --    local x, y, w, h = 0, 0, 0, 0
    local size = cardWindow.portraitHeight * 0.083
    if (isPortrait) then
        --        x = 350 * scale
        --        y = 8 * scale
        --        w = 15 * scale
        --        h = 15 * scale
        cardCloseLayout:frame(0, 0, size, size)
        cardCloseImageView:frame(0, 0, 15 * scale, 15 * scale)
        cardCloseImageView:show()
        cardCloseLayout:align(Align.RIGHT)
        cardCloseImageView:align(Align.CENTER)
    else
        cardCloseImageView:hide()
    end
end

--屏幕旋转--
local function rotationScreen(isPortrait)
    setLuaViewSize(cardWindow.luaView, isPortrait)
    setCardViewSize(cardWindow.data, cardWindow.cardWindowView, isPortrait)
    setCardTopContentViewSize(cardWindow.data, cardWindow.cardWindowTopContentView, isPortrait)
    setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
    setCardBottomViewSize(cardWindow.data, cardWindow.cardBottomView, cardWindow.cardBottomBgView, cardWindow.cardFlexView, cardWindow.cardProgressView, cardWindow.cardFlexLabel, isPortrait)
    setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
    if (cardWindow.collectStatus ~= 3) then
        if (cardWindow.cardImageLayout3 ~= nil) then
            cardWindow.cardImageLayout1:rotation(0)
            cardWindow.cardImageLayout3:rotation(0)
        end
        setCardImageLayoutSize(cardWindow.data, 1, cardWindow.cardImageLayout1, cardWindow.cardImageView1, cardWindow.cardBgView1, isPortrait)
        setCardImageLayoutSize(cardWindow.data, 2, cardWindow.cardImageLayout2, cardWindow.cardImageView2, cardWindow.cardBgView2, isPortrait)
        setCardImageLayoutSize(cardWindow.data, 3, cardWindow.cardImageLayout3, cardWindow.cardImageView3, cardWindow.cardBgView3, isPortrait)
        if (isPortrait == false and cardWindow.cardImageLayout3 ~= nil and cardWindow.sumHotspot >= 3) then
            cardWindow.cardImageLayout1:rotation(-10)
            cardWindow.cardImageLayout3:rotation(10)
        end
    end
    setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
    setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
end

local function registerMedia()
    local media = Media()
    -- body
    -- 注册window callback通知
    local callbackTable = {
        --0: 竖屏小屏幕，1 竖屏全凭，2 横屏全屏
        onPlayerSize = function(type)
            if (type == 0) then
                rotationScreen(true)
            elseif (type == 1) then
                rotationScreen(true)
            elseif (type == 2) then
                rotationScreen(false)
            end
        end
    }
    media:mediaCallback(callbackTable)
    return media
end

local function registerWindow()
    local nativeWindow = nil
    if System.ios() then
        nativeWindow = NativeWindow()
    else
        nativeWindow = nativeWindow
    end
    local callbackTable = {
        onShow = function()
            if (System.android()) then
                setBlurImage(cardWindow.cardBlurImageView, blurUrl)
            end
        end
    }
    if (nativeWindow == nil and System.android()) then
        nativeWindow = window
    end
    if (nativeWindow == nil) then
        return
    end
    nativeWindow:callback(callbackTable)
    return nativeWindow
end

--全局父控件
local function createLuaView(isPortrait)
    local luaView
    -- if System.android() then
    --     luaView = View()
    -- else
    --     luaView = ThroughView()
    -- end
    luaView = View()
    setLuaViewSize(luaView, isPortrait)
    return luaView
end

local function createCardView(data, isPortrait)
    local cardWindowView = View()

    setCardViewSize(data, cardWindowView, isPortrait)

    return cardWindowView
end

local function createCardTopContentView(data, isPortrait)
    local cardWindowTopContentView = View()
    setCardTopContentViewSize(data, cardWindowTopContentView, isPortrait)
    return cardWindowTopContentView
end

local function createCardBlurView(data, isPortrait)
    local cardBlurImageView = View()--Image(Native)
    cardBlurImageView:backgroundColor(0x1E1C19)
    -- cardBlurImageView:scaleType(ScaleType.FIT_XY)
    setCardBlurViewViewSize(data, cardBlurImageView, isPortrait)
    return cardBlurImageView
end

--创建单个--
local function createCardImageItem()
    local cardImageLayout = View()
    local cardImageView = Image(Native)
    cardImageView:scaleType(ScaleType.FIT_XY)
    local cardBgView = Image(Native)
    cardBgView:image(Data(OS_ICON_CARD_IMAGE_BG))
    cardBgView:scaleType(ScaleType.FIT_XY)
    cardImageLayout:addView(cardImageView)
    cardImageLayout:addView(cardBgView)
    return cardImageLayout, cardImageView, cardBgView
end

local function createCardGroupView(data, isPortrait)
    local cardImageLayout1, cardImageView1, cardBgView1 = createCardImageItem()
    local cardImageLayout2, cardImageView2, cardBgView2 = createCardImageItem()
    local cardImageLayout3, cardImageView3, cardBgView3
    if (cardWindow.sumHotspot == 3) then
        cardImageLayout3, cardImageView3, cardBgView3 = createCardImageItem()
    end
    setCardImageLayoutSize(data, 1, cardImageLayout1, cardImageView1, cardBgView1, isPortrait)
    setCardImageLayoutSize(data, 2, cardImageLayout2, cardImageView2, cardBgView2, isPortrait)
    setCardImageLayoutSize(data, 3, cardImageLayout3, cardImageView3, cardBgView3, isPortrait)
    return cardImageLayout1, cardImageView1, cardBgView1, cardImageLayout2, cardImageView2, cardBgView2, cardImageLayout3, cardImageView3, cardBgView3
end

local function createCardBottomView(data, isPortrait)

	local cardBottomView = View()

    local cardBottomBgView = Image(Native)
    cardBottomBgView:image(Data(OS_CARD_PROGRESS_BG))
    cardBottomBgView:scaleType(ScaleType.FIT_XY)
    -- cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_3, OS_CARD_GRADIENT_COLOR_3)

    local cardFlexView = Image(Native)
    cardFlexView:image(Data(OS_CARD_TRIANGLE_BG))
    cardFlexView:scaleType(ScaleType.FIT_XY)
    -- cardFlexView:gradient(OS_CARD_GRADIENT_COLOR_1, OS_CARD_GRADIENT_COLOR_2)

    local cardProgressView = View()
    cardProgressView:backgroundColor(OS_CARD_GRADIENT_COLOR_3)

    local text = "运气真好，还差" .. tostring(cardWindow.sumHotspot - cardWindow.collectCount) .. "张就成功啦"
    local cardFlexLabel = Label(Native)
    cardFlexLabel:text(text)
    cardFlexLabel:textColor(0xFFFFFF)
    cardFlexLabel:textAlign(TextAlign.CENTER)

    -- setCardBottomViewSize(data, cardBottomView, cardBottomBgView, cardFlexView, cardProgressView, cardFlexLabel, isPortrait)

    return cardBottomView, cardBottomBgView, cardFlexView, cardProgressView, cardFlexLabel
end

local function createCardCloseImageView(data, isPortrait)
    local cardCloseLayout = View()
    cardCloseLayout:align(Align.RIGHT)
    local cardCloseImageView = Image(Native)
    cardCloseImageView:align(Align.CENTER)
    cardCloseImageView:scaleType(ScaleType.FIT_XY)
    cardCloseImageView:image(Data(OS_ICON_WEDGE_CLOSE))
    cardCloseImageView:hide()
    setCardCloseImageView(data, cardCloseLayout, cardCloseImageView, isPortrait)
    cardCloseLayout:addView(cardCloseImageView)
    return cardCloseLayout, cardCloseImageView
end

local function createTitleView(data, isPortrait)
    local cardTitleLabel = Label(Native)
    cardTitleLabel:textAlign(TextAlign.CENTER)
    cardTitleLabel:lines(2)
    cardTitleLabel:text("")
    cardTitleLabel:textColor(0xF5D876)
    setCardTitleViewSize(data, cardTitleLabel, isPortrait)
    return cardTitleLabel
end

local function createCardContentImageView(data, isPortrait)
    local cardContentImageView = Image(Native)
    cardContentImageView:scaleType(ScaleType.CENTER_CROP)
    -- setCardContentImageView(data, cardContentImageView, isPortrait)

    -- cardContentImageView:clipsToBounds(true)
    -- cardContentImageView:cornerRadius(15 * scale)
    cardContentImageView:borderColor(0xF5D876)
    cardContentImageView:borderWidth(1)
    if(System.android())then
        cardContentImageView:padding(1,1,1,1)
        cardContentImageView:cornerRadius(0)
    end

    local cardContentImageShadowView = Image(Native)
    cardContentImageShadowView:scaleType(ScaleType.CENTER_CROP)
    setCardContentImageView(data, cardContentImageView, cardContentImageShadowView, isPortrait)
    return cardContentImageView, cardContentImageShadowView
end

--未收集成功 默认无需处理
local function notCollectState(data)
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local collectTable = dataTable.collect
    if (collectTable == nil) then
        return
    end
    -- print("LuaView notCollectState "..Native:tableToJson(dataTable))
    local contentImageUrl = collectTable.imageUrl
    if (contentImageUrl ~= nil) then
        cardWindow.cardContentImageView:image(contentImageUrl)
    end
    local content = collectTable.content
    if content ~= nil then
        cardWindow.cardTitleLabel:text(content)
    else
        cardWindow.cardTitleLabel:text("")
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil) then
        return
    end
    -- print("LuaView hotspotArrayTable "..Native:tableToJson(hotspotArrayTable))
    if (cardWindow.isHotOrder1) then
        local HotOrderTable = hotspotArrayTable[1]
        if (HotOrderTable == nil or cardWindow.cardImageView1 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 1) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView1, alphaTime)
            end
            cardWindow.cardImageView1:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView1 ~= nil) then
            cardWindow.cardImageView1:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView1:hide()
        end
    end

    if (cardWindow.isHotOrder2) then
        local HotOrderTable = hotspotArrayTable[2]
        if (HotOrderTable == nil or cardWindow.cardImageView2 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 2) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView2, alphaTime)
            end
            cardWindow.cardImageView2:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView2 ~= nil) then
            cardWindow.cardImageView2:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView2:hide()
        end
    end

    if (cardWindow.isHotOrder3) then
        local HotOrderTable = hotspotArrayTable[3]
        if (HotOrderTable == nil or cardWindow.cardImageView3 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 3) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView3, alphaTime)
            end
            cardWindow.cardImageView3:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView3 ~= nil) then
            cardWindow.cardImageView3:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView3:hide()
        end
    end
end

--收集成功 未领取
local function collectState(data)
    -- cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, OS_CARD_GRADIENT_COLOR_2)
    cardWindow.cardFlexView:hide()
    cardWindow.cardProgressView:hide()
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local collectTable = dataTable.collect
    if (collectTable == nil) then
        return
    end
    local btnTitle = collectTable.btnTitle
    if (btnTitle ~= nil) then
        cardWindow.cardFlexLabel:text(btnTitle)
    end
    local content = collectTable.content
    if content ~= nil then
        cardWindow.cardTitleLabel:text(content)
    else
        cardWindow.cardTitleLabel:text("")
    end

    local imageUrl = collectTable.imageUrl
    if (imageUrl ~= nil) then
        cardWindow.cardContentImageView:image(imageUrl)
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil) then
        return
    end
    if (cardWindow.isHotOrder1) then
        local HotOrderTable = hotspotArrayTable[1]
        if (HotOrderTable == nil or cardWindow.cardImageView1 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView1:image(imageUrl)
            if (cardWindow.hotspotOrder == 1) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView1, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView1 ~= nil) then
            cardWindow.cardImageView1:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView1:hide()
        end
    end

    if (cardWindow.isHotOrder2) then
        local HotOrderTable = hotspotArrayTable[2]
        if (HotOrderTable == nil or cardWindow.cardImageView2 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView2:image(imageUrl)
            if (cardWindow.hotspotOrder == 2) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView2, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView2 ~= nil) then
            cardWindow.cardImageView2:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView2:hide()
        end
    end

    if (cardWindow.isHotOrder3) then
        local HotOrderTable = hotspotArrayTable[3]
        if (HotOrderTable == nil or cardWindow.cardImageView3 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView3:image(imageUrl)
            if (cardWindow.hotspotOrder == 3) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView3, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView3 ~= nil) then
            cardWindow.cardImageView3:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView3:hide()
        end
    end

    --点击lua文件
    cardWindow.cardBottomView:onClick(function()
        --TODO领奖操作逻辑处理
        cardWindow.collectStatus = 3
        postUserCardInfo()
        local clickLinkUrl = getHotspotClickTrackLink(data, 1)
        if (clickLinkUrl ~= nil) then
            Native:get(clickLinkUrl)
        end
        if (cardWindow.launchPlanId ~= nil) then
            osTrack(cardWindow.launchPlanId, 3, 1)
        end
        if collectTable.linkType == 2 then
            Native:widgetEvent(eventTypeClick, cardWindow.id, adTypeName, actionTypeOpenUrl, collectTable.linkUrl)
            performWithDelay(function()
                closeView()
            end, 500)
            return
        end

        cardWindow.cardFlexLabel:text("确定")
        cardWindow.cardWindowTopContentView:removeAllViews()
        local isPortrait = Native:isPortraitScreen()
        setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
        setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
        setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
        setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseImageView)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)

        local successTable = dataTable.success
        if (successTable == nil) then
            return
        end

        cardWindow.cardBottomView:onClick(function()
            Native:widgetEvent(eventTypeClick, cardWindow.id, adTypeName, actionTypeGetItem, successTable.itemId)
            closeView()
        end)

        local title = successTable.title
        if (title ~= nil) then
            cardWindow.cardTitleLabel:text(title)
        end

        local imageUrl = successTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardContentImageView:image(imageUrl)
        end
    end)
end

local function successState(data)
    -- cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, OS_CARD_GRADIENT_COLOR_2)
    cardWindow.cardFlexView:hide()
    cardWindow.cardProgressView:hide()
    cardWindow.cardFlexLabel:text("确定") --写死？？？

    cardWindow.cardWindowTopContentView:removeAllViews()
    local isPortrait = Native:isPortraitScreen()
    setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
    setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
    setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
    setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseImageView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)
    cardWindow.cardTitleLabel:text("您已经领取过这套卡牌奖励哦") --写死？？？
    cardWindow.cardBottomView:onClick(function()
        closeView()
    end)
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local successTable = dataTable.success
    if (successTable == nil) then
        return
    end

    local successImageUrl = successTable.imageUrl
    if (successImageUrl ~= nil) then
        cardWindow.cardContentImageView:image(successImageUrl)
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil or cardWindow.hotspotOrder == nil) then
        return
    end
    local hotspotItemTable = hotspotArrayTable[cardWindow.hotspotOrder]
    if (hotspotItemTable == nil) then
        return
    end
    local imageUrl = hotspotItemTable.imageUrl
    if (imageUrl ~= nil) then
        setBlurImage(cardWindow.cardBlurImageView, imageUrl)
    end
end

local function onCreate(data)
    if (cardWindow.launchPlanId ~= nil) then
        osTrack(cardWindow.launchPlanId, 1, 1)
    end

    local isPortrait = Native:isPortraitScreen()
    cardWindow.media = registerMedia()
    cardWindow.window = registerWindow()
    cardWindow.luaView = createLuaView(isPortrait)

    cardWindow.cardWindowView = createCardView(data, isPortrait)
    cardWindow.cardWindowTopContentView = createCardTopContentView(data, isPortrait)
    cardWindow.cardBlurImageView = createCardBlurView(data, isPortrait)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)

    cardWindow.cardCloseLayout, cardWindow.cardCloseImageView = createCardCloseImageView(data, isPortrait)
    cardWindow.cardBottomView, cardWindow.cardBottomBgView, cardWindow.cardFlexView, cardWindow.cardProgressView, cardWindow.cardFlexLabel = createCardBottomView(data, isPortrait)

    -- 首先判断状态
    if (cardWindow.collectStatus ~= 3) then
        cardWindow.cardImageLayout1, cardWindow.cardImageView1, cardWindow.cardBgView1, cardWindow.cardImageLayout2, cardWindow.cardImageView2, cardWindow.cardBgView2, cardWindow.cardImageLayout3, cardWindow.cardImageView3, cardWindow.cardBgView3 = createCardGroupView(data, isPortrait)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout1)
        if (cardWindow.sumHotspot == 3) then
            cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout3)
        end
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout2)
        if (isPortrait == false and cardWindow.sumHotspot >= 3) then
            cardWindow.cardImageLayout1:rotation(-10)
            cardWindow.cardImageLayout3:rotation(10)
        end
    end


    cardWindow.cardTitleLabel = createTitleView(data, isPortrait)
    cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView = createCardContentImageView(data, isPortrait)

	cardWindow.cardBottomView:addView(cardWindow.cardBottomBgView)
    cardWindow.cardBottomView:addView(cardWindow.cardFlexView)
    cardWindow.cardBottomView:addView(cardWindow.cardProgressView)
    cardWindow.cardBottomView:addView(cardWindow.cardFlexLabel)



    cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseLayout)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageShadowView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)

    cardWindow.cardWindowView:addView(cardWindow.cardWindowTopContentView)

    cardWindow.cardWindowView:addView(cardWindow.cardBottomView)

    cardWindow.luaView:addView(cardWindow.cardWindowView)

    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if System.ios() then
            cardWindow.cardWindowView:y(math.max(screenWidth, screenHeight))
            startViewTranslationAnim(cardWindow.cardWindowView, 0, -cardWindow.portraitHeight)
        else
            cardWindow.cardWindowView:translation(0, 438 * scale)
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 0)
        end

    else
        if System.ios() then
            cardWindow.cardWindowView:x(math.max(screenWidth, screenHeight))
            startViewTranslationAnim(cardWindow.cardWindowView, -200 * scale, 0)
        else
            cardWindow.cardWindowView:translation(200 * scale, 0)
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 0)
        end
    end

    cardWindow.cardWindowView:onClick(function()
    end)

    cardWindow.cardCloseLayout:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 438 * scale, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)

    cardWindow.luaView:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 438 * scale, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        else
            startViewTranslationAnim(cardWindow.cardWindowView, 200 * scale, 0, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)
    --- -逻辑处理----
    ------ 状态判断--------
    if (cardWindow.collectStatus == 1) then
        notCollectState(data)
    elseif (cardWindow.collectStatus == 2) then
        collectState(data)
    else
        successState(data)
    end
    Native:widgetEvent(eventTypeShow, cardWindow.id, adTypeName, actionTypeNone, "")
    rotationScreen(Native:isPortraitScreen())
end

local function setConfig(data)
    if (data == nil) then
        return
    end
    cardWindow.data = data
    local sumHotspot = data.sumHotspot
    if (sumHotspot == nil) then
        sumHotspot = 2
    end
    local hotspotOrder = data.hotspotOrder
    if (hotspotOrder == nil) then
        hotspotOrder = 0
    end
    local screenWidth, screenHeight = System.screenSize()
    local videoWidth, videoHight, marginTop = Native:getVideoSize(0)
    cardWindow.portraitWidth = math.min(screenWidth, screenHeight) --宽
    cardWindow.portraitHeight = math.max(screenWidth, screenHeight) - videoHight - marginTop --高
    cardWindow.sumHotspot = sumHotspot
    cardWindow.hotspotOrder = hotspotOrder + 1 --当前热点序号
    cardWindow.hotspotRatio = 0.333 --收集占半分比
    cardWindow.collectStatus = 1
    cardWindow.collectCount = 1
    cardWindow.id = "os_card_window" .. tostring(data.id) .. tostring(data.hotspotOrder)
    cardWindow.launchPlanId = data.launchPlanId
    cardWindow.isHotOrder1 = false
    cardWindow.isHotOrder2 = false
    cardWindow.isHotOrder3 = false
    if data.data.userCardInfo ~= nil then
        -- print("LuaView os card window userCardInfo "..Native:tableToJson(data.data.userCardInfo))
        cardWindow.userCardInfo = data.data.userCardInfo
        if cardWindow.hotspotOrder == 1 then
            cardWindow.userCardInfo.isHotOrder1 = true
        elseif cardWindow.hotspotOrder == 2 then
            cardWindow.userCardInfo.isHotOrder2 = true
        elseif cardWindow.hotspotOrder == 3 then
            cardWindow.userCardInfo.isHotOrder3 = true
        end

        cardWindow.collectStatus = cardWindow.userCardInfo.collectStatus
        cardWindow.isHotOrder1 = cardWindow.userCardInfo.isHotOrder1
        cardWindow.isHotOrder2 = cardWindow.userCardInfo.isHotOrder2 --是否收集状态
        cardWindow.isHotOrder3 = cardWindow.userCardInfo.isHotOrder3
        cardWindow.collectStatus = checkCollectStatus()
        if cardWindow.userCardInfo.collectStatus == 1 then
            postUserCardInfo()
        end
        if (cardWindow.collectStatus == 2) then
            local showLinkUrl = getHotspotExposureTrackLink(data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (cardWindow.launchPlanId ~= nil) then
                osTrack(cardWindow.launchPlanId, 2, 1)
            end
        end
    else
        if cardWindow.hotspotOrder == 1 then
            cardWindow.isHotOrder1 = true
        elseif cardWindow.hotspotOrder == 2 then
            cardWindow.isHotOrder2 = true
        elseif cardWindow.hotspotOrder == 3 then
            cardWindow.isHotOrder3 = true
        end
        postUserCardInfo()
    end
    if (cardWindow.sumHotspot == 2) then
        if cardWindow.collectCount < 2 then
            cardWindow.hotspotRatio = cardWindow.collectCount / 2.0
        end
    elseif (cardWindow.sumHotspot == 3) then
        if cardWindow.collectCount < 3 then
            cardWindow.hotspotRatio = cardWindow.collectCount / 3.0
        end
    end
    -- cardWindow.collectStatus = 3 --1.收集未成功 2.收集成功 3.领取成功
    -- if (cardWindow.collectStatus == 1) then
    -- cardWindow.isHotOrder1 = false
    -- cardWindow.isHotOrder2 = true --是否收集状态
    -- cardWindow.isHotOrder3 = false
    -- else
    --     cardWindow.isHotOrder1 = true
    --     cardWindow.isHotOrder2 = true --是否收集状态
    --     cardWindow.isHotOrder3 = true
    -- end
end

function show(args)
    if (args == nil or args.data == nil or cardWindow.luaView ~= nil) then
        return
    end
    cardWindow.request = HttpRequest()
    setConfig(args.data)

    onCreate(args.data)
    -- postUserCardInfo()
end

