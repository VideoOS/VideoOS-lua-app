--
-- Created by IntelliJ IDEA.
-- User: videojj_pls
-- Date: 2018/11/6
-- Time: 10:22 AM
-- To change this template use File | Settings | File Templates.
--
require "os_config"
require "os_string"
require "os_constant"
require "os_util"
require "os_track"
cardWindow = object:new()
local adTypeName = "cardWindow"
local scale = getScale()
local OS_ICON_WEDGE_CLOSE = "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAtCAYAAAA6GuKaAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAhOAAAITgBRZYxYAAAABxpRE9UAAAAAgAAAAAAAAAXAAAAKAAAABcAAAAWAAABJuDZqwUAAADySURBVGgFxNYxDsIwDAXQDiwwcR1uwB1ghpUj5Oh8S3yE2rTYju1GsiIlqf3Swe009ccFyw/Esb+dsnpA1hvi6sku4PaJJ+YKOMGsa4L/gpkgGz4Hs64K3gMzQRZ8Dcy6m/AtMBNEw/+BWbcL14CZIAquBbPuAi5dgpuaeRQu4Lux5gvnT4jvkO4gkGYIL9z6hsUk4DNiMSrgoWDeIBOeAs6Ep4Iz4CXgSHgpOAK+C3gU7unD3bZGiHX2dJWGItpY7cNW6Px8FjwNzAtEw9PB0fAycBS8HDwK3w0scOnD1rbW8Iz37xCPjg3Ph6OhJGMY/gYAAP//68uhBAAAANxJREFU7dZNDoIwEAVgEl2gK4/lCdh4ALceoUf3DfEloIjTdt6sbDIpJHTeF34ahqFuHHH5DVU66471J5R8RIELpFZyeDRYDleBZfAW8OP16InyzGGvSiv4ArR9ZAbxgHlNN7wHDOs8UuER4FR4JDgFrgBL4UqwBJ4BDofX/kvYPmzbWuto3VXGZeAVJ8VZvWDm1sInLDxwMWcPPArMTC98E8wme/BoMDN/wXfBbLIFV4GZ+Q3uArPJEq4GM/MdXgVmE4NngZlJeBOYTc48SJxHZH3sEon5/6jVHXgCCd+jGkmWfYoAAAAASUVORK5CYII="
local OS_ICON_CARD_IMAGE_BG = "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"
local OS_ICON_CARD_NO_COLLECT = ""

local OS_CARD_LANDSCAPE_BG = "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"

local OS_CARD_PORTRAIT_BG = ""

local OS_CARD_PORTRAIT_SHADOW = ""
local OS_CARD_LANDSCAPE_SHADOW = ""

local OS_CARD_GRADIENT_COLOR_1 = 0xFC6767
local OS_CARD_GRADIENT_COLOR_2 = 0xFF39DB
local OS_CARD_GRADIENT_COLOR_3 = 0x2B111A

local adTypeName = "CardWindow"
local blurUrl = nil
cardWindow.userCardInfo = {}
cardWindow.requestIds = {}
local alphaTime = 1.0

local function translationAnim(x, y)
    local anim = Animation():translation(x, y):duration(0.3)
    return anim
end

local function startViewTranslationAnim(view, x, y, table)
    if (view == nil) then
        return
    end
    if table ~= nil then
        translationAnim(x, y):with(view):callback(table):start()
    else
        translationAnim(x, y):with(view):start()
    end
end

local function startShowAnimation(view, duration)
    if (view == nil) then
        return
    end
    print("Luaview startShowAnimation")
    view:alpha(0)
    local anim = Animation():alpha(1.0):duration(duration):with(view):start()
    return anim
end

local function getHotspotExposureTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.exposureTrackLink
end

local function getHotspotClickTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.clickTrackLink
end

local function closeView()
    for key, value in pairs(cardWindow.requestIds) do
        if (value ~= nil) then
            Native:abort(value)
        end
    end
    Native:widgetEvent(eventTypeClose, cardWindow.id, adTypeName, actionTypeNone, "")
    Native:destroyView()
end

local function setBlurImage(blurView, imageUrl)
    if (blurView == nil or imageUrl == nil) then
        return
    end
    -- blurUrl = imageUrl
    -- blurView:imageBlur(imageUrl, 8)
    local isPortrait = Native:isPortraitScreen()
    if isPortrait then
        blurView:image(Data(OS_CARD_PORTRAIT_BG))
    else
        blurView:image(Data(OS_CARD_LANDSCAPE_BG))
    end
end

local function checkCollectStatus()

    if cardWindow.collectStatus == 3 then
        return 3
    end

    local collectCount = 0
    if cardWindow.isHotOrder1 == true then
        collectCount = collectCount + 1;
    end
    if cardWindow.isHotOrder2 == true then
        collectCount = collectCount + 1;
    end
    if cardWindow.isHotOrder3 == true then
        collectCount = collectCount + 1;
    end
    cardWindow.collectCount = collectCount
    if collectCount == cardWindow.sumHotspot then
        return 2
    end
    return 1
end

local function postUserCardInfo()

    local businessInfoTable = {
        collectStatus = checkCollectStatus(),
        isHotOrder1 = cardWindow.isHotOrder1,
        isHotOrder2 = cardWindow.isHotOrder2,
        isHotOrder3 = cardWindow.isHotOrder3,
    }

    local businessParamTable = {
        userId = Native:getIdentity(),
        creativeId = cardWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    -- print("[LuaView] " .. OS_HTTP_POST_MOBILE_QUERY)
    -- print("[LuaView] " .. Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    local requestId = cardWindow.request:post(OS_HTTP_POST_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview postUserCardInfo")
        if (response == nil) then
            return
        end
        -- print("luaview postUserCardInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.launchInfoList
        if (dataTable == nil) then
            return
        end
    end, cardWindow.luaView)
    table.insert(cardWindow.requestIds, requestId)
end

local function getUserCardInfo()

    local businessInfo = {
        userId = Native:getIdentity(),
        creativeId = cardWindow.data.creativeId
    }

    local paramData = {
        businessParam = businessInfo,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    -- print("[LuaView] "..paramDataString)
    -- print("[LuaView] "..OS_HTTP_GET_MOBILE_QUERY)
    -- print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    local requestId = cardWindow.request:post(OS_HTTP_GET_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        -- print("luaview getUserVoteInfo")
        if (response == nil) then
            return
        end
        -- print("luaview getUserVoteInfo 11"..Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.businessInfo
        if (dataTable == nil) then
            postUserCardInfo()
            return
        end
        cardWindow.data.data.userCardInfo = dataTable
    end, cardWindow.luaView)
    table.insert(cardWindow.requestIds, requestId)
end

local function setLuaViewSize(luaview, isPortrait) --设置当前容器大小
    if (luaview == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        luaview:frame(0, 0, math.min(screenWidth, screenHeight), math.max(screenWidth, screenHeight))
    else
        luaview:frame(0, 0, math.max(screenWidth, screenHeight), math.min(screenWidth, screenHeight))
        if (System.android()) then
            luaview:align(Align.RIGHT)
        end
    end
end

local function setCardViewSize(data, cardWindowView, isPortrait) --设置当前容器大小
    if (data == nil or cardWindowView == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if (System.android()) then
            cardWindowView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight)
            cardWindowView:align(Align.BOTTOM)
        else
            cardWindowView:frame(0, math.max(screenWidth, screenHeight) - cardWindow.portraitHeight, cardWindow.portraitWidth, cardWindow.portraitHeight)
        end
    else
        if (System.android()) then
            cardWindowView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
            cardWindowView:align(Align.RIGHT)
        else
            cardWindowView:frame(math.max(screenWidth, screenHeight) - 200 * scale, 0, 200 * scale, math.min(screenWidth, screenHeight))
        end
    end
end

local function setCardTopContentViewSize(data, cardWindowTopContentView, isPortrait) --设置当前容器大小
    if (data == nil or cardWindowTopContentView == nil) then
        return
    end
    if (isPortrait) then
        cardWindowTopContentView:backgroundColor(0xEAEAEA, 1)
        cardWindowTopContentView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.877)
    else
        cardWindowTopContentView:backgroundColor(0x000000, 0)
        cardWindowTopContentView:frame(0, 0, 200 * scale, 336.8 * scale)
        cardWindowTopContentView:align(Align.RIGHT)
    end
end

local function setCardBlurViewViewSize(data, cardBlurView, isPortrait) --设置当前容器大小
    if (data == nil or cardBlurView == nil) then
        return
    end
    if (isPortrait) then
        cardBlurView:image(Data(OS_CARD_PORTRAIT_BG))
        cardBlurView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 1.0)
    else
        cardBlurView:image(Data(OS_CARD_LANDSCAPE_BG))
        cardBlurView:frame(0, 0, 200 * scale, 336.8 * scale)
    end
end

local function setCardImageLayoutSize(data, index, cardImageLayout, cardImage, cardBgView, isPortrait)
    if (data == nil or cardImageLayout == nil or cardImage == nil or cardBgView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.sumHotspot == 2) then
            w = cardWindow.portraitWidth * 0.276
            --            h = cardWindow.portraitHeight * 0.317
            h = w / 0.743
            y = cardWindow.portraitHeight * 0.086
            if (index == 1) then
                x = cardWindow.portraitWidth * 0.205
            else
                x = cardWindow.portraitWidth * 0.520
            end
        else
            w = cardWindow.portraitWidth * 0.276
            --            h = cardWindow.portraitHeight * 0.317
            h = w / 0.743
            y = cardWindow.portraitHeight * 0.086
            if (index == 1) then
                x = cardWindow.portraitWidth * 0.057
            elseif index == 2 then
                x = cardWindow.portraitWidth * 0.363
            else
                x = cardWindow.portraitWidth * 0.667
            end
        end
    else
        if (cardWindow.sumHotspot == 2) then
            w = 78.2 * scale
            h = 105.2 * scale
            y = 42 * scale
            if (index == 1) then
                x = 17.6 * scale
            elseif (index == 2) then
                x = 105.6 * scale
            end
        else
            w = 85.2 * scale
            h = 114.4 * scale
            y = 29 * scale
            if (index == 1) then
                x = 14.9 * scale
                y = 39 * scale
            elseif index == 2 then
                x = 57.5 * scale
                y = 29 * scale
            else
                x = 100.1 * scale
                y = 39 * scale
            end
        end
    end

    cardImageLayout:frame(x, y, w, h)
    cardImage:frame(scale, scale, w - 2 * scale, h - 2 * scale)
    cardBgView:frame(0, 0, w, h)
    --    cardImage:cornerRadius(5 * scale)
end

local function setCardBottomViewSize(data, cardBottomView, cardFlexView, cardFlexLabel, isPortrait) --设置当前容器大小
    if (data == nil or cardBottomView == nil or cardFlexView == nil or cardFlexLabel == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    local corner = 0
    if (isPortrait) then
        cardBottomView:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
        cardBottomView:align(Align.BOTTOM)
        cardFlexView:frame(0, 0, cardWindow.hotspotRatio * cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
        corner = cardWindow.portraitHeight * 0.123 / 2
        cardFlexLabel:frame(0, 0, cardWindow.portraitWidth, cardWindow.portraitHeight * 0.123)
    else
        cardBottomView:frame(0, 0, 200 * scale, 38.3 * scale)
        cardBottomView:align(Align.BOTTOM)
        cardFlexView:frame(0, 0, cardWindow.hotspotRatio * 200 * scale, 38.3 * scale)
        cardFlexLabel:frame(0, 0, 200 * scale, 38.3 * scale)
        corner = 19.15 * scale
    end

    cardFlexView:corner(0, 0, corner, corner, corner, corner, 0, 0)
end

local function setCardTitleViewSize(data, cardTitleView, isPortrait)
    if (data == nil or cardTitleView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.collectStatus == 3) then
            x = cardWindow.portraitWidth * 0.227
            y = cardWindow.portraitHeight * 0.643
            w = cardWindow.portraitWidth * 0.567
            h = cardWindow.portraitHeight * 0.082
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(15)
        else
            x = cardWindow.portraitWidth * 0.227
            w = cardWindow.portraitWidth * 0.567
            if (System.android()) then
                y = cardWindow.portraitHeight * 0.423
                h = cardWindow.portraitHeight * 0.136
            else
                y = cardWindow.portraitHeight * 0.408
                h = cardWindow.portraitHeight * 0.090
            end
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(15)
        end
    else
        if (cardWindow.collectStatus == 3) then
            x = 13.9 * scale
            y = 200.5 * scale
            w = 171 * scale
            h = 40 * scale
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(13)
        else
            x = 13.9 * scale
            y = 173.5 * scale
            w = 171 * scale
            h = 40 * scale
            cardTitleView:textColor(0xFFFFFF)
            cardTitleView:textSize(13)
        end
    end
    --    if (System.android()) then
    --        cardTitleView:margin(x, y, x, 0)
    --    else
    --        cardTitleView:frame(x, y, w, h)
    --    end
    cardTitleView:frame(x, y, w, h)
end

local function setCardContentImageView(data, cardContentImageView, cardContentImageShadowView, isPortrait)
    if (data == nil or cardContentImageView == nil) then
        return
    end
    local x, y, w, h = 0, 0, 0, 0
    if (isPortrait) then
        if (cardWindow.collectStatus == 3) then
            x = cardWindow.portraitWidth * 0.120
            y = cardWindow.portraitHeight * 0.207
            w = cardWindow.portraitWidth * 0.763
            h = w * 80.0 / 165.0 --cardWindow.portraitHeight * 0.316
        else
            x = cardWindow.portraitWidth * 0.187
            y = cardWindow.portraitHeight * 0.558
            w = cardWindow.portraitWidth * 0.628
            h = w * 80.0 / 165.0 --cardWindow.portraitHeight * 0.260
        end
        -- cardContentImageShadowView:backgroundColor(0xFF0000)
        cardContentImageShadowView:image(Data(OS_CARD_PORTRAIT_SHADOW))
        cardContentImageShadowView:frame((cardWindow.portraitWidth - 348 * scale) * 0.5, y + h - 8 * scale, 348 * scale, 16 * scale)
    else
        if (cardWindow.collectStatus == 3) then
            x = 17.7 * scale
            y = 96.5 * scale
            w = 165 * scale
            h = 80 * scale
        else
            x = 17.7 * scale
            y = 225.5 * scale
            w = 165 * scale
            h = 80 * scale
        end
        -- cardContentImageShadowView:backgroundColor(0xFF00FF)
        cardContentImageShadowView:image(Data(OS_CARD_LANDSCAPE_SHADOW))
        cardContentImageShadowView:frame(0 * scale, y + h - 6 * scale, 200 * scale, 12 * scale)
    end
    cardContentImageView:frame(x, y, w, h)
end

local function setCardCloseImageView(data, cardCloseLayout, cardCloseImageView, isPortrait)
    if (data == nil or cardCloseLayout == nil or cardCloseImageView == nil) then
        return
    end
    --    local x, y, w, h = 0, 0, 0, 0
    local size = cardWindow.portraitHeight * 0.083
    if (isPortrait) then
        --        x = 350 * scale
        --        y = 8 * scale
        --        w = 15 * scale
        --        h = 15 * scale
        cardCloseLayout:frame(0, 0, size, size)
        cardCloseImageView:frame(0, 0, 15 * scale, 15 * scale)
        cardCloseImageView:show()
        cardCloseLayout:align(Align.RIGHT)
        cardCloseImageView:align(Align.CENTER)
    else
        cardCloseImageView:hide()
    end
end

--屏幕旋转--
local function rotationScreen(isPortrait)
    setLuaViewSize(cardWindow.luaView, isPortrait)
    setCardViewSize(cardWindow.data, cardWindow.cardWindowView, isPortrait)
    setCardTopContentViewSize(cardWindow.data, cardWindow.cardWindowTopContentView, isPortrait)
    setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
    setCardBottomViewSize(cardWindow.data, cardWindow.cardBottomView, cardWindow.cardFlexView, cardWindow.cardFlexLabel, isPortrait)
    setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
    if (cardWindow.collectStatus ~= 3) then
        if (cardWindow.cardImageLayout3 ~= nil) then
            cardWindow.cardImageLayout1:rotation(0)
            cardWindow.cardImageLayout3:rotation(0)
        end
        setCardImageLayoutSize(cardWindow.data, 1, cardWindow.cardImageLayout1, cardWindow.cardImageView1, cardWindow.cardBgView1, isPortrait)
        setCardImageLayoutSize(cardWindow.data, 2, cardWindow.cardImageLayout2, cardWindow.cardImageView2, cardWindow.cardBgView2, isPortrait)
        setCardImageLayoutSize(cardWindow.data, 3, cardWindow.cardImageLayout3, cardWindow.cardImageView3, cardWindow.cardBgView3, isPortrait)
        if (isPortrait == false and cardWindow.cardImageLayout3 ~= nil and cardWindow.sumHotspot >= 3) then
            cardWindow.cardImageLayout1:rotation(-10)
            cardWindow.cardImageLayout3:rotation(10)
        end
    end
    setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
    setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
end

local function registerMedia()
    local media = Media()
    -- body
    -- 注册window callback通知
    local callbackTable = {
        --0: 竖屏小屏幕，1 竖屏全凭，2 横屏全屏
        onPlayerSize = function(type)
            if (type == 0) then
                rotationScreen(true)
            elseif (type == 1) then
                rotationScreen(true)
            elseif (type == 2) then
                rotationScreen(false)
            end
        end
    }
    media:mediaCallback(callbackTable)
    return media
end

local function registerWindow()
    local nativeWindow = nil
    if System.ios() then
        nativeWindow = NativeWindow()
    else
        nativeWindow = nativeWindow
    end
    local callbackTable = {
        onShow = function()
            if (System.android()) then
                setBlurImage(cardWindow.cardBlurImageView, blurUrl)
            end
        end
    }
    if (nativeWindow == nil and System.android()) then
        nativeWindow = window
    end
    if (nativeWindow == nil) then
        return
    end
    nativeWindow:callback(callbackTable)
    return nativeWindow
end

--全局父控件
local function createLuaView(isPortrait)
    local luaView
    -- if System.android() then
    --     luaView = View()
    -- else
    --     luaView = ThroughView()
    -- end
    luaView = View()
    setLuaViewSize(luaView, isPortrait)
    return luaView
end

local function createCardView(data, isPortrait)
    local cardWindowView = View()

    setCardViewSize(data, cardWindowView, isPortrait)

    return cardWindowView
end

local function createCardTopContentView(data, isPortrait)
    local cardWindowTopContentView = View()
    setCardTopContentViewSize(data, cardWindowTopContentView, isPortrait)
    return cardWindowTopContentView
end

local function createCardBlurView(data, isPortrait)
    local cardBlurImageView = Image(Native)
    cardBlurImageView:scaleType(ScaleType.FIT_XY)
    setCardBlurViewViewSize(data, cardBlurImageView, isPortrait)
    return cardBlurImageView
end

--创建单个--
local function createCardImageItem()
    local cardImageLayout = View()
    local cardImageView = Image(Native)
    cardImageView:scaleType(ScaleType.FIT_XY)
    local cardBgView = Image(Native)
    cardBgView:image(Data(OS_ICON_CARD_IMAGE_BG))
    cardBgView:scaleType(ScaleType.FIT_XY)
    cardImageLayout:addView(cardImageView)
    cardImageLayout:addView(cardBgView)
    return cardImageLayout, cardImageView, cardBgView
end

local function createCardGroupView(data, isPortrait)
    local cardImageLayout1, cardImageView1, cardBgView1 = createCardImageItem()
    local cardImageLayout2, cardImageView2, cardBgView2 = createCardImageItem()
    local cardImageLayout3, cardImageView3, cardBgView3
    if (cardWindow.sumHotspot == 3) then
        cardImageLayout3, cardImageView3, cardBgView3 = createCardImageItem()
    end
    setCardImageLayoutSize(data, 1, cardImageLayout1, cardImageView1, cardBgView1, isPortrait)
    setCardImageLayoutSize(data, 2, cardImageLayout2, cardImageView2, cardBgView2, isPortrait)
    setCardImageLayoutSize(data, 3, cardImageLayout3, cardImageView3, cardBgView3, isPortrait)
    return cardImageLayout1, cardImageView1, cardBgView1, cardImageLayout2, cardImageView2, cardBgView2, cardImageLayout3, cardImageView3, cardBgView3
end

local function createCardBottomView(data, isPortrait)
    local cardBottomView = GradientView()
    cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_3, OS_CARD_GRADIENT_COLOR_3)

    local cardFlexView = GradientView()
    if System.ios() then
        cardFlexView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, 0.0, 0.5, 1.0, 0.5)
    else
        cardFlexView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, Orientation.LEFT_RIGHT)
    end

    local text = "运气真好，还差" .. tostring(cardWindow.sumHotspot - cardWindow.collectCount) .. "张就成功啦"
    local cardFlexLabel = Label(Native)
    cardFlexLabel:text(text)
    cardFlexLabel:textColor(0xFFFFFF)
    cardFlexLabel:textAlign(TextAlign.CENTER)

    setCardBottomViewSize(data, cardBottomView, cardFlexView, cardFlexLabel, isPortrait)

    return cardBottomView, cardFlexView, cardFlexLabel
end

local function createCardCloseImageView(data, isPortrait)
    local cardCloseLayout = View()
    cardCloseLayout:align(Align.RIGHT)
    local cardCloseImageView = Image(Native)
    cardCloseImageView:align(Align.CENTER)
    cardCloseImageView:scaleType(ScaleType.FIT_XY)
    cardCloseImageView:image(Data(OS_ICON_WEDGE_CLOSE))
    cardCloseImageView:hide()
    setCardCloseImageView(data, cardCloseLayout, cardCloseImageView, isPortrait)
    cardCloseLayout:addView(cardCloseImageView)
    return cardCloseLayout, cardCloseImageView
end

local function createTitleView(data, isPortrait)
    local cardTitleLabel = Label(Native)
    cardTitleLabel:textAlign(TextAlign.CENTER)
    cardTitleLabel:lines(2)
    cardTitleLabel:text("")
    setCardTitleViewSize(data, cardTitleLabel, isPortrait)
    return cardTitleLabel
end

local function createCardContentImageView(data, isPortrait)
    local cardContentImageView = Image(Native)
    cardContentImageView:scaleType(ScaleType.CENTER_CROP)

    local cardContentImageShadowView = Image(Native)
    cardContentImageShadowView:scaleType(ScaleType.CENTER_CROP)
    setCardContentImageView(data, cardContentImageView, cardContentImageShadowView, isPortrait)
    return cardContentImageView, cardContentImageShadowView
end

--未收集成功 默认无需处理
local function notCollectState(data)
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local collectTable = dataTable.collect
    if (collectTable == nil) then
        return
    end
    -- print("LuaView notCollectState "..Native:tableToJson(dataTable))
    local contentImageUrl = collectTable.imageUrl
    if (contentImageUrl ~= nil) then
        cardWindow.cardContentImageView:image(contentImageUrl)
    end
    local content = collectTable.content
    if content ~= nil then
        cardWindow.cardTitleLabel:text(content)
    else
        cardWindow.cardTitleLabel:text("")
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil) then
        return
    end
    -- print("LuaView hotspotArrayTable "..Native:tableToJson(hotspotArrayTable))
    if (cardWindow.isHotOrder1) then
        local HotOrderTable = hotspotArrayTable[1]
        if (HotOrderTable == nil or cardWindow.cardImageView1 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 1) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView1, alphaTime)
            end
            cardWindow.cardImageView1:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView1 ~= nil) then
            cardWindow.cardImageView1:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView1:hide()
        end
    end

    if (cardWindow.isHotOrder2) then
        local HotOrderTable = hotspotArrayTable[2]
        if (HotOrderTable == nil or cardWindow.cardImageView2 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 2) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView2, alphaTime)
            end
            cardWindow.cardImageView2:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView2 ~= nil) then
            cardWindow.cardImageView2:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView2:hide()
        end
    end

    if (cardWindow.isHotOrder3) then
        local HotOrderTable = hotspotArrayTable[3]
        if (HotOrderTable == nil or cardWindow.cardImageView3 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            if (cardWindow.hotspotOrder == 3) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView3, alphaTime)
            end
            cardWindow.cardImageView3:image(imageUrl)
        end
    else
        if (cardWindow.cardImageView3 ~= nil) then
            cardWindow.cardImageView3:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView3:hide()
        end
    end
end

--收集成功 未领取
local function collectState(data)
    if System.ios() then
        cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, 0.0, 0.5, 1.0, 0.5)
    else
        cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, Orientation.LEFT_RIGHT)
    end
    cardWindow.cardFlexView:hide()
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local collectTable = dataTable.collect
    if (collectTable == nil) then
        return
    end
    local btnTitle = collectTable.btnTitle
    if (btnTitle ~= nil) then
        cardWindow.cardFlexLabel:text(btnTitle)
    end
    local content = collectTable.content
    if content ~= nil then
        cardWindow.cardTitleLabel:text(content)
    else
        cardWindow.cardTitleLabel:text("")
    end

    local imageUrl = collectTable.imageUrl
    if (imageUrl ~= nil) then
        cardWindow.cardContentImageView:image(imageUrl)
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil) then
        return
    end
    if (cardWindow.isHotOrder1) then
        local HotOrderTable = hotspotArrayTable[1]
        if (HotOrderTable == nil or cardWindow.cardImageView1 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView1:image(imageUrl)
            if (cardWindow.hotspotOrder == 1) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView1, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView1 ~= nil) then
            cardWindow.cardImageView1:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView1:hide()
        end
    end

    if (cardWindow.isHotOrder2) then
        local HotOrderTable = hotspotArrayTable[2]
        if (HotOrderTable == nil or cardWindow.cardImageView2 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView2:image(imageUrl)
            if (cardWindow.hotspotOrder == 2) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView2, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView2 ~= nil) then
            cardWindow.cardImageView2:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView2:hide()
        end
    end

    if (cardWindow.isHotOrder3) then
        local HotOrderTable = hotspotArrayTable[3]
        if (HotOrderTable == nil or cardWindow.cardImageView3 == nil) then
            return
        end
        local imageUrl = HotOrderTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardImageView3:image(imageUrl)
            if (cardWindow.hotspotOrder == 3) then
                setBlurImage(cardWindow.cardBlurImageView, imageUrl)
                startShowAnimation(cardWindow.cardImageView3, alphaTime)
            end
        end
    else
        if (cardWindow.cardImageView3 ~= nil) then
            cardWindow.cardImageView3:image(Data(OS_ICON_CARD_NO_COLLECT))
            cardWindow.cardBgView3:hide()
        end
    end

    --点击lua文件
    cardWindow.cardBottomView:onClick(function()
        --TODO领奖操作逻辑处理
        cardWindow.collectStatus = 3
        postUserCardInfo()
        local clickLinkUrl = getHotspotClickTrackLink(data, 1)
        if (clickLinkUrl ~= nil) then
            Native:get(clickLinkUrl)
        end
        if (cardWindow.launchPlanId ~= nil) then
            osTrack(cardWindow.launchPlanId, 3, 1)
        end
        if collectTable.linkType == 2 then
            Native:widgetEvent(eventTypeClick, cardWindow.id, adTypeName, actionTypeOpenUrl, collectTable.linkUrl)
            performWithDelay(function()
                closeView()
            end, 500)
            return
        end

        cardWindow.cardFlexLabel:text("确定")
        cardWindow.cardWindowTopContentView:removeAllViews()
        local isPortrait = Native:isPortraitScreen()
        setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
        setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
        setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
        setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseImageView)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)

        local successTable = dataTable.success
        if (successTable == nil) then
            return
        end

        cardWindow.cardBottomView:onClick(function()
            Native:widgetEvent(eventTypeClick, cardWindow.id, adTypeName, actionTypeGetItem, successTable.itemId)
            closeView()
        end)

        local title = successTable.title
        if (title ~= nil) then
            cardWindow.cardTitleLabel:text(title)
        end

        local imageUrl = successTable.imageUrl
        if (imageUrl ~= nil) then
            cardWindow.cardContentImageView:image(imageUrl)
        end
    end)
end

local function successState(data)
    if System.ios() then
        cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, 0.0, 0.5, 1.0, 0.5)
    else
        cardWindow.cardBottomView:gradient(OS_CARD_GRADIENT_COLOR_1, 1.0, OS_CARD_GRADIENT_COLOR_2, 1.0, Orientation.LEFT_RIGHT)
    end
    cardWindow.cardFlexView:hide()
    cardWindow.cardFlexLabel:text("确定") --写死？？？

    cardWindow.cardWindowTopContentView:removeAllViews()
    local isPortrait = Native:isPortraitScreen()
    setCardBlurViewViewSize(cardWindow.data, cardWindow.cardBlurImageView, isPortrait)
    setCardCloseImageView(cardWindow.data, cardWindow.cardCloseLayout, cardWindow.cardCloseImageView, isPortrait)
    setCardTitleViewSize(cardWindow.data, cardWindow.cardTitleLabel, isPortrait)
    setCardContentImageView(cardWindow.data, cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView, isPortrait)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseImageView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)
    cardWindow.cardTitleLabel:text("您已经领取过这套卡牌奖励哦") --写死？？？
    cardWindow.cardBottomView:onClick(function()
        closeView()
    end)
    local dataTable = data.data
    if (dataTable == nil) then
        return
    end
    local successTable = dataTable.success
    if (successTable == nil) then
        return
    end

    local successImageUrl = successTable.imageUrl
    if (successImageUrl ~= nil) then
        cardWindow.cardContentImageView:image(successImageUrl)
    end
    local hotspotArrayTable = dataTable.hotspotArray
    if (hotspotArrayTable == nil or cardWindow.hotspotOrder == nil) then
        return
    end
    local hotspotItemTable = hotspotArrayTable[cardWindow.hotspotOrder]
    if (hotspotItemTable == nil) then
        return
    end
    local imageUrl = hotspotItemTable.imageUrl
    if (imageUrl ~= nil) then
        setBlurImage(cardWindow.cardBlurImageView, imageUrl)
    end
end

local function onCreate(data)
    if (cardWindow.launchPlanId ~= nil) then
        osTrack(cardWindow.launchPlanId, 1, 1)
    end

    local isPortrait = Native:isPortraitScreen()
    cardWindow.media = registerMedia()
    cardWindow.window = registerWindow()
    cardWindow.luaView = createLuaView(isPortrait)

    cardWindow.cardWindowView = createCardView(data, isPortrait)
    cardWindow.cardWindowTopContentView = createCardTopContentView(data, isPortrait)
    cardWindow.cardBlurImageView = createCardBlurView(data, isPortrait)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardBlurImageView)

    cardWindow.cardCloseLayout, cardWindow.cardCloseImageView = createCardCloseImageView(data, isPortrait)
    cardWindow.cardBottomView, cardWindow.cardFlexView, cardWindow.cardFlexLabel = createCardBottomView(data, isPortrait)

    -- 首先判断状态
    if (cardWindow.collectStatus ~= 3) then
        cardWindow.cardImageLayout1, cardWindow.cardImageView1, cardWindow.cardBgView1, cardWindow.cardImageLayout2, cardWindow.cardImageView2, cardWindow.cardBgView2, cardWindow.cardImageLayout3, cardWindow.cardImageView3, cardWindow.cardBgView3 = createCardGroupView(data, isPortrait)
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout1)
        if (cardWindow.sumHotspot == 3) then
            cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout3)
        end
        cardWindow.cardWindowTopContentView:addView(cardWindow.cardImageLayout2)
        if (isPortrait == false and cardWindow.sumHotspot >= 3) then
            cardWindow.cardImageLayout1:rotation(-10)
            cardWindow.cardImageLayout3:rotation(10)
        end
    end


    cardWindow.cardTitleLabel = createTitleView(data, isPortrait)
    cardWindow.cardContentImageView, cardWindow.cardContentImageShadowView = createCardContentImageView(data, isPortrait)

    cardWindow.cardBottomView:addView(cardWindow.cardFlexView)
    cardWindow.cardBottomView:addView(cardWindow.cardFlexLabel)

    cardWindow.cardWindowTopContentView:addView(cardWindow.cardCloseLayout)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardTitleLabel)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageShadowView)
    cardWindow.cardWindowTopContentView:addView(cardWindow.cardContentImageView)

    cardWindow.cardWindowView:addView(cardWindow.cardWindowTopContentView)

    cardWindow.cardWindowView:addView(cardWindow.cardBottomView)

    cardWindow.luaView:addView(cardWindow.cardWindowView)

    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if System.ios() then
            cardWindow.cardWindowView:y(math.max(screenWidth, screenHeight))
            startViewTranslationAnim(cardWindow.cardWindowView, 0, -cardWindow.portraitHeight)
        else
            cardWindow.cardWindowView:translation(0, 438 * scale)
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 0)
        end

    else
        if System.ios() then
            cardWindow.cardWindowView:x(math.max(screenWidth, screenHeight))
            startViewTranslationAnim(cardWindow.cardWindowView, -200 * scale, 0)
        else
            cardWindow.cardWindowView:translation(200 * scale, 0)
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 0)
        end
    end

    cardWindow.cardWindowView:onClick(function()
    end)

    cardWindow.cardCloseLayout:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 438 * scale, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)

    cardWindow.luaView:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(cardWindow.cardWindowView, 0, 438 * scale, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        else
            startViewTranslationAnim(cardWindow.cardWindowView, 200 * scale, 0, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)
    --- -逻辑处理----
    ------ 状态判断--------
    if (cardWindow.collectStatus == 1) then
        notCollectState(data)
    elseif (cardWindow.collectStatus == 2) then
        collectState(data)
    else
        successState(data)
    end
    Native:widgetEvent(eventTypeShow, cardWindow.id, adTypeName, actionTypeNone, "")
end

local function setConfig(data)
    if (data == nil) then
        return
    end
    cardWindow.data = data
    local sumHotspot = data.sumHotspot
    if (sumHotspot == nil) then
        sumHotspot = 2
    end
    local hotspotOrder = data.hotspotOrder
    if (hotspotOrder == nil) then
        hotspotOrder = 0
    end
    local screenWidth, screenHeight = System.screenSize()
    local videoWidth, videoHight, marginTop = Native:getVideoSize(0)
    cardWindow.portraitWidth = math.min(screenWidth, screenHeight) --宽
    cardWindow.portraitHeight = math.max(screenWidth, screenHeight) - videoHight - marginTop --高
    cardWindow.sumHotspot = sumHotspot
    cardWindow.hotspotOrder = hotspotOrder + 1 --当前热点序号
    cardWindow.hotspotRatio = 0.333 --收集占半分比
    cardWindow.collectStatus = 1
    cardWindow.collectCount = 1
    cardWindow.id = "os_card_window" .. tostring(data.id) .. tostring(data.hotspotOrder)
    cardWindow.launchPlanId = data.launchPlanId
    cardWindow.isHotOrder1 = false
    cardWindow.isHotOrder2 = false
    cardWindow.isHotOrder3 = false
    if data.data.userCardInfo ~= nil then
        -- print("LuaView os card window userCardInfo "..Native:tableToJson(data.data.userCardInfo))
        cardWindow.userCardInfo = data.data.userCardInfo
        if cardWindow.hotspotOrder == 1 then
            cardWindow.userCardInfo.isHotOrder1 = true
        elseif cardWindow.hotspotOrder == 2 then
            cardWindow.userCardInfo.isHotOrder2 = true
        elseif cardWindow.hotspotOrder == 3 then
            cardWindow.userCardInfo.isHotOrder3 = true
        end

        cardWindow.collectStatus = cardWindow.userCardInfo.collectStatus
        cardWindow.isHotOrder1 = cardWindow.userCardInfo.isHotOrder1
        cardWindow.isHotOrder2 = cardWindow.userCardInfo.isHotOrder2 --是否收集状态
        cardWindow.isHotOrder3 = cardWindow.userCardInfo.isHotOrder3
        cardWindow.collectStatus = checkCollectStatus()
        if cardWindow.userCardInfo.collectStatus == 1 then
            postUserCardInfo()
        end
        if (cardWindow.collectStatus == 2) then
            local showLinkUrl = getHotspotExposureTrackLink(data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (cardWindow.launchPlanId ~= nil) then
                osTrack(cardWindow.launchPlanId, 2, 1)
            end
        end
    else
        if cardWindow.hotspotOrder == 1 then
            cardWindow.isHotOrder1 = true
        elseif cardWindow.hotspotOrder == 2 then
            cardWindow.isHotOrder2 = true
        elseif cardWindow.hotspotOrder == 3 then
            cardWindow.isHotOrder3 = true
        end
        postUserCardInfo()
    end
    if (cardWindow.sumHotspot == 2) then
        if cardWindow.collectCount < 2 then
            cardWindow.hotspotRatio = cardWindow.collectCount / 2.0
        end
    elseif (cardWindow.sumHotspot == 3) then
        if cardWindow.collectCount < 3 then
            cardWindow.hotspotRatio = cardWindow.collectCount / 3.0
        end
    end
    -- cardWindow.collectStatus = 3 --1.收集未成功 2.收集成功 3.领取成功
    -- if (cardWindow.collectStatus == 1) then
    -- cardWindow.isHotOrder1 = false
    -- cardWindow.isHotOrder2 = true --是否收集状态
    -- cardWindow.isHotOrder3 = false
    -- else
    --     cardWindow.isHotOrder1 = true
    --     cardWindow.isHotOrder2 = true --是否收集状态
    --     cardWindow.isHotOrder3 = true
    -- end
end

function show(args)
    if (args == nil or args.data == nil or cardWindow.luaView ~= nil) then
        return
    end
    cardWindow.request = HttpRequest()
    setConfig(args.data)

    onCreate(args.data)
    -- postUserCardInfo()
end

