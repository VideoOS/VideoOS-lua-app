--
-- Created by IntelliJ IDEA.
-- User: videojj_pls
-- Date: 2018/10/29
-- Time: 2:36 PM
-- To change this template use File | Settings | File Templates.
--
require "os_config"
require "os_string"
require "os_constant"
require "os_util"
require "os_track"
voteWindow = object:new()
local adTypeName = "voteWindow"
local scale = getScale()
local OS_ICON_WEDGE_CLOSE = "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"
local OS_ICON_PRELOAD = "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"
local OS_NO_LOGIN_INFO = "您还未登录,请先登录"
local OS_H_BG = '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'
local OS_V_BG = ''
local function getHotspotExposureTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.exposureTrackLink
end

local function getHotspotClickTrackLink(data, index)
    if (data == nil or index == nil) then
        return nil
    end
    local hotspotTrackLinkTable = data.infoTrackLink
    if (hotspotTrackLinkTable == nil) then
        return nil
    end
    local indexHotspotTrackLinkTable = hotspotTrackLinkTable[index]
    if (indexHotspotTrackLinkTable == nil) then
        return nil
    end
    return indexHotspotTrackLinkTable.clickTrackLink
end

local function closeView()
    Native:widgetEvent(eventTypeClose, voteWindow.id, adTypeName, actionTypeNone, "")
    Native:destroyView()
end

local function mathPercent(num)
    if (type(num) ~= 'number' or type(num) == 'inf') then
        return 0, "0.0%"
    end
    if (num == 0 or num == 0.0 or tostring(num) == "inf") then
        return 0, "0.0%"
    end
    local floorNum = math.floor(num * 1000 + 0.5) * 0.1
    local percentNum = math.floor(floorNum)
    if (percentNum < floorNum) then
        return percentNum, floorNum .. "%"
    else
        return percentNum, floorNum .. ".0%"
    end
end

local function calculateVoteCount()

    local len = 0
    if voteWindow.voteCount ~= nil then
        for k, v in pairs(voteWindow.voteCount) do
            len = len + v
        end
    end

    voteWindow.totalVote = len
    if voteWindow.totalVote == 0 then
        voteWindow.totalVote = 1
    end
end

local function translationAnim(x, y)
    local anim = Animation():translation(x, y):duration(0.3)
    return anim
end

local function startViewTranslationAnim(view, x, y, table)
    if (view == nil) then
        return nil
    end
    if table ~= nil then
        return translationAnim(x, y):with(view):callback(table):start()
    else
        return translationAnim(x, y):with(view):start()
    end
end

local function getUserVoteInfo(callback)

    local businessInfo = {
        userId = Native:getIdentity(),
        creativeId = voteWindow.data.creativeId
    }

    local paramData = {
        businessParam = businessInfo,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    --     print("==[LuaView] "..userInfoTable.uid)
    -- print("[LuaView] "..OS_HTTP_GET_MOBILE_QUERY)
    -- print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    voteWindow.request:post(OS_HTTP_GET_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        voteWindow.loadingCount = voteWindow.loadingCount - 1
        if voteWindow.loadingCount <= 0 then
            voteWindow.voteLoadingView:hide()
        end

        if (response == nil) then
            voteWindow.voteErrorView:show()
            return
        end
        -- print("luaview getUserVoteInfo 11"..Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            voteWindow.voteErrorView:show()
            return
        end
        local dataTable = response.businessInfo
        if (dataTable == nil) then
            local showLinkUrl = getHotspotExposureTrackLink(voteWindow.data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (voteWindow.launchPlanId ~= nil) then
                osTrack(voteWindow.launchPlanId, 2, 1)
            end
            if callback ~= nil then
                callback()
            end
            return
        end
        if dataTable.isVote == true then
            voteWindow.section = dataTable.vote
            showVoteResult()
        else
            local showLinkUrl = getHotspotExposureTrackLink(voteWindow.data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (voteWindow.launchPlanId ~= nil) then
                osTrack(voteWindow.launchPlanId, 2, 1)
            end
        end
    end, voteWindow.luaview)
end

local function postUserVoteInfo(voteIndex)

    local businessInfoTable = {
        isVote = true,
        vote = voteIndex
    }
    local businessParamTable = {
        userId = Native:getIdentity(),
        creativeId = voteWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    print("[LuaView] " .. OS_HTTP_POST_MOBILE_QUERY)
    print("[LuaView] " .. Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    voteWindow.request:post(OS_HTTP_POST_MOBILE_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview postUserVoteInfo")
        if (response == nil) then
            return
        end
        print("luaview postUserVoteInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            return
        end
        local dataTable = response.launchInfoList
        if (dataTable == nil) then
            return
        end
    end, voteWindow.luaview)
end

local function getVoteCountInfo()

    local businessInfoTable = {}
    for k, v in pairs(voteWindow.data.data.voteList) do
        businessInfoTable[k] = {
            action = "count",
            condition = {
                {
                    key = "vote",
                    value = k,
                    operator = "equal"
                }
            }
        }
    end

    local businessParamTable = {
        creativeId = voteWindow.data.creativeId,
        businessInfo = businessInfoTable
    }

    local paramData = {
        businessParam = businessParamTable,
        commonParam = Native:commonParam()
    }

    local paramDataString = Native:tableToJson(paramData)
    print("[LuaView] " .. paramDataString)
    print("[LuaView] " .. OS_HTTP_GET_COMMON_QUERY)
    --print("[LuaView] "..Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY))
    voteWindow.request:post(OS_HTTP_GET_COMMON_QUERY, {
        bu_id = buId,
        device_type = deviceType,
        data = Native:aesEncrypt(paramDataString, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
    }, function(response, errorInfo)
        print("luaview getVoteCountInfo")

        voteWindow.loadingCount = voteWindow.loadingCount - 1
        if voteWindow.loadingCount <= 0 then
            voteWindow.voteLoadingView:hide()
        end

        if (response == nil) then
            voteWindow.voteErrorView:show()
            return
        end
        print("luaview getVoteCountInfo 11")
        print("luaview getVoteCountInfo 11" .. Native:tableToJson(response))
        responseData = Native:aesDecrypt(response.encryptData, OS_HTTP_PUBLIC_KEY, OS_HTTP_PUBLIC_KEY)
        print("luaview " .. responseData)
        response = toTable(responseData)
        if (response.resCode ~= "00") then
            voteWindow.voteErrorView:show()
            return
        end
        local dataTable = response.commonResult
        if (dataTable == nil) then
            return
        end
        voteWindow.voteCount = dataTable
        --如果需要显示投票结果，显示投票结果
        if voteWindow.needShowVoteResult ~= nil and voteWindow.needShowVoteResult == true then
            calculateVoteCount()
            voteWindow.voteWindowScrollview:reload()
        end
    end)
end

--未上传时传递index，对应count+1，已上传不需要+1
function showVoteResult(index)
    local clickLinkUrl = getHotspotClickTrackLink(voteWindow.data, 1)
    if (clickLinkUrl ~= nil) then
        Native:get(clickLinkUrl)
    end
    if (voteWindow.launchPlanId ~= nil) then
        osTrack(voteWindow.launchPlanId, 3, 1)
    end
    if voteWindow.voteCount == nil then
        voteWindow.isVoted = true
        voteWindow.needShowVoteResult = true
        return
    end
    if index ~= nil then
        voteWindow.voteCount[index] = voteWindow.voteCount[index] + 1
        voteWindow.section = index
        postUserVoteInfo(index)
    end

    calculateVoteCount()
    voteWindow.isVoted = true
    voteWindow.voteWindowScrollview:reload()
end

local function voteClickEvent(section, row)
    -- local userInfoTable = Native:getUserInfo()
    -- if (userInfoTable == nil or userInfoTable.uid == nil or userInfoTable.uid == "") then
    --     Toast(OS_NO_LOGIN_INFO)
    --     Native:requireLogin(function(userInfo)
    --         voteWindow.loadingCount = voteWindow.loadingCount + 1
    --         voteWindow.voteLoadingView:show()
    --         getUserVoteInfo(function()
    --             postUserVoteInfo(row)
    --             showVoteResult(row)
    --         end)
    --     end)
    --     return
    -- end

    showVoteResult(row)
end

local function setLuaViewSize(luaview, isPortrait) --设置当前容器大小
    if (luaview == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        luaview:frame(0, 0, math.min(screenWidth, screenHeight), math.max(screenWidth, screenHeight))
        luaview:align(Align.BOTTOM)
    else
        luaview:frame(0, 0, math.max(screenWidth, screenHeight), math.min(screenWidth, screenHeight))
        luaview:align(Align.RIGHT)
    end
end

local function setVoteViewSize(data, voteWindowContentView, voteBackgroundImage, isPortrait) --设置当前容器大小
    if (data == nil or voteWindowContentView == nil or voteBackgroundImage == nil) then
        return
    end

    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        voteWindowContentView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        voteWindowContentView:align(Align.BOTTOM)

        voteBackgroundImage:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        voteBackgroundImage:image(Data(OS_V_BG))

        if System.ios() then
            voteWindowContentView:frame(0, math.max(screenWidth, screenHeight) - voteWindow.portraitHeight, voteWindow.portraitWidth, voteWindow.portraitHeight)
        else
            voteWindowContentView:align(Align.BOTTOM)
        end
    else
        voteWindowContentView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
        voteWindowContentView:align(Align.RIGHT)

        voteBackgroundImage:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
        voteBackgroundImage:image(Data(OS_H_BG))
        if System.ios() then
            voteWindowContentView:frame(math.max(screenWidth, screenHeight) - 200 * scale, 0, 200 * scale, math.min(screenWidth, screenHeight))
        else
            voteWindowContentView:align(Align.RIGHT)
        end
    end
end

local function setVoteLoadingViewSize(data, voteLoadingView, voteLoading, isPortrait) --设置当前容器大小
    if (data == nil or voteLoadingView == nil or voteLoading == nil) then
        return
    end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        voteLoadingView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
    else
        voteLoadingView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
    end
    voteLoadingView:align(Align.RIGHT)
    voteLoading:frame(0, 0, 40, 40)
    voteLoading:align(Align.CENTER)
end

local function setVoteErrorViewSize(data, voteErrorView, voteErrorMessage, isPortrait) --设置当前容器大小
    -- if (data == nil or voteErrorView == nil or voteErrorMessage == nil) then
    --     return
    -- end
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        voteErrorView:frame(0, 0, voteWindow.portraitWidth, voteWindow.portraitHeight)
        voteErrorMessage:frame(0, voteWindow.portraitHeight * 0.7, math.min(screenWidth, screenHeight), 40)
    else
        voteErrorView:frame(0, 0, 200 * scale, math.min(screenWidth, screenHeight))
        voteErrorMessage:frame(0, math.min(screenWidth, screenHeight) * 0.7, 200 * scale, 40)
    end
    voteErrorView:align(Align.RIGHT)
end

local function setVoteIconViewSize(data, voteIconView, isPortrait)
    if (data == nil or voteIconView == nil) then
        return
    end
    if (isPortrait) then
        voteIconView:xy((voteWindow.portraitWidth - 30 * scale) / 2, 0.164 * voteWindow.portraitHeight)
    else
        voteIconView:xy(85 * scale, 56 * scale)
    end
end

local function setVoteTopViewSize(data, voteWindowTopLabel, voteWindowTopCloseView, isPortrait) --设置当前容器大小
    if (data == nil or voteWindowTopLabel == nil or voteWindowTopCloseView == nil) then
        return
    end
    if (isPortrait) then
        local screenWidth, screenHeight = System.screenSize()
        voteWindowTopCloseView:show()
        voteWindowTopLabel:frame(47 * scale, 28 * scale, math.min(screenWidth, screenHeight)-94, 27 * scale)
        voteWindowTopLabel:textSize(18)
    else
        voteWindowTopCloseView:hide()
        voteWindowTopLabel:frame(12 * scale, 30 * scale, 176 * scale, 22 * scale)
        voteWindowTopLabel:textSize(14)
    end
end

local function setVoteScrollviewSize(data, voteWindowScrollview, isPortrait) --设置当前容器大小
    if (data == nil or voteWindowScrollview == nil) then
        return
    end
    if (isPortrait) then
        local screenWidth, screenHeight = System.screenSize()
        voteWindowScrollview:frame(voteWindow.portraitWidth * 0.120, voteWindow.portraitHeight * 0.199, voteWindow.portraitWidth * 0.760, voteWindow.portraitHeight * 0.660)
    else
        voteWindowScrollview:frame(8 * scale, 70 * scale, 184 * scale, 294 * scale)
    end
    voteWindowScrollview:reload()
end

--屏幕旋转--
local function rotationScreen(isPortrait)
    setLuaViewSize(voteWindow.luaview, isPortrait)
    setVoteViewSize(voteWindow.data, voteWindow.voteWindowContentView, voteWindow.voteBackgroundImage, isPortrait)
    setVoteIconViewSize(voteWindow.data, voteWindow.voteWindowIcon, isPortrait)
    setVoteTopViewSize(voteWindow.data, voteWindow.voteWindowTopLabel, voteWindow.voteWindowTopCloseView, isPortrait)
    setVoteScrollviewSize(voteWindow.data, voteWindow.voteWindowScrollview, isPortrait)
    setVoteLoadingViewSize(voteWindow.data, voteWindow.voteLoadingView, voteWindow.voteLoading, isPortrait)
    setVoteErrorViewSize(voteWindow.data, voteWindow.voteErrorView, voteWindow.voteErrorMessage, isPortrait)
end

local function registerMedia()
    local media = Media()
    -- body
    -- 注册window callback通知
    local callbackTable = {
        --0: 竖屏小屏幕，1 竖屏全凭，2 横屏全屏
        onPlayerSize = function(type)
            if (type == 0) then
                rotationScreen(true)
            elseif (type == 1) then
                rotationScreen(true)
            elseif (type == 2) then
                rotationScreen(false)
            end
            voteWindow.voteWindowScrollview:reload()
        end
    }
    media:mediaCallback(callbackTable)
    return media
end

local function getSectionCount(data)
    if (data == nil) then
        return 0
    end
    local dataTable = data.data
    if (dataTable == nil) then
        return 0
    end
    local voteRule = dataTable.voteRule
    if (voteRule ~= nil) then
        return 2
    else
        return 1
    end
end

local function getRowCount(data, section)
    if (data == nil) then
        return 0
    end
    local dataTable = data.data
    if (dataTable == nil) then
        return 0
    end
    local voteList = dataTable.voteList
    if (voteList == nil) then
        return 0
    end
    if (section == 1) then
        return table_leng(voteList)
    else
        return 1
    end
end

local function getStateCellSize(data)
    if (data == nil) then
        return 0, 0
    end
    local voteRule = data.voteRule
    if (voteRule == nil) then
        return 0, 0
    end
    local isPortrait = Native:isPortraitScreen()
    if (isPortrait) then
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, 334 * scale, 14)
        local screenWidth, screenHeight = System.screenSize()
        return math.min(screenWidth, screenHeight), screenHeight + 30 * scale
    else
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, 160 * scale, 12)
        return 200 * scale, textHeight + 20 * scale
    end
end

local function createInitCell(cell, section, row)

    cell.spaceView = View()
    cell.spaceView:backgroundColor(0xF3F3F3)

    cell.rootView = View()
    cell.iconLayout = View()
    cell.iconLayout:borderWidth(scale)
    cell.iconLayout:borderColor(0xFD5252)
    cell.iconView = Image(Native)
    cell.iconView:placeHolderImage(Data(OS_ICON_PRELOAD))
    cell.iconView:scaleType(ScaleType.CENTER_CROP)
    cell.nameView = Label()
    cell.nameView:textColor(0x2E2E2E)
    cell.nameView:textAlign(TextAlign.LEFT)

    cell.voteTagView = View() -- 投票进度
    cell.voteTagView:backgroundColor(0xFD5252)
    cell.voteTagView:hide()

    cell.percentView = Label()
    cell.percentView:textColor(0xFD5252)
    cell.percentView:text("100.0%")
    cell.percentView:textAlign(TextAlign.LEFT)
    cell.percentView:hide()

    --    cell.voteView = Image(Native)
    --    cell.voteView:scaleType(ScaleType.FIT_XY)
    cell.voteView = Label()
    cell.voteView:textColor(0xFFFFFF)
    cell.voteView:text("投票")
    cell.voteView:backgroundColor(0xFD5252)
    cell.voteView:textAlign(TextAlign.CENTER)
    cell.voteView:hide()

    cell.iconLayout:addView(cell.iconView)
end

local function createInitStateCell(cell, section, row)
    cell.stateView = Label()
    cell.stateView:textColor(0xD3D3D3)
    if (System.android()) then
        cell.stateView:maxLines(100)
    else
        cell.stateView:lines(100)
    end
    cell.stateView:textAlign(TextAlign.LEFT)
end

local function createCellLandscapeSize(data, cell, section, row)
    if (row == 1) then
        cell.rootView:frame(0, 22 * scale, 184 * scale, 82 * scale)
        cell.spaceView:frame(12 * scale, 81 * scale, 160 * scale, scale)
        cell.iconLayout:frame(12 * scale, 32 * scale, 40 * scale, 40 * scale)
        cell.nameView:frame(62 * scale, 22 * scale, 120 * scale, 60 * scale)
    else
        cell.rootView:frame(0, 0, 184 * scale, 61 * scale)
        cell.spaceView:frame(12 * scale, 60 * scale, 160 * scale, scale)
        cell.iconLayout:frame(12 * scale, 10 * scale, 40 * scale, 40 * scale)
        cell.nameView:frame(62 * scale, 0, 120 * scale, 60 * scale)
    end
    cell.iconView:frame(scale, scale, 38 * scale, 38 * scale)
    cell.nameView:textSize(12)

    if (voteWindow.isVoted) then
        cell.voteTagView:show()
        cell.percentView:show()
        cell.voteView:hide()
        local percent, percentText = mathPercent(voteWindow.voteCount[row] / voteWindow.totalVote)
        local percentWidth = percent * (60 * scale / 100) --85 * scale为最大宽度
        if (percentWidth == 0) then
            percentWidth = 6 * scale
        end
        if (row == 1) then
            cell.voteTagView:frame(62 * scale, 65 * scale, percentWidth, 6 * scale)
            cell.voteTagView:cornerRadius(3 * scale)

            cell.percentView:frame(68 * scale + percentWidth, 63 * scale, 51.5 * scale, 12 * scale)
        else
            cell.voteTagView:frame(62 * scale, 43 * scale, percentWidth, 6 * scale)
            cell.voteTagView:cornerRadius(3 * scale)

            cell.percentView:frame(68 * scale + percentWidth, 41 * scale, 51.5 * scale, 12 * scale)
        end
        cell.percentView:textSize(12)
        cell.percentView:text(percentText)
    else
        if (cell.voteTagView:isShow()) then
            cell.voteTagView:hide()
        end
        if (cell.percentView:isShow()) then
            cell.percentView:hide()
        end
        if (cell.voteView:isHide()) then
            cell.voteView:show()
        end
        if (row == 1) then
            cell.voteView:frame(131 * scale, 42 * scale, 48 * scale, 20 * scale)
        else
            cell.voteView:frame(131 * scale, 20 * scale, 48 * scale, 20 * scale)
        end
        cell.voteView:cornerRadius(10 * scale)
        cell.voteView:textSize(12)
    end


    if (data == nil) then
        return
    end
    local imageUrl = data.imageUrl
    if (imageUrl ~= nil) then
        cell.iconView:image(imageUrl)
    end
    local title = data.title
    if (title ~= nil) then
        cell.nameView:text(title)
    end
    --    local btnImageUrl = voteWindow.data.data.voteBtnImage
    --    if (btnImageUrl ~= nil) then
    --        cell.voteView:image(btnImageUrl)
    --    end
    cell.voteView:onClick(function()
        --TODO 投票逻辑添加
        voteClickEvent(section, row)
    end)
end

local function createStateCellLandscapeSize(data, cell, section, row)

    if (data == nil) then
        return
    end

    local voteRule = data.voteRule
    if (System.android()) then
        cell.stateView:margin(12 * scale, 9*scale, 12 * scale, 12 * scale)
    else
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, 184 * scale - 12 * scale * 2, 12)
        cell.stateView:frame(12 * scale, 10 * scale, textWidth, textHeight + 10 * scale)
    end

    cell.stateView:textSize(12)

    if (voteRule ~= nil) then
        cell.stateView:text(voteRule)
    end
end

local function createCellPortraitSize(data, cell, section, row)
    local screenWidth, screenHeight = System.screenSize()
    local rootWidth = math.min(screenWidth, screenHeight) * 0.76
    if (row == 1) then
        cell.rootView:frame(0, 14 * scale, rootWidth, 84 * scale)
        cell.spaceView:frame(25 * scale, 83 * scale, rootWidth - 50 * scale, scale)
        cell.iconLayout:frame(25 * scale, 25 * scale, 46 * scale, 46 * scale)
        cell.nameView:frame(90 * scale, 13 * scale, 246 * scale, 70 * scale)
    else
        cell.rootView:frame(0, 0, rootWidth, 70 * scale)
        cell.spaceView:frame(25 * scale, 69 * scale, rootWidth - 50 * scale, scale)
        cell.iconLayout:frame(25 * scale, 12 * scale, 46 * scale, 46 * scale)
        cell.nameView:frame(90 * scale, 0, 246 * scale, 70 * scale)
    end
    cell.iconView:frame(scale, scale, 44 * scale, 44 * scale)
    cell.nameView:textSize(16)

    if (voteWindow.isVoted) then
        if (cell.voteTagView:isHide()) then
            cell.voteTagView:show()
        end
        if (cell.percentView:isHide()) then
            cell.percentView:show()
        end
        if (cell.voteView:isShow()) then
            cell.voteView:hide()
        end
        local percent, percentText = mathPercent(voteWindow.voteCount[row] / voteWindow.totalVote)
        local percentWidth = percent * (120 * scale / 100) --140 * scale为最大宽度
        if (percentWidth == 0) then
            percentWidth = 10 * scale
        end
        if (row == 1) then
            cell.voteTagView:frame(90 * scale, 64 * scale, percentWidth, 6 * scale)
            cell.voteTagView:cornerRadius(3 * scale)
            cell.percentView:frame(95 * scale + percentWidth, 61 * scale, 64.5 * scale, 12 * scale) --109 * scale其它偏移量
        else
            cell.voteTagView:frame(90 * scale, 51 * scale, percentWidth, 6 * scale)
            cell.voteTagView:cornerRadius(3 * scale)
            cell.percentView:frame(95 * scale + percentWidth, 48 * scale, 64.5 * scale, 12 * scale) --109 * scale其它偏移量
        end

        cell.percentView:textSize(12)
        cell.percentView:text(percentText)
    else
        if (cell.voteTagView:isShow()) then
            cell.voteTagView:hide()
        end
        if (cell.percentView:isShow()) then
            cell.percentView:hide()
        end
        if (cell.voteView:isHide()) then
            cell.voteView:show()
        end
        if (row == 1) then
            cell.voteView:frame(197 * scale, 36 * scale, 62 * scale, 24 * scale)
        else
            cell.voteView:frame(197 * scale, 23 * scale, 62 * scale, 24 * scale)
        end
        cell.voteView:cornerRadius(15 * scale)
        cell.voteView:textSize(16)
    end



    if (data == nil) then
        return
    end
    local imageUrl = data.imageUrl
    if (imageUrl ~= nil) then
        cell.iconView:image(imageUrl)
    end
    local title = data.title
    if (title ~= nil) then
        cell.nameView:text(title)
    end
    --    local btnImageUrl = voteWindow.data.data.voteBtnImage
    --    if (btnImageUrl ~= nil) then
    --        cell.voteView:image(btnImageUrl)
    --    end

    cell.voteView:onClick(function()
        --TODO 投票逻辑添加
        voteClickEvent(section, row)
    end)
end

local function createStateCellPortraitSize(data, cell, section, row)

    if (data == nil) then
        return
    end
    local voteRule = data.voteRule

    if (System.android()) then
        cell.stateView:margin(25 * scale, 9*scale, 25 * scale, 15 * scale)
    else
        local screenWidth, screenHeight = System.screenSize()
        local cellWidth = voteWindow.portraitWidth * 0.760
        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, cellWidth - 25 * scale * 2 - 2 * scale, 12)
        cell.stateView:frame(25 * scale, 15 * scale, cellWidth - 25 * scale * 2, textHeight + 5 * scale)
    end
    cell.stateView:textSize(12)


    if (voteRule ~= nil) then
        cell.stateView:text(voteRule)
    end
end

--全局父控件
local function createLuaView(isPortrait)
    local luaView
    -- if System.android() then
    --     luaView = View()
    -- else
    --     luaView = ThroughView()
    -- end
    luaView = View()
    setLuaViewSize(luaView, isPortrait)
    return luaView
end

--投票云窗大小控件
local function createVoteView(data, isPortrait)
    local voteWindowContentView = View()

    local voteBackgroundImage = Image(Native)
    voteBackgroundImage:scaleType(ScaleType.FIT_XY)

    setVoteViewSize(data, voteWindowContentView, voteBackgroundImage, isPortrait)

    return voteWindowContentView, voteBackgroundImage
end

--投票loading控件
local function createVoteLoadingView(data, isPortrait)
    local voteLoadingView = View()
    voteLoadingView:backgroundColor(0x000000, 0.4)
    local voteLoading = LoadingIndicator()
    voteLoading:start()
    setVoteLoadingViewSize(data, voteLoadingView, voteLoading, isPortrait)
    voteLoadingView:addView(voteLoading)
    voteLoadingView:hide()
    voteLoadingView:onClick(function()
    end)
    return voteLoadingView, voteLoading
end

--投票错误控件
local function createVoteErrorView(data, isPortrait)
    local voteErrorView = View()
    voteErrorView:backgroundColor(0x000000, 0.4)

    local voteErrorMessage = Label()
    voteErrorMessage:textColor(0xFFFFFF)
    voteErrorMessage:text("服务器出错了，请稍后再试")
    voteErrorMessage:textAlign(TextAlign.CENTER)
    local voteLoading = LoadingIndicator()

    setVoteErrorViewSize(data, voteErrorView, voteErrorMessage, isPortrait)
    voteErrorView:addView(voteErrorMessage)
    voteErrorView:hide()
    voteErrorView:onClick(function()
        voteErrorView:hide()
    end)
    return voteErrorView, voteErrorMessage
end

local function createVoteIconView(data, isPortrait)
    local voteWindowIcon = Image(Native)
    voteWindowIcon:scaleType(ScaleType.CENTER_CROP)
    voteWindowIcon:size(30 * scale, 30 * scale)
    voteWindowIcon:placeHolderImage(Data(OS_ICON_PRELOAD))
    voteWindowIcon:cornerRadius(15 * scale)
    setVoteIconViewSize(data, voteWindowIcon, isPortrait)
    return voteWindowIcon
end

local function createVoteTopView(data, isPortrait)

    local voteWindowTopLabel = Label()
    local title = "快来Pick你喜欢的小姐姐吧"
    voteWindowTopLabel:textColor(0xF5F5F5)
    voteWindowTopLabel:textAlign(TextAlign.CENTER)
    voteWindowTopLabel:text(title)

    local voteWindowTopCloseView = View()
    voteWindowTopCloseView:frame(0, 0, 37 * scale, 36 * scale)
    voteWindowTopCloseView:align(Align.RIGHT)
    voteWindowTopCloseView:hide()

    local voteWindowTopCloseImage = Image(Native)
    voteWindowTopCloseImage:frame(0, 0, 15 * scale, 15 * scale)
    voteWindowTopCloseImage:scaleType(ScaleType.CENTER_CROP)
    voteWindowTopCloseImage:image(Data(OS_ICON_WEDGE_CLOSE))
    voteWindowTopCloseImage:align(Align.BOTTOM)

    voteWindowTopCloseView:addView(voteWindowTopCloseImage)

    setVoteTopViewSize(data, voteWindowTopLabel, voteWindowTopCloseView, isPortrait)
    return voteWindowTopLabel, voteWindowTopCloseView
end

local function createVoteScrollview(data, isPortrait)
    local dataTable = voteWindow.data.data
    local voteTable = dataTable.voteList
    local voteWindowScrollview = CollectionView {
        Section = {
            SectionCount = function()
                -- 返回页面区块的个数（不同区块的种类数）
                return getSectionCount(voteWindow.data)
            end,
            RowCount = function(section)
                -- 返回每个区块对应有的坑位数
                return getRowCount(voteWindow.data, section)
            end
        },
        Cell = {
            Id = function(section, row)
                -- 返回每个区块对应额坑位ID
                if (section == 1) then
                    return "VoteCell"
                elseif (section == 2) then
                    if (System.android()) then
                        return "VoteState"
                    else
                        return "VoteStateIOS"
                    end
                end
            end,
            VoteCell = {
                Size = function(section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        local screenWidth, screenHeight = System.screenSize()
                        local h = 70 * scale
                        if (row == 1) then
                            h = 84 * scale
                        end
                        return math.min(screenWidth, screenHeight) * 0.76, h
                    else
                        local h = 61 * scale
                        if (row == 1) then
                            h = 82 * scale
                        end
                        return 200 * scale, h
                    end
                end,
                Init = function(cell, section, row)
                    createInitCell(cell, section, row)
                end,
                Layout = function(cell, section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then

                        createCellPortraitSize(voteTable[row], cell, section, row)
                    else
                        createCellLandscapeSize(voteTable[row], cell, section, row)
                    end
                end
            },
            VoteState = {
                Sizes = function(section, row)
                    return 0, 0
                end,
                Init = function(cell, section, row)
                    createInitStateCell(cell, section, row)
                end,
                Layout = function(cell, section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        createStateCellPortraitSize(dataTable, cell, section, row)
                    else
                        createStateCellLandscapeSize(dataTable, cell, section, row)
                    end
                end
            },
            VoteStateIOS = {
                Size = function(section, row)
                    local voteRule = dataTable.voteRule
                    local isPortrait = Native:isPortraitScreen()
                    if voteRule == nil then
                        return 0, 0
                    end
                    if (isPortrait) then
                        local screenWidth, screenHeight = System.screenSize()
                        local cellWidth = voteWindow.portraitWidth * 0.760
                        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, cellWidth - 50 * scale, 12)
                        return cellWidth, textHeight + 9 * scale + 12 * scale
                    else
                        local cellWidth = 184 * scale
                        local textWidth, textHeight = Native:stringSizeWithWidth(voteRule, cellWidth - 24 * scale, 12)
                        return cellWidth, textHeight + 9 * scale + 12 * scale
                    end
                end,
                Init = function(cell, section, row)
                    createInitStateCell(cell, section, row)
                end,
                Layout = function(cell, section, row)
                    local isPortrait = Native:isPortraitScreen()
                    if (isPortrait) then
                        createStateCellPortraitSize(dataTable, cell, section, row)
                    else
                        createStateCellLandscapeSize(dataTable, cell, section, row)
                    end
                end
            }
        },
        Callback = {
            -- 整个CollectionView的事件回调
            Scrolling = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                -- 滚动中回调
            end,
            ScrollBegin = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                -- 滚动开始回调
            end,
            ScrollEnd = function(firstVisibleSection, firstVisibleRow, visibleCellCount)
                -- 滚动结束回调
            end
        }
    }
    setVoteScrollviewSize(data, voteWindowScrollview, isPortrait)
    voteWindowScrollview:backgroundColor(0xFFFFFF)
    voteWindowScrollview:cornerRadius(8 * scale)
    return voteWindowScrollview
end


local function onCreate(data)
    registerMedia()

    local isPortrait = Native:isPortraitScreen()
    voteWindow.luaview = createLuaView(isPortrait)
    voteWindow.voteWindowContentView, voteWindow.voteBackgroundImage = createVoteView(data, isPortrait)
    voteWindow.voteWindowIcon = createVoteIconView(data, isPortrait)
    voteWindow.voteWindowTopLabel, voteWindow.voteWindowTopCloseView = createVoteTopView(data, isPortrait)
    voteWindow.voteWindowScrollview = createVoteScrollview(data, isPortrait)
    voteWindow.voteLoadingView, voteWindow.voteLoading = createVoteLoadingView(data, isPortrait)
    voteWindow.voteErrorView, voteWindow.voteErrorMessage = createVoteErrorView(data, isPortrait)

    voteWindow.luaview:addView(voteWindow.voteWindowContentView)

    voteWindow.voteWindowContentView:addView(voteWindow.voteBackgroundImage)
    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowTopLabel)
    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowTopCloseView)
    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowScrollview)
    voteWindow.voteWindowContentView:addView(voteWindow.voteWindowIcon)
    --
    voteWindow.voteWindowContentView:addView(voteWindow.voteLoadingView)
    voteWindow.voteWindowContentView:addView(voteWindow.voteErrorView)
    local screenWidth, screenHeight = System.screenSize()
    if (isPortrait) then
        if System.ios() then
            voteWindow.voteWindowContentView:y(math.max(screenWidth, screenHeight))
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowContentView, 0, -voteWindow.portraitHeight)
        else
            voteWindow.voteWindowContentView:translation(0, voteWindow.portraitHeight)
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowContentView, 0, 0)
        end
    else
        if System.ios() then
            voteWindow.voteWindowContentView:x(math.max(screenWidth, screenHeight))
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowContentView, -200 * scale, 0)
        else
            voteWindow.voteWindowContentView:translation(200 * scale, 0)
            voteWindow.anim = startViewTranslationAnim(voteWindow.voteWindowContentView, 0, 0)
        end
    end

    voteWindow.voteWindowContentView:onClick(function()
    end)
    voteWindow.luaview:onClick(function()
        local isPortrait = Native:isPortraitScreen()
        if (isPortrait) then
            startViewTranslationAnim(voteWindow.voteWindowContentView, 0, voteWindow.portraitHeight, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        else
            startViewTranslationAnim(voteWindow.voteWindowContentView, 200 * scale, 0, {
                onCancel = function()
                    closeView()
                end,
                onEnd = function()
                    closeView()
                end,
                onPause = function()
                    closeView()
                end
            })
        end
    end)
    voteWindow.voteWindowTopCloseView:onClick(function()
        startViewTranslationAnim(voteWindow.voteWindowContentView, 0, voteWindow.portraitHeight, {
            onCancel = function()
                closeView()
            end,
            onEnd = function()
                closeView()
            end,
            onPause = function()
                closeView()
            end
        })
    end)
    local dataTable = voteWindow.data.data
    if (dataTable == nil) then
        return
    end
    local voteTitle = dataTable.voteTitle
    if (voteTitle ~= nil) then
        voteWindow.voteWindowTopLabel:text(voteTitle)
    end
    local voteIcon = dataTable.voteImageUrl
    if (voteIcon ~= nil) then
        voteWindow.voteWindowIcon:image(voteIcon)
    end
    Native:widgetEvent(eventTypeShow, voteWindow.id, adTypeName, actionTypeNone, "")
end

local function setConfig(data)
    if (data == nil) then
        return
    end
    voteWindow.data = data
    voteWindow.isVoted = false
    local screenWidth, screenHeight = System.screenSize()
    local videoWidth, videoHight, marginTop = Native:getVideoSize(0)
    voteWindow.portraitWidth = math.min(screenWidth, screenHeight) --宽
    voteWindow.portraitHeight = math.max(screenWidth, screenHeight) - videoHight - marginTop --高
    local dataTable = voteWindow.data.data
    if (dataTable == nil) then
        return
    end
    local voteListTable = dataTable.voteList
    if (voteListTable == nil) then
        voteWindow.totalVote = 1
        return
    end
end

function show(args)
    if (args == nil or args.data == nil or voteWindow.luaview ~= nil) then
        return
    end
    print("LuaView os vote window" .. Native:tableToJson(args))
    voteWindow.loadingCount = 0
    voteWindow.id = "os_vote_window" .. tostring(args.data.id)
    voteWindow.launchPlanId = args.data.launchPlanId
    voteWindow.request = HttpRequest()
    if (voteWindow.launchPlanId ~= nil) then
        osTrack(voteWindow.launchPlanId, 1, 1)
    end
    setConfig(args.data)
    onCreate(args.data)

    if args.data.data.voteCount == nil then
        voteWindow.totalVote = 1
        voteWindow.loadingCount = voteWindow.loadingCount + 1
        voteWindow.voteLoadingView:show()
        getVoteCountInfo()
    else
        local voteCount = args.data.data.voteCount
        voteWindow.voteCount = voteCount
        calculateVoteCount()
    end

    --用户已经登录，判定是否在vote热点页面取到用户投票数据
    if args.data.data ~= nil and args.data.data.userVote then
        local userVote = args.data.data.userVote
        if userVote.isVote == true then
            --用户已经投票，判定是否在vote热点页面取到票数
            voteWindow.section = userVote.vote
            if voteWindow.voteCount ~= nil then
                voteWindow.isVoted = true
                voteWindow.voteWindowScrollview:reload()
            else
                voteWindow.needShowVoteResult = true
            end
        else
            local showLinkUrl = getHotspotExposureTrackLink(args.data, 1)
            if (showLinkUrl ~= nil) then
                Native:get(showLinkUrl)
            end
            if (voteWindow.launchPlanId ~= nil) then
                osTrack(voteWindow.launchPlanId, 2, 1)
            end
        end
    else
        voteWindow.loadingCount = voteWindow.loadingCount + 1
        voteWindow.voteLoadingView:show()
        getUserVoteInfo()
    end
end